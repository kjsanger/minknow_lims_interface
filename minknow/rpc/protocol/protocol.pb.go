// Code generated by protoc-gen-go. DO NOT EDIT.
// source: minknow/rpc/protocol.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	_ "minknow_lims_interface/minknow/rpc"
	acquisition "minknow_lims_interface/minknow/rpc/acquisition"
	device "minknow_lims_interface/minknow/rpc/device"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProtocolState int32

const (
	// The protocol is still running.
	ProtocolState_PROTOCOL_RUNNING ProtocolState = 0
	// The protocol is waiting for the device to reach temperature
	//
	// Since 1.15
	ProtocolState_PROTOCOL_WAITING_FOR_TEMPERATURE ProtocolState = 4
	// Occurs when data protocol has stopped (either from a explicit rpc request or the script naturally ended)
	// and data is still being processed (albacore is still in catchup and processing reads).
	ProtocolState_PROTOCOL_WAITING_FOR_ACQUISITION ProtocolState = 5
	// The protocol finished on its own and did not report an error.
	//
	// This is determined by the protocol process exiting with a zero exit code.
	ProtocolState_PROTOCOL_COMPLETED ProtocolState = 1
	// The protocol was terminated by the user.
	ProtocolState_PROTOCOL_STOPPED_BY_USER ProtocolState = 2
	// The protocol finished on its own and reported an error.
	//
	// This is determined by the protocol process exiting with a non-zero exit code or because of a
	// signal. Often, this will be because an exception was raised in the Python code and not
	// caught, but could also indicate that the Python process crashed or was killed by some
	// mechanism other than by MinKNOW.
	ProtocolState_PROTOCOL_FINISHED_WITH_ERROR ProtocolState = 3
	// The protocol was terminated because the sequencing device encountered an error.
	ProtocolState_PROTOCOL_FINISHED_WITH_DEVICE_ERROR ProtocolState = 6
	// The protocol was terminated because MinKNOW could not send telemetry to start acquisition.
	ProtocolState_PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY ProtocolState = 7
)

var ProtocolState_name = map[int32]string{
	0: "PROTOCOL_RUNNING",
	4: "PROTOCOL_WAITING_FOR_TEMPERATURE",
	5: "PROTOCOL_WAITING_FOR_ACQUISITION",
	1: "PROTOCOL_COMPLETED",
	2: "PROTOCOL_STOPPED_BY_USER",
	3: "PROTOCOL_FINISHED_WITH_ERROR",
	6: "PROTOCOL_FINISHED_WITH_DEVICE_ERROR",
	7: "PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY",
}

var ProtocolState_value = map[string]int32{
	"PROTOCOL_RUNNING":                           0,
	"PROTOCOL_WAITING_FOR_TEMPERATURE":           4,
	"PROTOCOL_WAITING_FOR_ACQUISITION":           5,
	"PROTOCOL_COMPLETED":                         1,
	"PROTOCOL_STOPPED_BY_USER":                   2,
	"PROTOCOL_FINISHED_WITH_ERROR":               3,
	"PROTOCOL_FINISHED_WITH_DEVICE_ERROR":        6,
	"PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY": 7,
}

func (x ProtocolState) String() string {
	return proto.EnumName(ProtocolState_name, int32(x))
}

func (ProtocolState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{0}
}

type WaitForFinishedRequest_NotificationState int32

const (
	// Request return just after the protocol has temrinated, including any acquisition periods completing.
	WaitForFinishedRequest_NOTIFY_ON_TERMINATION WaitForFinishedRequest_NotificationState = 0
	// Request return prior to the script being termiated.
	// note: will try to return 5s before killing the protocol script.
	WaitForFinishedRequest_NOTIFY_BEFORE_TERMINATION WaitForFinishedRequest_NotificationState = 1
	// Notify as the protocol script finishes, not waiting for any in progress acquisition to complete.
	WaitForFinishedRequest_NOTIFY_ON_SCRIPT_TERMINATION WaitForFinishedRequest_NotificationState = 2
)

var WaitForFinishedRequest_NotificationState_name = map[int32]string{
	0: "NOTIFY_ON_TERMINATION",
	1: "NOTIFY_BEFORE_TERMINATION",
	2: "NOTIFY_ON_SCRIPT_TERMINATION",
}

var WaitForFinishedRequest_NotificationState_value = map[string]int32{
	"NOTIFY_ON_TERMINATION":        0,
	"NOTIFY_BEFORE_TERMINATION":    1,
	"NOTIFY_ON_SCRIPT_TERMINATION": 2,
}

func (x WaitForFinishedRequest_NotificationState) String() string {
	return proto.EnumName(WaitForFinishedRequest_NotificationState_name, int32(x))
}

func (WaitForFinishedRequest_NotificationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{8, 0}
}

type ProtocolRunUserInfo struct {
	// The group which the experiment should be held in.
	//
	// note: This value could be unset if a user did not specify a group_id when starting the protocol.
	ProtocolGroupId *wrappers.StringValue `protobuf:"bytes,1,opt,name=protocol_group_id,json=protocolGroupId,proto3" json:"protocol_group_id,omitempty"`
	// sample_id created by the user
	SampleId             *wrappers.StringValue `protobuf:"bytes,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProtocolRunUserInfo) Reset()         { *m = ProtocolRunUserInfo{} }
func (m *ProtocolRunUserInfo) String() string { return proto.CompactTextString(m) }
func (*ProtocolRunUserInfo) ProtoMessage()    {}
func (*ProtocolRunUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{0}
}

func (m *ProtocolRunUserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolRunUserInfo.Unmarshal(m, b)
}
func (m *ProtocolRunUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolRunUserInfo.Marshal(b, m, deterministic)
}
func (m *ProtocolRunUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolRunUserInfo.Merge(m, src)
}
func (m *ProtocolRunUserInfo) XXX_Size() int {
	return xxx_messageInfo_ProtocolRunUserInfo.Size(m)
}
func (m *ProtocolRunUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolRunUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolRunUserInfo proto.InternalMessageInfo

func (m *ProtocolRunUserInfo) GetProtocolGroupId() *wrappers.StringValue {
	if m != nil {
		return m.ProtocolGroupId
	}
	return nil
}

func (m *ProtocolRunUserInfo) GetSampleId() *wrappers.StringValue {
	if m != nil {
		return m.SampleId
	}
	return nil
}

type StartProtocolRequest struct {
	// The identifier of the protocol, as provided by list_protocols().
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The arguments to pass to the protocol.
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// User input describing the protocol.
	UserInfo             *ProtocolRunUserInfo `protobuf:"bytes,3,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StartProtocolRequest) Reset()         { *m = StartProtocolRequest{} }
func (m *StartProtocolRequest) String() string { return proto.CompactTextString(m) }
func (*StartProtocolRequest) ProtoMessage()    {}
func (*StartProtocolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{1}
}

func (m *StartProtocolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartProtocolRequest.Unmarshal(m, b)
}
func (m *StartProtocolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartProtocolRequest.Marshal(b, m, deterministic)
}
func (m *StartProtocolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartProtocolRequest.Merge(m, src)
}
func (m *StartProtocolRequest) XXX_Size() int {
	return xxx_messageInfo_StartProtocolRequest.Size(m)
}
func (m *StartProtocolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartProtocolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartProtocolRequest proto.InternalMessageInfo

func (m *StartProtocolRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *StartProtocolRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *StartProtocolRequest) GetUserInfo() *ProtocolRunUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type StartProtocolResponse struct {
	// UUID generated when the protocol is started, to uniquely represent this protocol instance
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartProtocolResponse) Reset()         { *m = StartProtocolResponse{} }
func (m *StartProtocolResponse) String() string { return proto.CompactTextString(m) }
func (*StartProtocolResponse) ProtoMessage()    {}
func (*StartProtocolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{2}
}

func (m *StartProtocolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartProtocolResponse.Unmarshal(m, b)
}
func (m *StartProtocolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartProtocolResponse.Marshal(b, m, deterministic)
}
func (m *StartProtocolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartProtocolResponse.Merge(m, src)
}
func (m *StartProtocolResponse) XXX_Size() int {
	return xxx_messageInfo_StartProtocolResponse.Size(m)
}
func (m *StartProtocolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartProtocolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartProtocolResponse proto.InternalMessageInfo

func (m *StartProtocolResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type StopProtocolRequest struct {
	// Specify how any running acquisition should
	// be handled when stopping the protocol.
	//
	// Protocol state will enter PROTOCOL_WAITING_FOR_ACQUISITION whilst any running
	// acquisition is finished.
	//
	// If a script ends on its own any analysis that was started is stopped, and it
	// is allowed to catchup. If the caller wants to end catchup they can call stop_protocol
	// to end catchup.
	//
	// Since 1.15
	DataActionOnStop     acquisition.StopRequest_DataAction `protobuf:"varint,1,opt,name=data_action_on_stop,json=dataActionOnStop,proto3,enum=ont.rpc.acquisition.StopRequest_DataAction" json:"data_action_on_stop,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *StopProtocolRequest) Reset()         { *m = StopProtocolRequest{} }
func (m *StopProtocolRequest) String() string { return proto.CompactTextString(m) }
func (*StopProtocolRequest) ProtoMessage()    {}
func (*StopProtocolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{3}
}

func (m *StopProtocolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopProtocolRequest.Unmarshal(m, b)
}
func (m *StopProtocolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopProtocolRequest.Marshal(b, m, deterministic)
}
func (m *StopProtocolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopProtocolRequest.Merge(m, src)
}
func (m *StopProtocolRequest) XXX_Size() int {
	return xxx_messageInfo_StopProtocolRequest.Size(m)
}
func (m *StopProtocolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopProtocolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopProtocolRequest proto.InternalMessageInfo

func (m *StopProtocolRequest) GetDataActionOnStop() acquisition.StopRequest_DataAction {
	if m != nil {
		return m.DataActionOnStop
	}
	return acquisition.StopRequest_STOP_DEFAULT
}

type StopProtocolResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopProtocolResponse) Reset()         { *m = StopProtocolResponse{} }
func (m *StopProtocolResponse) String() string { return proto.CompactTextString(m) }
func (*StopProtocolResponse) ProtoMessage()    {}
func (*StopProtocolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{4}
}

func (m *StopProtocolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopProtocolResponse.Unmarshal(m, b)
}
func (m *StopProtocolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopProtocolResponse.Marshal(b, m, deterministic)
}
func (m *StopProtocolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopProtocolResponse.Merge(m, src)
}
func (m *StopProtocolResponse) XXX_Size() int {
	return xxx_messageInfo_StopProtocolResponse.Size(m)
}
func (m *StopProtocolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopProtocolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopProtocolResponse proto.InternalMessageInfo

type ListProtocolsRequest struct {
	// If this is false, then will try to use the cached value of the protocol list where possible
	// (still subject to changes in flow cell).
	// If this is true, then will force a reload of the protocol list
	//
	// Defaults to false
	ForceReload          bool     `protobuf:"varint,1,opt,name=force_reload,json=forceReload,proto3" json:"force_reload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProtocolsRequest) Reset()         { *m = ListProtocolsRequest{} }
func (m *ListProtocolsRequest) String() string { return proto.CompactTextString(m) }
func (*ListProtocolsRequest) ProtoMessage()    {}
func (*ListProtocolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{5}
}

func (m *ListProtocolsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProtocolsRequest.Unmarshal(m, b)
}
func (m *ListProtocolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProtocolsRequest.Marshal(b, m, deterministic)
}
func (m *ListProtocolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProtocolsRequest.Merge(m, src)
}
func (m *ListProtocolsRequest) XXX_Size() int {
	return xxx_messageInfo_ListProtocolsRequest.Size(m)
}
func (m *ListProtocolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProtocolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProtocolsRequest proto.InternalMessageInfo

func (m *ListProtocolsRequest) GetForceReload() bool {
	if m != nil {
		return m.ForceReload
	}
	return false
}

type ProtocolInfo struct {
	Identifier           string                            `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Tags                 map[string]*ProtocolInfo_TagValue `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name                 string                            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TagExtractionResult  *ProtocolInfo_TagExtractionResult `protobuf:"bytes,4,opt,name=tag_extraction_result,json=tagExtractionResult,proto3" json:"tag_extraction_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ProtocolInfo) Reset()         { *m = ProtocolInfo{} }
func (m *ProtocolInfo) String() string { return proto.CompactTextString(m) }
func (*ProtocolInfo) ProtoMessage()    {}
func (*ProtocolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{6}
}

func (m *ProtocolInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolInfo.Unmarshal(m, b)
}
func (m *ProtocolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolInfo.Marshal(b, m, deterministic)
}
func (m *ProtocolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolInfo.Merge(m, src)
}
func (m *ProtocolInfo) XXX_Size() int {
	return xxx_messageInfo_ProtocolInfo.Size(m)
}
func (m *ProtocolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolInfo proto.InternalMessageInfo

func (m *ProtocolInfo) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ProtocolInfo) GetTags() map[string]*ProtocolInfo_TagValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ProtocolInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProtocolInfo) GetTagExtractionResult() *ProtocolInfo_TagExtractionResult {
	if m != nil {
		return m.TagExtractionResult
	}
	return nil
}

type ProtocolInfo_TagValue struct {
	// Types that are valid to be assigned to TagValue:
	//	*ProtocolInfo_TagValue_StringValue
	//	*ProtocolInfo_TagValue_BoolValue
	//	*ProtocolInfo_TagValue_IntValue
	//	*ProtocolInfo_TagValue_DoubleValue
	//	*ProtocolInfo_TagValue_ArrayValue
	//	*ProtocolInfo_TagValue_ObjectValue
	TagValue             isProtocolInfo_TagValue_TagValue `protobuf_oneof:"tag_value"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ProtocolInfo_TagValue) Reset()         { *m = ProtocolInfo_TagValue{} }
func (m *ProtocolInfo_TagValue) String() string { return proto.CompactTextString(m) }
func (*ProtocolInfo_TagValue) ProtoMessage()    {}
func (*ProtocolInfo_TagValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{6, 0}
}

func (m *ProtocolInfo_TagValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolInfo_TagValue.Unmarshal(m, b)
}
func (m *ProtocolInfo_TagValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolInfo_TagValue.Marshal(b, m, deterministic)
}
func (m *ProtocolInfo_TagValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolInfo_TagValue.Merge(m, src)
}
func (m *ProtocolInfo_TagValue) XXX_Size() int {
	return xxx_messageInfo_ProtocolInfo_TagValue.Size(m)
}
func (m *ProtocolInfo_TagValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolInfo_TagValue.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolInfo_TagValue proto.InternalMessageInfo

type isProtocolInfo_TagValue_TagValue interface {
	isProtocolInfo_TagValue_TagValue()
}

type ProtocolInfo_TagValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_ArrayValue struct {
	ArrayValue string `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_ObjectValue struct {
	ObjectValue string `protobuf:"bytes,6,opt,name=object_value,json=objectValue,proto3,oneof"`
}

func (*ProtocolInfo_TagValue_StringValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_BoolValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_IntValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_DoubleValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_ArrayValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_ObjectValue) isProtocolInfo_TagValue_TagValue() {}

func (m *ProtocolInfo_TagValue) GetTagValue() isProtocolInfo_TagValue_TagValue {
	if m != nil {
		return m.TagValue
	}
	return nil
}

func (m *ProtocolInfo_TagValue) GetStringValue() string {
	if x, ok := m.GetTagValue().(*ProtocolInfo_TagValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *ProtocolInfo_TagValue) GetBoolValue() bool {
	if x, ok := m.GetTagValue().(*ProtocolInfo_TagValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *ProtocolInfo_TagValue) GetIntValue() int64 {
	if x, ok := m.GetTagValue().(*ProtocolInfo_TagValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *ProtocolInfo_TagValue) GetDoubleValue() float64 {
	if x, ok := m.GetTagValue().(*ProtocolInfo_TagValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *ProtocolInfo_TagValue) GetArrayValue() string {
	if x, ok := m.GetTagValue().(*ProtocolInfo_TagValue_ArrayValue); ok {
		return x.ArrayValue
	}
	return ""
}

func (m *ProtocolInfo_TagValue) GetObjectValue() string {
	if x, ok := m.GetTagValue().(*ProtocolInfo_TagValue_ObjectValue); ok {
		return x.ObjectValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtocolInfo_TagValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtocolInfo_TagValue_StringValue)(nil),
		(*ProtocolInfo_TagValue_BoolValue)(nil),
		(*ProtocolInfo_TagValue_IntValue)(nil),
		(*ProtocolInfo_TagValue_DoubleValue)(nil),
		(*ProtocolInfo_TagValue_ArrayValue)(nil),
		(*ProtocolInfo_TagValue_ObjectValue)(nil),
	}
}

type ProtocolInfo_TagExtractionResult struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorReport          string   `protobuf:"bytes,2,opt,name=error_report,json=errorReport,proto3" json:"error_report,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtocolInfo_TagExtractionResult) Reset()         { *m = ProtocolInfo_TagExtractionResult{} }
func (m *ProtocolInfo_TagExtractionResult) String() string { return proto.CompactTextString(m) }
func (*ProtocolInfo_TagExtractionResult) ProtoMessage()    {}
func (*ProtocolInfo_TagExtractionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{6, 1}
}

func (m *ProtocolInfo_TagExtractionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolInfo_TagExtractionResult.Unmarshal(m, b)
}
func (m *ProtocolInfo_TagExtractionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolInfo_TagExtractionResult.Marshal(b, m, deterministic)
}
func (m *ProtocolInfo_TagExtractionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolInfo_TagExtractionResult.Merge(m, src)
}
func (m *ProtocolInfo_TagExtractionResult) XXX_Size() int {
	return xxx_messageInfo_ProtocolInfo_TagExtractionResult.Size(m)
}
func (m *ProtocolInfo_TagExtractionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolInfo_TagExtractionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolInfo_TagExtractionResult proto.InternalMessageInfo

func (m *ProtocolInfo_TagExtractionResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ProtocolInfo_TagExtractionResult) GetErrorReport() string {
	if m != nil {
		return m.ErrorReport
	}
	return ""
}

type ListProtocolsResponse struct {
	Protocols            []*ProtocolInfo `protobuf:"bytes,1,rep,name=protocols,proto3" json:"protocols,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListProtocolsResponse) Reset()         { *m = ListProtocolsResponse{} }
func (m *ListProtocolsResponse) String() string { return proto.CompactTextString(m) }
func (*ListProtocolsResponse) ProtoMessage()    {}
func (*ListProtocolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{7}
}

func (m *ListProtocolsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProtocolsResponse.Unmarshal(m, b)
}
func (m *ListProtocolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProtocolsResponse.Marshal(b, m, deterministic)
}
func (m *ListProtocolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProtocolsResponse.Merge(m, src)
}
func (m *ListProtocolsResponse) XXX_Size() int {
	return xxx_messageInfo_ListProtocolsResponse.Size(m)
}
func (m *ListProtocolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProtocolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProtocolsResponse proto.InternalMessageInfo

func (m *ListProtocolsResponse) GetProtocols() []*ProtocolInfo {
	if m != nil {
		return m.Protocols
	}
	return nil
}

type WaitForFinishedRequest struct {
	// Only consider a specific protocol run.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Control what to wait for.
	//
	// Specifying NOTIFY_BEFORE_TERMINATION allows a caller to be notified the script will be ended _soon_,
	// and do final work to end cleanly.
	//
	// Since 1.11
	State WaitForFinishedRequest_NotificationState `protobuf:"varint,2,opt,name=state,proto3,enum=ont.rpc.protocol.WaitForFinishedRequest_NotificationState" json:"state,omitempty"`
	// Timeout to wait for finished, if the timeout expires before the protocol is complete (in the state requested)
	// then the response returns.
	//
	// By default the timeout will wait forever.
	//
	// Since 1.15
	Timeout              float32  `protobuf:"fixed32,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitForFinishedRequest) Reset()         { *m = WaitForFinishedRequest{} }
func (m *WaitForFinishedRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForFinishedRequest) ProtoMessage()    {}
func (*WaitForFinishedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{8}
}

func (m *WaitForFinishedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForFinishedRequest.Unmarshal(m, b)
}
func (m *WaitForFinishedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForFinishedRequest.Marshal(b, m, deterministic)
}
func (m *WaitForFinishedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForFinishedRequest.Merge(m, src)
}
func (m *WaitForFinishedRequest) XXX_Size() int {
	return xxx_messageInfo_WaitForFinishedRequest.Size(m)
}
func (m *WaitForFinishedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForFinishedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForFinishedRequest proto.InternalMessageInfo

func (m *WaitForFinishedRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *WaitForFinishedRequest) GetState() WaitForFinishedRequest_NotificationState {
	if m != nil {
		return m.State
	}
	return WaitForFinishedRequest_NOTIFY_ON_TERMINATION
}

func (m *WaitForFinishedRequest) GetTimeout() float32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type GetRunInfoRequest struct {
	// The protocol run to get information about.
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRunInfoRequest) Reset()         { *m = GetRunInfoRequest{} }
func (m *GetRunInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetRunInfoRequest) ProtoMessage()    {}
func (*GetRunInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{9}
}

func (m *GetRunInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRunInfoRequest.Unmarshal(m, b)
}
func (m *GetRunInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRunInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetRunInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRunInfoRequest.Merge(m, src)
}
func (m *GetRunInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetRunInfoRequest.Size(m)
}
func (m *GetRunInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRunInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRunInfoRequest proto.InternalMessageInfo

func (m *GetRunInfoRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type Epi2MeWorkflowReference struct {
	// The unique identifier for a workflow ( unique to a specific instance of epi2me )
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL that links to the workflow report. Syntax for a local workflow: file:// otherwise: http(s)://
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Epi2MeWorkflowReference) Reset()         { *m = Epi2MeWorkflowReference{} }
func (m *Epi2MeWorkflowReference) String() string { return proto.CompactTextString(m) }
func (*Epi2MeWorkflowReference) ProtoMessage()    {}
func (*Epi2MeWorkflowReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{10}
}

func (m *Epi2MeWorkflowReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Epi2MeWorkflowReference.Unmarshal(m, b)
}
func (m *Epi2MeWorkflowReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Epi2MeWorkflowReference.Marshal(b, m, deterministic)
}
func (m *Epi2MeWorkflowReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epi2MeWorkflowReference.Merge(m, src)
}
func (m *Epi2MeWorkflowReference) XXX_Size() int {
	return xxx_messageInfo_Epi2MeWorkflowReference.Size(m)
}
func (m *Epi2MeWorkflowReference) XXX_DiscardUnknown() {
	xxx_messageInfo_Epi2MeWorkflowReference.DiscardUnknown(m)
}

var xxx_messageInfo_Epi2MeWorkflowReference proto.InternalMessageInfo

func (m *Epi2MeWorkflowReference) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Epi2MeWorkflowReference) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ProtocolRunInfo struct {
	// The unique identifier assigned to this run.
	//
	// This is guaranteed to be made of ASCII characters, and at most 40 characters. It is globally
	// unique across all protocols runs on all MinKNOW instances.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The identifier of the protocol, as passed to start_protocol().
	ProtocolId string `protobuf:"bytes,2,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// The arguments passed to start_protocol().
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Output location for protocol data (eg. reads).
	//
	// Since 1.16.
	OutputPath string `protobuf:"bytes,11,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	// Indicates the current state of the protocol run.
	State ProtocolState `protobuf:"varint,4,opt,name=state,proto3,enum=ont.rpc.protocol.ProtocolState" json:"state,omitempty"`
	// When the protocol was started (UTC).
	StartTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// When the protocol script terminated (UTC).
	//
	// Unset if the protocol script is still running.
	//
	// Note that the protocol may still run until final acquisiton completes.
	ScriptEndTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=script_end_time,json=scriptEndTime,proto3" json:"script_end_time,omitempty"`
	// When the protocol terminated (UTC), indicating both the
	// protocol script and the final acquisition were completed.
	//
	// Unset if the protocol is still running.
	EndTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// A list of acquisition periods started whilst this protocol was running.
	//
	AcquisitionRunIds []string `protobuf:"bytes,7,rep,name=acquisition_run_ids,json=acquisitionRunIds,proto3" json:"acquisition_run_ids,omitempty"`
	// User specified information associated with the protocol at start time.
	//
	// Since 1.11.
	UserInfo *ProtocolRunUserInfo `protobuf:"bytes,8,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	// List of workflows from epi2me associated with this protocol
	//
	// Since 1.15.
	Epi2MeWorkflows []*Epi2MeWorkflowReference `protobuf:"bytes,10,rep,name=epi2me_workflows,json=epi2meWorkflows,proto3" json:"epi2me_workflows,omitempty"`
	// Information about the device a protocol was started with
	//
	// Since 3.4
	Device *device.GetDeviceInfoResponse `protobuf:"bytes,12,opt,name=device,proto3" json:"device,omitempty"`
	// Information about the flow cell a protocol was started with
	//
	// Since 3.4
	FlowCell             *device.GetFlowCellInfoResponse `protobuf:"bytes,13,opt,name=flow_cell,json=flowCell,proto3" json:"flow_cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ProtocolRunInfo) Reset()         { *m = ProtocolRunInfo{} }
func (m *ProtocolRunInfo) String() string { return proto.CompactTextString(m) }
func (*ProtocolRunInfo) ProtoMessage()    {}
func (*ProtocolRunInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{11}
}

func (m *ProtocolRunInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolRunInfo.Unmarshal(m, b)
}
func (m *ProtocolRunInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolRunInfo.Marshal(b, m, deterministic)
}
func (m *ProtocolRunInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolRunInfo.Merge(m, src)
}
func (m *ProtocolRunInfo) XXX_Size() int {
	return xxx_messageInfo_ProtocolRunInfo.Size(m)
}
func (m *ProtocolRunInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolRunInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolRunInfo proto.InternalMessageInfo

func (m *ProtocolRunInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ProtocolRunInfo) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

func (m *ProtocolRunInfo) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ProtocolRunInfo) GetOutputPath() string {
	if m != nil {
		return m.OutputPath
	}
	return ""
}

func (m *ProtocolRunInfo) GetState() ProtocolState {
	if m != nil {
		return m.State
	}
	return ProtocolState_PROTOCOL_RUNNING
}

func (m *ProtocolRunInfo) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ProtocolRunInfo) GetScriptEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.ScriptEndTime
	}
	return nil
}

func (m *ProtocolRunInfo) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *ProtocolRunInfo) GetAcquisitionRunIds() []string {
	if m != nil {
		return m.AcquisitionRunIds
	}
	return nil
}

func (m *ProtocolRunInfo) GetUserInfo() *ProtocolRunUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *ProtocolRunInfo) GetEpi2MeWorkflows() []*Epi2MeWorkflowReference {
	if m != nil {
		return m.Epi2MeWorkflows
	}
	return nil
}

func (m *ProtocolRunInfo) GetDevice() *device.GetDeviceInfoResponse {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *ProtocolRunInfo) GetFlowCell() *device.GetFlowCellInfoResponse {
	if m != nil {
		return m.FlowCell
	}
	return nil
}

type ListProtocolRunsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProtocolRunsRequest) Reset()         { *m = ListProtocolRunsRequest{} }
func (m *ListProtocolRunsRequest) String() string { return proto.CompactTextString(m) }
func (*ListProtocolRunsRequest) ProtoMessage()    {}
func (*ListProtocolRunsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{12}
}

func (m *ListProtocolRunsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProtocolRunsRequest.Unmarshal(m, b)
}
func (m *ListProtocolRunsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProtocolRunsRequest.Marshal(b, m, deterministic)
}
func (m *ListProtocolRunsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProtocolRunsRequest.Merge(m, src)
}
func (m *ListProtocolRunsRequest) XXX_Size() int {
	return xxx_messageInfo_ListProtocolRunsRequest.Size(m)
}
func (m *ListProtocolRunsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProtocolRunsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProtocolRunsRequest proto.InternalMessageInfo

type ListProtocolRunsResponse struct {
	RunIds               []string `protobuf:"bytes,1,rep,name=run_ids,json=runIds,proto3" json:"run_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProtocolRunsResponse) Reset()         { *m = ListProtocolRunsResponse{} }
func (m *ListProtocolRunsResponse) String() string { return proto.CompactTextString(m) }
func (*ListProtocolRunsResponse) ProtoMessage()    {}
func (*ListProtocolRunsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{13}
}

func (m *ListProtocolRunsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProtocolRunsResponse.Unmarshal(m, b)
}
func (m *ListProtocolRunsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProtocolRunsResponse.Marshal(b, m, deterministic)
}
func (m *ListProtocolRunsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProtocolRunsResponse.Merge(m, src)
}
func (m *ListProtocolRunsResponse) XXX_Size() int {
	return xxx_messageInfo_ListProtocolRunsResponse.Size(m)
}
func (m *ListProtocolRunsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProtocolRunsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProtocolRunsResponse proto.InternalMessageInfo

func (m *ListProtocolRunsResponse) GetRunIds() []string {
	if m != nil {
		return m.RunIds
	}
	return nil
}

type GetCurrentProtocolRunRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentProtocolRunRequest) Reset()         { *m = GetCurrentProtocolRunRequest{} }
func (m *GetCurrentProtocolRunRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentProtocolRunRequest) ProtoMessage()    {}
func (*GetCurrentProtocolRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{14}
}

func (m *GetCurrentProtocolRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCurrentProtocolRunRequest.Unmarshal(m, b)
}
func (m *GetCurrentProtocolRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCurrentProtocolRunRequest.Marshal(b, m, deterministic)
}
func (m *GetCurrentProtocolRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentProtocolRunRequest.Merge(m, src)
}
func (m *GetCurrentProtocolRunRequest) XXX_Size() int {
	return xxx_messageInfo_GetCurrentProtocolRunRequest.Size(m)
}
func (m *GetCurrentProtocolRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentProtocolRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentProtocolRunRequest proto.InternalMessageInfo

type GetCurrentProtocolRunResponse struct {
	RunInfo              *ProtocolRunInfo `protobuf:"bytes,3,opt,name=run_info,json=runInfo,proto3" json:"run_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetCurrentProtocolRunResponse) Reset()         { *m = GetCurrentProtocolRunResponse{} }
func (m *GetCurrentProtocolRunResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentProtocolRunResponse) ProtoMessage()    {}
func (*GetCurrentProtocolRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{15}
}

func (m *GetCurrentProtocolRunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCurrentProtocolRunResponse.Unmarshal(m, b)
}
func (m *GetCurrentProtocolRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCurrentProtocolRunResponse.Marshal(b, m, deterministic)
}
func (m *GetCurrentProtocolRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentProtocolRunResponse.Merge(m, src)
}
func (m *GetCurrentProtocolRunResponse) XXX_Size() int {
	return xxx_messageInfo_GetCurrentProtocolRunResponse.Size(m)
}
func (m *GetCurrentProtocolRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentProtocolRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentProtocolRunResponse proto.InternalMessageInfo

func (m *GetCurrentProtocolRunResponse) GetRunInfo() *ProtocolRunInfo {
	if m != nil {
		return m.RunInfo
	}
	return nil
}

type WatchCurrentProtocolRunRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchCurrentProtocolRunRequest) Reset()         { *m = WatchCurrentProtocolRunRequest{} }
func (m *WatchCurrentProtocolRunRequest) String() string { return proto.CompactTextString(m) }
func (*WatchCurrentProtocolRunRequest) ProtoMessage()    {}
func (*WatchCurrentProtocolRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{16}
}

func (m *WatchCurrentProtocolRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchCurrentProtocolRunRequest.Unmarshal(m, b)
}
func (m *WatchCurrentProtocolRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchCurrentProtocolRunRequest.Marshal(b, m, deterministic)
}
func (m *WatchCurrentProtocolRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchCurrentProtocolRunRequest.Merge(m, src)
}
func (m *WatchCurrentProtocolRunRequest) XXX_Size() int {
	return xxx_messageInfo_WatchCurrentProtocolRunRequest.Size(m)
}
func (m *WatchCurrentProtocolRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchCurrentProtocolRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchCurrentProtocolRunRequest proto.InternalMessageInfo

type GetContextInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetContextInfoRequest) Reset()         { *m = GetContextInfoRequest{} }
func (m *GetContextInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetContextInfoRequest) ProtoMessage()    {}
func (*GetContextInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{17}
}

func (m *GetContextInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetContextInfoRequest.Unmarshal(m, b)
}
func (m *GetContextInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetContextInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetContextInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContextInfoRequest.Merge(m, src)
}
func (m *GetContextInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetContextInfoRequest.Size(m)
}
func (m *GetContextInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContextInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetContextInfoRequest proto.InternalMessageInfo

type GetContextInfoResponse struct {
	ContextInfo          map[string]string `protobuf:"bytes,1,rep,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetContextInfoResponse) Reset()         { *m = GetContextInfoResponse{} }
func (m *GetContextInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetContextInfoResponse) ProtoMessage()    {}
func (*GetContextInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{18}
}

func (m *GetContextInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetContextInfoResponse.Unmarshal(m, b)
}
func (m *GetContextInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetContextInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetContextInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContextInfoResponse.Merge(m, src)
}
func (m *GetContextInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetContextInfoResponse.Size(m)
}
func (m *GetContextInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContextInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetContextInfoResponse proto.InternalMessageInfo

func (m *GetContextInfoResponse) GetContextInfo() map[string]string {
	if m != nil {
		return m.ContextInfo
	}
	return nil
}

type SetContextInfoRequest struct {
	ContextInfo          map[string]string `protobuf:"bytes,1,rep,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetContextInfoRequest) Reset()         { *m = SetContextInfoRequest{} }
func (m *SetContextInfoRequest) String() string { return proto.CompactTextString(m) }
func (*SetContextInfoRequest) ProtoMessage()    {}
func (*SetContextInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{19}
}

func (m *SetContextInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetContextInfoRequest.Unmarshal(m, b)
}
func (m *SetContextInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetContextInfoRequest.Marshal(b, m, deterministic)
}
func (m *SetContextInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetContextInfoRequest.Merge(m, src)
}
func (m *SetContextInfoRequest) XXX_Size() int {
	return xxx_messageInfo_SetContextInfoRequest.Size(m)
}
func (m *SetContextInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetContextInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetContextInfoRequest proto.InternalMessageInfo

func (m *SetContextInfoRequest) GetContextInfo() map[string]string {
	if m != nil {
		return m.ContextInfo
	}
	return nil
}

type SetContextInfoResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetContextInfoResponse) Reset()         { *m = SetContextInfoResponse{} }
func (m *SetContextInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SetContextInfoResponse) ProtoMessage()    {}
func (*SetContextInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{20}
}

func (m *SetContextInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetContextInfoResponse.Unmarshal(m, b)
}
func (m *SetContextInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetContextInfoResponse.Marshal(b, m, deterministic)
}
func (m *SetContextInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetContextInfoResponse.Merge(m, src)
}
func (m *SetContextInfoResponse) XXX_Size() int {
	return xxx_messageInfo_SetContextInfoResponse.Size(m)
}
func (m *SetContextInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetContextInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetContextInfoResponse proto.InternalMessageInfo

type GetSampleIdRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSampleIdRequest) Reset()         { *m = GetSampleIdRequest{} }
func (m *GetSampleIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetSampleIdRequest) ProtoMessage()    {}
func (*GetSampleIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{21}
}

func (m *GetSampleIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSampleIdRequest.Unmarshal(m, b)
}
func (m *GetSampleIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSampleIdRequest.Marshal(b, m, deterministic)
}
func (m *GetSampleIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSampleIdRequest.Merge(m, src)
}
func (m *GetSampleIdRequest) XXX_Size() int {
	return xxx_messageInfo_GetSampleIdRequest.Size(m)
}
func (m *GetSampleIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSampleIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSampleIdRequest proto.InternalMessageInfo

type GetSampleIdResponse struct {
	SampleId             string   `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSampleIdResponse) Reset()         { *m = GetSampleIdResponse{} }
func (m *GetSampleIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetSampleIdResponse) ProtoMessage()    {}
func (*GetSampleIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{22}
}

func (m *GetSampleIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSampleIdResponse.Unmarshal(m, b)
}
func (m *GetSampleIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSampleIdResponse.Marshal(b, m, deterministic)
}
func (m *GetSampleIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSampleIdResponse.Merge(m, src)
}
func (m *GetSampleIdResponse) XXX_Size() int {
	return xxx_messageInfo_GetSampleIdResponse.Size(m)
}
func (m *GetSampleIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSampleIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSampleIdResponse proto.InternalMessageInfo

func (m *GetSampleIdResponse) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

type SetSampleIdRequest struct {
	SampleId             string   `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetSampleIdRequest) Reset()         { *m = SetSampleIdRequest{} }
func (m *SetSampleIdRequest) String() string { return proto.CompactTextString(m) }
func (*SetSampleIdRequest) ProtoMessage()    {}
func (*SetSampleIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{23}
}

func (m *SetSampleIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetSampleIdRequest.Unmarshal(m, b)
}
func (m *SetSampleIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetSampleIdRequest.Marshal(b, m, deterministic)
}
func (m *SetSampleIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSampleIdRequest.Merge(m, src)
}
func (m *SetSampleIdRequest) XXX_Size() int {
	return xxx_messageInfo_SetSampleIdRequest.Size(m)
}
func (m *SetSampleIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSampleIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetSampleIdRequest proto.InternalMessageInfo

func (m *SetSampleIdRequest) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

type SetSampleIdResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetSampleIdResponse) Reset()         { *m = SetSampleIdResponse{} }
func (m *SetSampleIdResponse) String() string { return proto.CompactTextString(m) }
func (*SetSampleIdResponse) ProtoMessage()    {}
func (*SetSampleIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{24}
}

func (m *SetSampleIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetSampleIdResponse.Unmarshal(m, b)
}
func (m *SetSampleIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetSampleIdResponse.Marshal(b, m, deterministic)
}
func (m *SetSampleIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSampleIdResponse.Merge(m, src)
}
func (m *SetSampleIdResponse) XXX_Size() int {
	return xxx_messageInfo_SetSampleIdResponse.Size(m)
}
func (m *SetSampleIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSampleIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetSampleIdResponse proto.InternalMessageInfo

type GetProtocolPurposeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProtocolPurposeRequest) Reset()         { *m = GetProtocolPurposeRequest{} }
func (m *GetProtocolPurposeRequest) String() string { return proto.CompactTextString(m) }
func (*GetProtocolPurposeRequest) ProtoMessage()    {}
func (*GetProtocolPurposeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{25}
}

func (m *GetProtocolPurposeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProtocolPurposeRequest.Unmarshal(m, b)
}
func (m *GetProtocolPurposeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProtocolPurposeRequest.Marshal(b, m, deterministic)
}
func (m *GetProtocolPurposeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProtocolPurposeRequest.Merge(m, src)
}
func (m *GetProtocolPurposeRequest) XXX_Size() int {
	return xxx_messageInfo_GetProtocolPurposeRequest.Size(m)
}
func (m *GetProtocolPurposeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProtocolPurposeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProtocolPurposeRequest proto.InternalMessageInfo

type GetProtocolPurposeResponse struct {
	Purpose              string   `protobuf:"bytes,1,opt,name=purpose,proto3" json:"purpose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProtocolPurposeResponse) Reset()         { *m = GetProtocolPurposeResponse{} }
func (m *GetProtocolPurposeResponse) String() string { return proto.CompactTextString(m) }
func (*GetProtocolPurposeResponse) ProtoMessage()    {}
func (*GetProtocolPurposeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{26}
}

func (m *GetProtocolPurposeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProtocolPurposeResponse.Unmarshal(m, b)
}
func (m *GetProtocolPurposeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProtocolPurposeResponse.Marshal(b, m, deterministic)
}
func (m *GetProtocolPurposeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProtocolPurposeResponse.Merge(m, src)
}
func (m *GetProtocolPurposeResponse) XXX_Size() int {
	return xxx_messageInfo_GetProtocolPurposeResponse.Size(m)
}
func (m *GetProtocolPurposeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProtocolPurposeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProtocolPurposeResponse proto.InternalMessageInfo

func (m *GetProtocolPurposeResponse) GetPurpose() string {
	if m != nil {
		return m.Purpose
	}
	return ""
}

type SetProtocolPurposeRequest struct {
	Purpose              string   `protobuf:"bytes,1,opt,name=purpose,proto3" json:"purpose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetProtocolPurposeRequest) Reset()         { *m = SetProtocolPurposeRequest{} }
func (m *SetProtocolPurposeRequest) String() string { return proto.CompactTextString(m) }
func (*SetProtocolPurposeRequest) ProtoMessage()    {}
func (*SetProtocolPurposeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{27}
}

func (m *SetProtocolPurposeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetProtocolPurposeRequest.Unmarshal(m, b)
}
func (m *SetProtocolPurposeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetProtocolPurposeRequest.Marshal(b, m, deterministic)
}
func (m *SetProtocolPurposeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetProtocolPurposeRequest.Merge(m, src)
}
func (m *SetProtocolPurposeRequest) XXX_Size() int {
	return xxx_messageInfo_SetProtocolPurposeRequest.Size(m)
}
func (m *SetProtocolPurposeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetProtocolPurposeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetProtocolPurposeRequest proto.InternalMessageInfo

func (m *SetProtocolPurposeRequest) GetPurpose() string {
	if m != nil {
		return m.Purpose
	}
	return ""
}

type SetProtocolPurposeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetProtocolPurposeResponse) Reset()         { *m = SetProtocolPurposeResponse{} }
func (m *SetProtocolPurposeResponse) String() string { return proto.CompactTextString(m) }
func (*SetProtocolPurposeResponse) ProtoMessage()    {}
func (*SetProtocolPurposeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{28}
}

func (m *SetProtocolPurposeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetProtocolPurposeResponse.Unmarshal(m, b)
}
func (m *SetProtocolPurposeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetProtocolPurposeResponse.Marshal(b, m, deterministic)
}
func (m *SetProtocolPurposeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetProtocolPurposeResponse.Merge(m, src)
}
func (m *SetProtocolPurposeResponse) XXX_Size() int {
	return xxx_messageInfo_SetProtocolPurposeResponse.Size(m)
}
func (m *SetProtocolPurposeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetProtocolPurposeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetProtocolPurposeResponse proto.InternalMessageInfo

type AddEpi2MeWorkflowRequest struct {
	RunId                string                   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Epi2MeWorkflow       *Epi2MeWorkflowReference `protobuf:"bytes,2,opt,name=epi2me_workflow,json=epi2meWorkflow,proto3" json:"epi2me_workflow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AddEpi2MeWorkflowRequest) Reset()         { *m = AddEpi2MeWorkflowRequest{} }
func (m *AddEpi2MeWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*AddEpi2MeWorkflowRequest) ProtoMessage()    {}
func (*AddEpi2MeWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{29}
}

func (m *AddEpi2MeWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddEpi2MeWorkflowRequest.Unmarshal(m, b)
}
func (m *AddEpi2MeWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddEpi2MeWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *AddEpi2MeWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEpi2MeWorkflowRequest.Merge(m, src)
}
func (m *AddEpi2MeWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_AddEpi2MeWorkflowRequest.Size(m)
}
func (m *AddEpi2MeWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEpi2MeWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddEpi2MeWorkflowRequest proto.InternalMessageInfo

func (m *AddEpi2MeWorkflowRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *AddEpi2MeWorkflowRequest) GetEpi2MeWorkflow() *Epi2MeWorkflowReference {
	if m != nil {
		return m.Epi2MeWorkflow
	}
	return nil
}

type AddEpi2MeWorkflowResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddEpi2MeWorkflowResponse) Reset()         { *m = AddEpi2MeWorkflowResponse{} }
func (m *AddEpi2MeWorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*AddEpi2MeWorkflowResponse) ProtoMessage()    {}
func (*AddEpi2MeWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{30}
}

func (m *AddEpi2MeWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddEpi2MeWorkflowResponse.Unmarshal(m, b)
}
func (m *AddEpi2MeWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddEpi2MeWorkflowResponse.Marshal(b, m, deterministic)
}
func (m *AddEpi2MeWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEpi2MeWorkflowResponse.Merge(m, src)
}
func (m *AddEpi2MeWorkflowResponse) XXX_Size() int {
	return xxx_messageInfo_AddEpi2MeWorkflowResponse.Size(m)
}
func (m *AddEpi2MeWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEpi2MeWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddEpi2MeWorkflowResponse proto.InternalMessageInfo

type ListProtocolGroupIdsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProtocolGroupIdsRequest) Reset()         { *m = ListProtocolGroupIdsRequest{} }
func (m *ListProtocolGroupIdsRequest) String() string { return proto.CompactTextString(m) }
func (*ListProtocolGroupIdsRequest) ProtoMessage()    {}
func (*ListProtocolGroupIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{31}
}

func (m *ListProtocolGroupIdsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProtocolGroupIdsRequest.Unmarshal(m, b)
}
func (m *ListProtocolGroupIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProtocolGroupIdsRequest.Marshal(b, m, deterministic)
}
func (m *ListProtocolGroupIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProtocolGroupIdsRequest.Merge(m, src)
}
func (m *ListProtocolGroupIdsRequest) XXX_Size() int {
	return xxx_messageInfo_ListProtocolGroupIdsRequest.Size(m)
}
func (m *ListProtocolGroupIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProtocolGroupIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProtocolGroupIdsRequest proto.InternalMessageInfo

type ListProtocolGroupIdsResponse struct {
	// A list of protocol group ids used in any
	// protocol started on this instance of minknow.
	//
	ProtocolGroupIds     []string `protobuf:"bytes,1,rep,name=protocol_group_ids,json=protocolGroupIds,proto3" json:"protocol_group_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProtocolGroupIdsResponse) Reset()         { *m = ListProtocolGroupIdsResponse{} }
func (m *ListProtocolGroupIdsResponse) String() string { return proto.CompactTextString(m) }
func (*ListProtocolGroupIdsResponse) ProtoMessage()    {}
func (*ListProtocolGroupIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81e1b8e2e4a8e8, []int{32}
}

func (m *ListProtocolGroupIdsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProtocolGroupIdsResponse.Unmarshal(m, b)
}
func (m *ListProtocolGroupIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProtocolGroupIdsResponse.Marshal(b, m, deterministic)
}
func (m *ListProtocolGroupIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProtocolGroupIdsResponse.Merge(m, src)
}
func (m *ListProtocolGroupIdsResponse) XXX_Size() int {
	return xxx_messageInfo_ListProtocolGroupIdsResponse.Size(m)
}
func (m *ListProtocolGroupIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProtocolGroupIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProtocolGroupIdsResponse proto.InternalMessageInfo

func (m *ListProtocolGroupIdsResponse) GetProtocolGroupIds() []string {
	if m != nil {
		return m.ProtocolGroupIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("ont.rpc.protocol.ProtocolState", ProtocolState_name, ProtocolState_value)
	proto.RegisterEnum("ont.rpc.protocol.WaitForFinishedRequest_NotificationState", WaitForFinishedRequest_NotificationState_name, WaitForFinishedRequest_NotificationState_value)
	proto.RegisterType((*ProtocolRunUserInfo)(nil), "ont.rpc.protocol.ProtocolRunUserInfo")
	proto.RegisterType((*StartProtocolRequest)(nil), "ont.rpc.protocol.StartProtocolRequest")
	proto.RegisterType((*StartProtocolResponse)(nil), "ont.rpc.protocol.StartProtocolResponse")
	proto.RegisterType((*StopProtocolRequest)(nil), "ont.rpc.protocol.StopProtocolRequest")
	proto.RegisterType((*StopProtocolResponse)(nil), "ont.rpc.protocol.StopProtocolResponse")
	proto.RegisterType((*ListProtocolsRequest)(nil), "ont.rpc.protocol.ListProtocolsRequest")
	proto.RegisterType((*ProtocolInfo)(nil), "ont.rpc.protocol.ProtocolInfo")
	proto.RegisterMapType((map[string]*ProtocolInfo_TagValue)(nil), "ont.rpc.protocol.ProtocolInfo.TagsEntry")
	proto.RegisterType((*ProtocolInfo_TagValue)(nil), "ont.rpc.protocol.ProtocolInfo.TagValue")
	proto.RegisterType((*ProtocolInfo_TagExtractionResult)(nil), "ont.rpc.protocol.ProtocolInfo.TagExtractionResult")
	proto.RegisterType((*ListProtocolsResponse)(nil), "ont.rpc.protocol.ListProtocolsResponse")
	proto.RegisterType((*WaitForFinishedRequest)(nil), "ont.rpc.protocol.WaitForFinishedRequest")
	proto.RegisterType((*GetRunInfoRequest)(nil), "ont.rpc.protocol.GetRunInfoRequest")
	proto.RegisterType((*Epi2MeWorkflowReference)(nil), "ont.rpc.protocol.Epi2meWorkflowReference")
	proto.RegisterType((*ProtocolRunInfo)(nil), "ont.rpc.protocol.ProtocolRunInfo")
	proto.RegisterType((*ListProtocolRunsRequest)(nil), "ont.rpc.protocol.ListProtocolRunsRequest")
	proto.RegisterType((*ListProtocolRunsResponse)(nil), "ont.rpc.protocol.ListProtocolRunsResponse")
	proto.RegisterType((*GetCurrentProtocolRunRequest)(nil), "ont.rpc.protocol.GetCurrentProtocolRunRequest")
	proto.RegisterType((*GetCurrentProtocolRunResponse)(nil), "ont.rpc.protocol.GetCurrentProtocolRunResponse")
	proto.RegisterType((*WatchCurrentProtocolRunRequest)(nil), "ont.rpc.protocol.WatchCurrentProtocolRunRequest")
	proto.RegisterType((*GetContextInfoRequest)(nil), "ont.rpc.protocol.GetContextInfoRequest")
	proto.RegisterType((*GetContextInfoResponse)(nil), "ont.rpc.protocol.GetContextInfoResponse")
	proto.RegisterMapType((map[string]string)(nil), "ont.rpc.protocol.GetContextInfoResponse.ContextInfoEntry")
	proto.RegisterType((*SetContextInfoRequest)(nil), "ont.rpc.protocol.SetContextInfoRequest")
	proto.RegisterMapType((map[string]string)(nil), "ont.rpc.protocol.SetContextInfoRequest.ContextInfoEntry")
	proto.RegisterType((*SetContextInfoResponse)(nil), "ont.rpc.protocol.SetContextInfoResponse")
	proto.RegisterType((*GetSampleIdRequest)(nil), "ont.rpc.protocol.GetSampleIdRequest")
	proto.RegisterType((*GetSampleIdResponse)(nil), "ont.rpc.protocol.GetSampleIdResponse")
	proto.RegisterType((*SetSampleIdRequest)(nil), "ont.rpc.protocol.SetSampleIdRequest")
	proto.RegisterType((*SetSampleIdResponse)(nil), "ont.rpc.protocol.SetSampleIdResponse")
	proto.RegisterType((*GetProtocolPurposeRequest)(nil), "ont.rpc.protocol.GetProtocolPurposeRequest")
	proto.RegisterType((*GetProtocolPurposeResponse)(nil), "ont.rpc.protocol.GetProtocolPurposeResponse")
	proto.RegisterType((*SetProtocolPurposeRequest)(nil), "ont.rpc.protocol.SetProtocolPurposeRequest")
	proto.RegisterType((*SetProtocolPurposeResponse)(nil), "ont.rpc.protocol.SetProtocolPurposeResponse")
	proto.RegisterType((*AddEpi2MeWorkflowRequest)(nil), "ont.rpc.protocol.AddEpi2meWorkflowRequest")
	proto.RegisterType((*AddEpi2MeWorkflowResponse)(nil), "ont.rpc.protocol.AddEpi2meWorkflowResponse")
	proto.RegisterType((*ListProtocolGroupIdsRequest)(nil), "ont.rpc.protocol.ListProtocolGroupIdsRequest")
	proto.RegisterType((*ListProtocolGroupIdsResponse)(nil), "ont.rpc.protocol.ListProtocolGroupIdsResponse")
}

func init() { proto.RegisterFile("minknow/rpc/protocol.proto", fileDescriptor_9c81e1b8e2e4a8e8) }

var fileDescriptor_9c81e1b8e2e4a8e8 = []byte{
	// 1936 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5b, 0x73, 0xdb, 0xc6,
	0x15, 0x16, 0xa9, 0x1b, 0x79, 0xa8, 0x0b, 0xb5, 0xba, 0x51, 0xb4, 0x6e, 0x86, 0xed, 0x58, 0xb5,
	0x13, 0x3a, 0x65, 0xc6, 0x9d, 0x38, 0x4d, 0x3a, 0xa3, 0x0b, 0x24, 0x71, 0x46, 0x26, 0xd9, 0x05,
	0x15, 0xc5, 0x69, 0x3b, 0x08, 0x04, 0x2c, 0x65, 0xd4, 0x14, 0x00, 0xef, 0x2e, 0xa2, 0xb8, 0xbf,
	0x20, 0xd3, 0xb7, 0x76, 0xfa, 0xd4, 0xc7, 0xfe, 0x86, 0xb6, 0x0f, 0x7d, 0xec, 0xbf, 0xe9, 0xbf,
	0xe8, 0xec, 0x62, 0x01, 0xde, 0x40, 0x91, 0xed, 0x4c, 0xde, 0x16, 0x67, 0xcf, 0xe5, 0xdb, 0x73,
	0xce, 0x9e, 0x73, 0x16, 0x50, 0xbe, 0x75, 0xbd, 0x77, 0x9e, 0x7f, 0xf7, 0x82, 0x06, 0xf6, 0x8b,
	0x80, 0xfa, 0xdc, 0xb7, 0xfd, 0x4e, 0x45, 0x2e, 0x50, 0xd1, 0xf7, 0x78, 0x85, 0x06, 0x76, 0x25,
	0xa6, 0x97, 0x77, 0x7a, 0xb9, 0x2d, 0xfb, 0x7d, 0xe8, 0x32, 0x97, 0xbb, 0xbe, 0x17, 0x71, 0x94,
	0x4b, 0xbd, 0xdb, 0x0e, 0xf9, 0xde, 0xb5, 0x89, 0xda, 0xe9, 0x13, 0xa4, 0x81, 0x6d, 0xfa, 0x81,
	0x90, 0x63, 0x6a, 0x7b, 0xef, 0xc6, 0xf7, 0x6f, 0x3a, 0x24, 0x02, 0x70, 0x1d, 0xb6, 0x5f, 0x70,
	0xf7, 0x96, 0x30, 0x6e, 0xdd, 0x06, 0x8a, 0x61, 0x77, 0x90, 0xe1, 0x8e, 0x5a, 0x41, 0x40, 0xa8,
	0x52, 0xa0, 0xfd, 0x35, 0x03, 0xab, 0x4d, 0x85, 0x12, 0x87, 0xde, 0x25, 0x23, 0xb4, 0xe6, 0xb5,
	0x7d, 0x74, 0x0e, 0x2b, 0x31, 0x78, 0xf3, 0x86, 0xfa, 0x61, 0x60, 0xba, 0x4e, 0x29, 0xb3, 0x9f,
	0x39, 0x28, 0x54, 0xb7, 0x2b, 0x91, 0xce, 0x4a, 0xac, 0xb3, 0x62, 0x70, 0xea, 0x7a, 0x37, 0x5f,
	0x5b, 0x9d, 0x90, 0xe0, 0xe5, 0x58, 0xec, 0x4c, 0x48, 0xd5, 0x1c, 0xf4, 0x0a, 0xf2, 0xcc, 0xba,
	0x0d, 0x3a, 0x44, 0x68, 0xc8, 0x4e, 0xa0, 0x21, 0x17, 0xb1, 0xd7, 0x1c, 0xed, 0x2f, 0x19, 0x58,
	0x33, 0xb8, 0x45, 0x79, 0x82, 0x90, 0xbc, 0x0f, 0x09, 0xe3, 0xe8, 0x31, 0x80, 0xeb, 0x10, 0x8f,
	0xbb, 0x6d, 0x97, 0x50, 0x09, 0x2b, 0x7f, 0x34, 0xf3, 0xe3, 0x3f, 0x4a, 0x19, 0xdc, 0x43, 0x47,
	0x08, 0x66, 0x2c, 0x7a, 0xc3, 0x4a, 0xd9, 0xfd, 0xe9, 0x83, 0x3c, 0x96, 0x6b, 0x74, 0x04, 0xf9,
	0x90, 0x11, 0x6a, 0xba, 0x5e, 0xdb, 0x2f, 0x4d, 0x4b, 0x34, 0x4f, 0x2a, 0x83, 0xe1, 0xaa, 0xa4,
	0x78, 0x04, 0xe7, 0x42, 0xb5, 0xd2, 0x2a, 0xb0, 0x3e, 0x80, 0x8a, 0x05, 0xbe, 0xc7, 0x08, 0x5a,
	0x87, 0x39, 0x1a, 0x7a, 0xb1, 0xa7, 0xf2, 0x78, 0x96, 0x86, 0x5e, 0xcd, 0xd1, 0xde, 0xc3, 0xaa,
	0xc1, 0xfd, 0x60, 0xf0, 0x10, 0xdf, 0xc2, 0xaa, 0x63, 0x71, 0xcb, 0xb4, 0x6c, 0x11, 0x51, 0xd3,
	0xf7, 0x4c, 0xc6, 0xfd, 0x40, 0x8a, 0x2e, 0x55, 0x9f, 0x27, 0xa0, 0x7a, 0xb3, 0x45, 0xa8, 0x51,
	0xe2, 0x95, 0x13, 0x8b, 0x5b, 0x87, 0x52, 0x14, 0x17, 0x9d, 0x64, 0xdd, 0xf0, 0x04, 0x8f, 0xb6,
	0x21, 0x1c, 0xd7, 0x6b, 0x32, 0x42, 0xa8, 0xbd, 0x82, 0xb5, 0x0b, 0x97, 0x25, 0xc8, 0x59, 0x8c,
	0xe5, 0x21, 0x2c, 0xb4, 0x7d, 0x6a, 0x13, 0x93, 0x92, 0x8e, 0x6f, 0x45, 0xf8, 0x73, 0xb8, 0x20,
	0x69, 0x58, 0x92, 0xb4, 0x3f, 0xce, 0xc2, 0x42, 0x2c, 0x27, 0x53, 0x64, 0x77, 0x38, 0x08, 0x7d,
	0xee, 0xff, 0x12, 0x66, 0xb8, 0xa5, 0xdc, 0x5f, 0xa8, 0x1e, 0x8c, 0xf6, 0xb2, 0xd0, 0x56, 0x69,
	0x59, 0x37, 0x4c, 0xf7, 0x38, 0xfd, 0x80, 0xa5, 0x94, 0x08, 0x9e, 0x67, 0xdd, 0x12, 0x19, 0xa3,
	0x3c, 0x96, 0x6b, 0xd4, 0x86, 0x75, 0x6e, 0xdd, 0x98, 0xe4, 0x07, 0x4e, 0x95, 0xd3, 0x28, 0x61,
	0x61, 0x87, 0x97, 0x66, 0x64, 0x20, 0xab, 0xe3, 0x4d, 0xe8, 0x89, 0x28, 0x96, 0x92, 0x78, 0x95,
	0x0f, 0x13, 0xcb, 0xff, 0xc9, 0x40, 0xae, 0x65, 0x45, 0xe9, 0x88, 0x1e, 0xc1, 0x02, 0x93, 0xd9,
	0x69, 0x7e, 0x2f, 0xbe, 0xa3, 0x83, 0x9e, 0x4f, 0xe1, 0x02, 0xeb, 0xe6, 0x2c, 0xda, 0x03, 0xb8,
	0xf6, 0xfd, 0x8e, 0x62, 0x11, 0x59, 0x9e, 0x3b, 0x9f, 0xc2, 0x79, 0x41, 0x8b, 0x18, 0x76, 0x20,
	0xef, 0x7a, 0x5c, 0xed, 0x8b, 0x33, 0x4d, 0x9f, 0x4f, 0xe1, 0x9c, 0xeb, 0xf1, 0xc4, 0x88, 0xe3,
	0x87, 0xd7, 0x1d, 0xa2, 0x38, 0xc4, 0x81, 0x32, 0xc2, 0x48, 0x44, 0x8d, 0x98, 0x1e, 0x42, 0xc1,
	0xa2, 0xd4, 0xfa, 0xa0, 0x78, 0x66, 0x15, 0x10, 0x90, 0xc4, 0x44, 0x8f, 0x7f, 0xfd, 0x7b, 0x62,
	0xc7, 0x96, 0xe6, 0x62, 0xb0, 0x11, 0x55, 0x32, 0x1d, 0x15, 0x20, 0x2f, 0xdc, 0x28, 0x39, 0xca,
	0x18, 0x56, 0x53, 0xfc, 0x82, 0x4a, 0x30, 0xcf, 0x42, 0xdb, 0x26, 0x8c, 0xa9, 0x5c, 0x88, 0x3f,
	0x45, 0xaa, 0x10, 0x4a, 0x7d, 0x6a, 0x52, 0x12, 0xf8, 0x94, 0xcb, 0xc3, 0xe6, 0x71, 0x41, 0xd2,
	0xb0, 0x24, 0x95, 0xbf, 0x83, 0x7c, 0x12, 0x4e, 0x54, 0x84, 0xe9, 0x77, 0xe4, 0x83, 0xca, 0x0f,
	0xb1, 0x44, 0x5f, 0xc1, 0x6c, 0xd7, 0x4f, 0x85, 0xea, 0xd3, 0xf1, 0x61, 0x8b, 0x0a, 0x43, 0x24,
	0xf5, 0x45, 0xf6, 0xf3, 0x8c, 0x76, 0x09, 0xeb, 0x03, 0x79, 0xac, 0xae, 0xe0, 0x97, 0x90, 0x8f,
	0xb5, 0x08, 0xe4, 0x22, 0xf3, 0x76, 0xef, 0xd7, 0x8f, 0xbb, 0x02, 0xda, 0x9f, 0xb3, 0xb0, 0x71,
	0x65, 0xb9, 0xfc, 0xd4, 0xa7, 0xa7, 0xae, 0xe7, 0xb2, 0xb7, 0xc4, 0x89, 0x6f, 0xc8, 0x83, 0xfe,
	0xbb, 0xad, 0xca, 0x4d, 0x74, 0xc3, 0x51, 0x13, 0x66, 0x19, 0xb7, 0x78, 0x74, 0xa2, 0xa5, 0xea,
	0x17, 0xc3, 0x16, 0xd3, 0xb5, 0x56, 0xea, 0xbe, 0xb8, 0x2c, 0xb6, 0x25, 0x3c, 0x6f, 0x08, 0x0d,
	0x38, 0x52, 0x24, 0xfc, 0x2f, 0x4a, 0xb9, 0x1f, 0x72, 0x99, 0x2d, 0x59, 0x1c, 0x7f, 0x6a, 0x3e,
	0xac, 0x0c, 0x49, 0xa1, 0x2d, 0x58, 0xaf, 0x37, 0x5a, 0xb5, 0xd3, 0x37, 0x66, 0xa3, 0x6e, 0xb6,
	0x74, 0xfc, 0xba, 0x56, 0x3f, 0x6c, 0xd5, 0x1a, 0xf5, 0xe2, 0x14, 0xda, 0x81, 0x2d, 0xb5, 0x75,
	0xa4, 0x9f, 0x36, 0xb0, 0xde, 0xb7, 0x9d, 0x41, 0xfb, 0xb0, 0xdd, 0x95, 0x34, 0x8e, 0x71, 0xad,
	0xd9, 0xea, 0xe3, 0xc8, 0x6a, 0xcf, 0x60, 0xe5, 0x8c, 0x70, 0x1c, 0x7a, 0xd2, 0x5b, 0xca, 0x1d,
	0x23, 0x4a, 0xdd, 0x2f, 0x61, 0x53, 0x0f, 0xdc, 0xea, 0x2d, 0xb9, 0xf2, 0xe9, 0xbb, 0x76, 0xc7,
	0xbf, 0xc3, 0xa4, 0x4d, 0x28, 0xf1, 0x6c, 0x82, 0x96, 0x20, 0xab, 0xb8, 0xa7, 0x71, 0xd6, 0x75,
	0x44, 0x5e, 0x84, 0xb4, 0xa3, 0xd2, 0x47, 0x2c, 0xb5, 0x7f, 0xcd, 0xc2, 0x72, 0x4f, 0xe5, 0x95,
	0x45, 0x26, 0xdd, 0x0e, 0xda, 0x83, 0x42, 0xd2, 0x9e, 0x54, 0x5b, 0xc9, 0x63, 0x88, 0x49, 0x35,
	0x27, 0xa9, 0xfd, 0xd3, 0x3d, 0xb5, 0x7f, 0x0f, 0x0a, 0x7e, 0xc8, 0x83, 0x90, 0x9b, 0x81, 0xc5,
	0xdf, 0x96, 0x0a, 0x91, 0x50, 0x44, 0x6a, 0x5a, 0xfc, 0x2d, 0x7a, 0x19, 0x87, 0x71, 0x46, 0x86,
	0x71, 0x6f, 0x74, 0xe2, 0xf4, 0xc5, 0xea, 0x15, 0x00, 0x13, 0xfd, 0xc0, 0x14, 0x21, 0x92, 0xd7,
	0xb2, 0x50, 0x2d, 0x0f, 0xb5, 0xb8, 0x56, 0xdc, 0x99, 0x71, 0x5e, 0x72, 0x8b, 0x6f, 0x74, 0x04,
	0xcb, 0xcc, 0xa6, 0x6e, 0xc0, 0x4d, 0xe2, 0x39, 0x91, 0x7c, 0x7e, 0xac, 0xfc, 0x62, 0x24, 0xa2,
	0x7b, 0x8e, 0xd4, 0xf1, 0x12, 0x72, 0x89, 0xf0, 0xdc, 0x58, 0xe1, 0x79, 0xa2, 0xc4, 0x2a, 0xb0,
	0xda, 0xd3, 0x5a, 0xcc, 0xc8, 0xcb, 0xac, 0x34, 0x2f, 0x1d, 0xb6, 0xd2, 0xb3, 0x25, 0x42, 0xe1,
	0x0c, 0x74, 0xce, 0xdc, 0xff, 0xd5, 0x39, 0x51, 0x0b, 0x8a, 0x44, 0xa6, 0x87, 0x79, 0xa7, 0xf2,
	0x83, 0x95, 0x40, 0x5e, 0xd2, 0x9f, 0x0d, 0xab, 0x1a, 0x91, 0x48, 0x78, 0x99, 0xf4, 0x6d, 0x30,
	0xf4, 0x15, 0xcc, 0x45, 0x33, 0x53, 0x69, 0x61, 0x00, 0x96, 0x1a, 0xa5, 0xce, 0x08, 0x3f, 0x91,
	0xab, 0x28, 0x83, 0xa3, 0x52, 0x81, 0x95, 0x10, 0x3a, 0x81, 0xbc, 0xd0, 0x63, 0xda, 0xa4, 0xd3,
	0x29, 0x2d, 0x0e, 0x94, 0xa4, 0xae, 0x86, 0xd3, 0x8e, 0x7f, 0x77, 0x4c, 0x3a, 0x9d, 0x3e, 0x1d,
	0xb9, 0xb6, 0xa2, 0x6a, 0x5b, 0xb0, 0xd9, 0x5b, 0x91, 0x70, 0xe8, 0xc5, 0xcd, 0x55, 0xfb, 0x0c,
	0x4a, 0xc3, 0x5b, 0xaa, 0x5e, 0x6d, 0xc2, 0x7c, 0xec, 0xf9, 0x8c, 0xf4, 0xfc, 0x9c, 0x4c, 0x70,
	0xa6, 0xed, 0xc2, 0xf6, 0x19, 0xe1, 0xc7, 0x21, 0xa5, 0xc4, 0xeb, 0x15, 0x8d, 0x95, 0xfe, 0x0e,
	0x76, 0x46, 0xec, 0x27, 0x95, 0x30, 0x27, 0x35, 0x77, 0x07, 0x9d, 0x87, 0xf7, 0x86, 0x4b, 0x9e,
	0x4b, 0x80, 0x91, 0x33, 0xce, 0x3e, 0xec, 0x5e, 0x59, 0xdc, 0x7e, 0x3b, 0x1a, 0xc0, 0x26, 0xac,
	0x0b, 0x00, 0xbe, 0xc7, 0xc9, 0x0f, 0xbc, 0xa7, 0x34, 0x68, 0xff, 0xcc, 0xc0, 0xc6, 0xe0, 0x8e,
	0xc2, 0xf4, 0x5b, 0x58, 0xb0, 0x23, 0x72, 0x84, 0x2b, 0x2a, 0xd0, 0xaf, 0x86, 0x71, 0xa5, 0xcb,
	0x57, 0x7a, 0x68, 0xd1, 0xac, 0x50, 0xb0, 0xbb, 0x94, 0xf2, 0xaf, 0xa0, 0x38, 0xc8, 0x90, 0xd2,
	0x7d, 0xd6, 0x7a, 0xbb, 0x4f, 0xbe, 0xb7, 0xa9, 0xfc, 0x3d, 0x03, 0xeb, 0x46, 0xda, 0x91, 0xd0,
	0x6f, 0x52, 0x71, 0x7f, 0x3e, 0x8c, 0x3b, 0x55, 0xfc, 0x27, 0x86, 0x5d, 0x82, 0x0d, 0x23, 0xd5,
	0x5d, 0xda, 0x1a, 0xa0, 0x33, 0xc2, 0x0d, 0x35, 0x4e, 0xc7, 0xf1, 0xa9, 0xc2, 0x6a, 0x1f, 0x55,
	0xc5, 0xe6, 0x41, 0xef, 0x9c, 0x1e, 0x19, 0xee, 0x4e, 0xe2, 0x3f, 0x07, 0x64, 0x0c, 0x69, 0xba,
	0x5f, 0x64, 0x1d, 0x56, 0x8d, 0x61, 0x33, 0xda, 0x03, 0xd8, 0x3a, 0x23, 0x49, 0x3e, 0x35, 0x43,
	0x1a, 0xf8, 0x8c, 0xc4, 0xd0, 0x7e, 0x01, 0xe5, 0xb4, 0x4d, 0x85, 0xb0, 0x04, 0xf3, 0x41, 0x44,
	0x52, 0xc6, 0xe2, 0x4f, 0xed, 0x25, 0x6c, 0x19, 0xa3, 0x94, 0xde, 0x23, 0xb6, 0x0d, 0x65, 0x63,
	0xa4, 0x39, 0xed, 0x4f, 0x19, 0x28, 0x1d, 0x3a, 0xce, 0x60, 0x19, 0x9a, 0x60, 0x1c, 0xf8, 0x06,
	0x96, 0x07, 0xca, 0x9c, 0x1a, 0x75, 0x26, 0xaf, 0x72, 0x4a, 0xe1, 0x52, 0x7f, 0xad, 0x13, 0xde,
	0x4b, 0x81, 0xa4, 0x00, 0xef, 0xc0, 0x83, 0xde, 0x3a, 0xa3, 0x1e, 0x60, 0x49, 0x19, 0xba, 0x80,
	0xed, 0xf4, 0x6d, 0xe5, 0xde, 0x8f, 0x01, 0x0d, 0x3d, 0xf9, 0xe2, 0xaa, 0x54, 0x1c, 0x78, 0xd5,
	0xb1, 0x67, 0x7f, 0xcb, 0xc2, 0x62, 0x5f, 0x37, 0x44, 0x6b, 0x50, 0x6c, 0xe2, 0x46, 0xab, 0x71,
	0xdc, 0xb8, 0x30, 0xf1, 0x65, 0xbd, 0x5e, 0xab, 0x9f, 0x15, 0xa7, 0xd0, 0x63, 0xd8, 0x4f, 0xa8,
	0x57, 0x87, 0xb5, 0x56, 0xad, 0x7e, 0x66, 0x9e, 0x36, 0xb0, 0xd9, 0xd2, 0x5f, 0x37, 0x75, 0x7c,
	0xd8, 0xba, 0xc4, 0x7a, 0x71, 0x66, 0x24, 0xd7, 0xe1, 0xf1, 0xaf, 0x2f, 0x6b, 0x46, 0x4d, 0x4e,
	0x22, 0xb3, 0x68, 0x03, 0x50, 0xc2, 0x75, 0xdc, 0x78, 0xdd, 0xbc, 0xd0, 0x5b, 0xfa, 0x49, 0x31,
	0x83, 0xb6, 0xa1, 0x94, 0xd0, 0x8d, 0x56, 0xa3, 0xd9, 0xd4, 0x4f, 0xcc, 0xa3, 0x37, 0xe6, 0xa5,
	0xa1, 0xe3, 0x62, 0x56, 0x4c, 0x38, 0xc9, 0xee, 0x69, 0xad, 0x5e, 0x33, 0xce, 0xf5, 0x13, 0xf3,
	0xaa, 0xd6, 0x3a, 0x37, 0x75, 0x8c, 0x1b, 0xb8, 0x38, 0x8d, 0x9e, 0xc2, 0xa3, 0x11, 0x1c, 0x27,
	0xfa, 0xd7, 0xb5, 0x63, 0x5d, 0x31, 0xce, 0xa1, 0x0a, 0x3c, 0x1b, 0x66, 0xbc, 0xac, 0x1f, 0x1e,
	0x5d, 0xe8, 0x66, 0xab, 0x61, 0x1a, 0x7a, 0xfd, 0xc4, 0x6c, 0xe9, 0x17, 0xfa, 0x6b, 0xbd, 0x85,
	0xdf, 0x14, 0xe7, 0xab, 0xff, 0x5e, 0xec, 0x4e, 0x34, 0x06, 0xa1, 0xb2, 0xdd, 0xd8, 0xb0, 0x14,
	0x4d, 0x0b, 0xb1, 0x4b, 0xd1, 0x47, 0x29, 0x75, 0x24, 0xe5, 0xd5, 0x5b, 0x7e, 0x3a, 0x96, 0x4f,
	0x25, 0xc2, 0x14, 0xfa, 0x0e, 0x16, 0xc5, 0x63, 0xb2, 0x6b, 0xe3, 0x49, 0x9a, 0xec, 0xd0, 0x9b,
	0xb4, 0xfc, 0xd1, 0x38, 0xb6, 0xc4, 0xc2, 0x35, 0xac, 0xdc, 0x59, 0x2e, 0x37, 0xdb, 0x3e, 0x35,
	0xdb, 0x6a, 0xaa, 0x45, 0x07, 0x93, 0x0e, 0xbe, 0xe5, 0xf1, 0xbd, 0x48, 0x9b, 0x42, 0xdf, 0xc0,
	0xc2, 0x0d, 0xe1, 0x66, 0xdc, 0xc6, 0xd0, 0xa3, 0xd4, 0x46, 0xd1, 0x3f, 0x99, 0x4e, 0xa6, 0xf9,
	0x16, 0x50, 0xc7, 0x65, 0xdd, 0x18, 0x08, 0x1b, 0x0c, 0xa5, 0x5c, 0xcf, 0x11, 0x3d, 0xbd, 0xfc,
	0x6c, 0x12, 0xd6, 0xc4, 0x59, 0x3e, 0x94, 0xc4, 0x41, 0xec, 0xa8, 0x99, 0xf6, 0x59, 0x45, 0x95,
	0xf4, 0xee, 0x37, 0xaa, 0xef, 0x4e, 0x76, 0xbe, 0x10, 0xca, 0x77, 0xa2, 0x7d, 0xa7, 0x9b, 0xfc,
	0x34, 0x2d, 0x4c, 0xf7, 0x35, 0xfb, 0x89, 0x8c, 0x7e, 0x9a, 0x11, 0xb9, 0xdd, 0xe7, 0x56, 0x96,
	0x96, 0xdb, 0x69, 0x3f, 0x20, 0xd2, 0x72, 0x3b, 0xf5, 0x81, 0xa7, 0x4d, 0xa1, 0x1b, 0x28, 0x4a,
	0x67, 0xf6, 0x34, 0x64, 0xf4, 0x74, 0xfc, 0x08, 0x11, 0xd9, 0x39, 0x98, 0x74, 0xd6, 0x88, 0x0c,
	0xb1, 0x09, 0x0c, 0x19, 0x93, 0x1a, 0x32, 0x46, 0x19, 0xb2, 0x60, 0x51, 0x9c, 0x28, 0xe9, 0xa5,
	0xe8, 0x71, 0x2a, 0xca, 0x81, 0xf6, 0x5b, 0x7e, 0x32, 0x86, 0x4b, 0xe9, 0x9f, 0xfe, 0x31, 0x9b,
	0x11, 0x26, 0xd8, 0x38, 0x13, 0xc6, 0x44, 0x26, 0x8c, 0x51, 0x26, 0x18, 0xac, 0x89, 0x53, 0x24,
	0x99, 0xa6, 0xba, 0x2c, 0x7a, 0x9e, 0x0a, 0x33, 0xbd, 0x59, 0x97, 0x3f, 0x9e, 0x8c, 0x39, 0x71,
	0x1d, 0x83, 0x35, 0x36, 0xa1, 0x51, 0xe3, 0x7f, 0x31, 0x6a, 0xdc, 0x67, 0x34, 0x80, 0x55, 0xcb,
	0x71, 0xcc, 0x81, 0x1e, 0x8f, 0x52, 0x6a, 0xc2, 0xa8, 0xf9, 0xa1, 0xfc, 0x7c, 0x22, 0xde, 0xc4,
	0xe2, 0x1f, 0x60, 0xb3, 0xbf, 0x5e, 0x25, 0x0d, 0x1a, 0x7d, 0x72, 0xff, 0xcd, 0x19, 0x98, 0x02,
	0xca, 0x95, 0x49, 0xd9, 0x63, 0xdb, 0x47, 0x9f, 0x7c, 0xfb, 0x5c, 0xfd, 0x84, 0x36, 0x3b, 0xee,
	0x2d, 0x33, 0x5d, 0x8f, 0x13, 0xda, 0xb6, 0x6c, 0xf2, 0x22, 0xed, 0x17, 0xf8, 0xf5, 0x9c, 0x5c,
	0x7d, 0xf6, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x19, 0x98, 0x50, 0x21, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProtocolServiceClient is the client API for ProtocolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProtocolServiceClient interface {
	// Initiates a python instance that runs the script specified by the `path` argument.
	// `list_protocols` will give back a list of protocol scripts that can be started by this call
	StartProtocol(ctx context.Context, in *StartProtocolRequest, opts ...grpc.CallOption) (*StartProtocolResponse, error)
	// Stops the currently running protocol script instance.
	StopProtocol(ctx context.Context, in *StopProtocolRequest, opts ...grpc.CallOption) (*StopProtocolResponse, error)
	// Wait for a protocol run to finish.
	//
	// The call blocks until the run with the given run ID has finished (or returns immediately if
	// it had already finished) and returns information about the protocol run.
	//
	// If no run has been started with the provided run ID (or no run ID is given), an error is
	// returned.
	//
	// If NOTIFY_BEFORE_TERMINATION is specified for state, the protocol end time is an estimate, including
	// the allowed timeout.
	//
	// Since 1.10
	WaitForFinished(ctx context.Context, in *WaitForFinishedRequest, opts ...grpc.CallOption) (*ProtocolRunInfo, error)
	// Gets information about a protocol run.
	//
	// If no run ID is provided, information about the most recently started protocol run is
	// provided.
	//
	// Since 1.10
	GetRunInfo(ctx context.Context, in *GetRunInfoRequest, opts ...grpc.CallOption) (*ProtocolRunInfo, error)
	// List previously started protocol run ids (including any current protocol), in order of starting.
	//
	// The returned object can be used to find protocol information with get_run_info.
	//
	// Since 1.11
	ListProtocolRuns(ctx context.Context, in *ListProtocolRunsRequest, opts ...grpc.CallOption) (*ListProtocolRunsResponse, error)
	// Returns the name and run id of the currently running protocol.
	//
	// Will fail with FAILED_PRECONDITION if there is no protocol running
	//
	// Since 1.11
	GetCurrentProtocolRun(ctx context.Context, in *GetCurrentProtocolRunRequest, opts ...grpc.CallOption) (*ProtocolRunInfo, error)
	// Returns current protocol run info and streams any changes to the current protocol
	//
	// This call can be made even if there is no current protocol running. In this case, the next streamed
	// response will be the start of a new protocol instance and you will receive updates for that protocol
	// until it finishes
	//
	// If a protocol finishes this stream will still continue to run and you will be notified when a new protocol starts
	//
	// Since 1.12
	WatchCurrentProtocolRun(ctx context.Context, in *WatchCurrentProtocolRunRequest, opts ...grpc.CallOption) (ProtocolService_WatchCurrentProtocolRunClient, error)
	// Gives back a list that contains info about each possible protocol script minknow is aware of.
	// This will most likely be used to retrieve a suitable protocol script that can be passed on to `start_protocol`
	//
	// Since 1.10
	ListProtocols(ctx context.Context, in *ListProtocolsRequest, opts ...grpc.CallOption) (*ListProtocolsResponse, error)
	// Returns string-to-string map of the context tags
	//
	// Since 1.11
	GetContextInfo(ctx context.Context, in *GetContextInfoRequest, opts ...grpc.CallOption) (*GetContextInfoResponse, error)
	// Store context tags as arbitary string-to-string map
	//
	// Since 1.11
	SetContextInfo(ctx context.Context, in *SetContextInfoRequest, opts ...grpc.CallOption) (*SetContextInfoResponse, error)
	// Sample id is a value set from the GUI that is defined by the user to identify an experiment.
	// This call gets this value
	// Deprecated: The sample_id is provided in the ProtocolRunUserInfo
	//
	// Since 1.11
	GetSampleId(ctx context.Context, in *GetSampleIdRequest, opts ...grpc.CallOption) (*GetSampleIdResponse, error)
	// Sets the sample id. Refer to get_sample_id for what sample id is used for
	// Deprecated: The sample_id should be set in the request when a protocol starts ( start_protocol() )
	//
	// Since 1.11
	SetSampleId(ctx context.Context, in *SetSampleIdRequest, opts ...grpc.CallOption) (*SetSampleIdResponse, error)
	// Value set by protocol scripts to define the purpose of the script. Gets this value
	//
	// Since 1.11
	GetProtocolPurpose(ctx context.Context, in *GetProtocolPurposeRequest, opts ...grpc.CallOption) (*GetProtocolPurposeResponse, error)
	// Sets the protocol purpose. See also get_protocol_purpose
	//
	// Since 1.11
	SetProtocolPurpose(ctx context.Context, in *SetProtocolPurposeRequest, opts ...grpc.CallOption) (*SetProtocolPurposeResponse, error)
	// Links an epi2me workflow reference to a run id.
	//
	// Since 1.15
	AddEpi2MeWorkflow(ctx context.Context, in *AddEpi2MeWorkflowRequest, opts ...grpc.CallOption) (*AddEpi2MeWorkflowResponse, error)
	// List all used protocol group ids used in any previous protocol on the box.
	//
	// Since 3.2
	ListProtocolGroupIds(ctx context.Context, in *ListProtocolGroupIdsRequest, opts ...grpc.CallOption) (*ListProtocolGroupIdsResponse, error)
}

type protocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewProtocolServiceClient(cc *grpc.ClientConn) ProtocolServiceClient {
	return &protocolServiceClient{cc}
}

func (c *protocolServiceClient) StartProtocol(ctx context.Context, in *StartProtocolRequest, opts ...grpc.CallOption) (*StartProtocolResponse, error) {
	out := new(StartProtocolResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/start_protocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) StopProtocol(ctx context.Context, in *StopProtocolRequest, opts ...grpc.CallOption) (*StopProtocolResponse, error) {
	out := new(StopProtocolResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/stop_protocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) WaitForFinished(ctx context.Context, in *WaitForFinishedRequest, opts ...grpc.CallOption) (*ProtocolRunInfo, error) {
	out := new(ProtocolRunInfo)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/wait_for_finished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetRunInfo(ctx context.Context, in *GetRunInfoRequest, opts ...grpc.CallOption) (*ProtocolRunInfo, error) {
	out := new(ProtocolRunInfo)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/get_run_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ListProtocolRuns(ctx context.Context, in *ListProtocolRunsRequest, opts ...grpc.CallOption) (*ListProtocolRunsResponse, error) {
	out := new(ListProtocolRunsResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/list_protocol_runs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetCurrentProtocolRun(ctx context.Context, in *GetCurrentProtocolRunRequest, opts ...grpc.CallOption) (*ProtocolRunInfo, error) {
	out := new(ProtocolRunInfo)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/get_current_protocol_run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) WatchCurrentProtocolRun(ctx context.Context, in *WatchCurrentProtocolRunRequest, opts ...grpc.CallOption) (ProtocolService_WatchCurrentProtocolRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProtocolService_serviceDesc.Streams[0], "/ont.rpc.protocol.ProtocolService/watch_current_protocol_run", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceWatchCurrentProtocolRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_WatchCurrentProtocolRunClient interface {
	Recv() (*ProtocolRunInfo, error)
	grpc.ClientStream
}

type protocolServiceWatchCurrentProtocolRunClient struct {
	grpc.ClientStream
}

func (x *protocolServiceWatchCurrentProtocolRunClient) Recv() (*ProtocolRunInfo, error) {
	m := new(ProtocolRunInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) ListProtocols(ctx context.Context, in *ListProtocolsRequest, opts ...grpc.CallOption) (*ListProtocolsResponse, error) {
	out := new(ListProtocolsResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/list_protocols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetContextInfo(ctx context.Context, in *GetContextInfoRequest, opts ...grpc.CallOption) (*GetContextInfoResponse, error) {
	out := new(GetContextInfoResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/get_context_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) SetContextInfo(ctx context.Context, in *SetContextInfoRequest, opts ...grpc.CallOption) (*SetContextInfoResponse, error) {
	out := new(SetContextInfoResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/set_context_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *protocolServiceClient) GetSampleId(ctx context.Context, in *GetSampleIdRequest, opts ...grpc.CallOption) (*GetSampleIdResponse, error) {
	out := new(GetSampleIdResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/get_sample_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *protocolServiceClient) SetSampleId(ctx context.Context, in *SetSampleIdRequest, opts ...grpc.CallOption) (*SetSampleIdResponse, error) {
	out := new(SetSampleIdResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/set_sample_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetProtocolPurpose(ctx context.Context, in *GetProtocolPurposeRequest, opts ...grpc.CallOption) (*GetProtocolPurposeResponse, error) {
	out := new(GetProtocolPurposeResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/get_protocol_purpose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) SetProtocolPurpose(ctx context.Context, in *SetProtocolPurposeRequest, opts ...grpc.CallOption) (*SetProtocolPurposeResponse, error) {
	out := new(SetProtocolPurposeResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/set_protocol_purpose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) AddEpi2MeWorkflow(ctx context.Context, in *AddEpi2MeWorkflowRequest, opts ...grpc.CallOption) (*AddEpi2MeWorkflowResponse, error) {
	out := new(AddEpi2MeWorkflowResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/add_epi2me_workflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ListProtocolGroupIds(ctx context.Context, in *ListProtocolGroupIdsRequest, opts ...grpc.CallOption) (*ListProtocolGroupIdsResponse, error) {
	out := new(ListProtocolGroupIdsResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.protocol.ProtocolService/list_protocol_group_ids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolServiceServer is the server API for ProtocolService service.
type ProtocolServiceServer interface {
	// Initiates a python instance that runs the script specified by the `path` argument.
	// `list_protocols` will give back a list of protocol scripts that can be started by this call
	StartProtocol(context.Context, *StartProtocolRequest) (*StartProtocolResponse, error)
	// Stops the currently running protocol script instance.
	StopProtocol(context.Context, *StopProtocolRequest) (*StopProtocolResponse, error)
	// Wait for a protocol run to finish.
	//
	// The call blocks until the run with the given run ID has finished (or returns immediately if
	// it had already finished) and returns information about the protocol run.
	//
	// If no run has been started with the provided run ID (or no run ID is given), an error is
	// returned.
	//
	// If NOTIFY_BEFORE_TERMINATION is specified for state, the protocol end time is an estimate, including
	// the allowed timeout.
	//
	// Since 1.10
	WaitForFinished(context.Context, *WaitForFinishedRequest) (*ProtocolRunInfo, error)
	// Gets information about a protocol run.
	//
	// If no run ID is provided, information about the most recently started protocol run is
	// provided.
	//
	// Since 1.10
	GetRunInfo(context.Context, *GetRunInfoRequest) (*ProtocolRunInfo, error)
	// List previously started protocol run ids (including any current protocol), in order of starting.
	//
	// The returned object can be used to find protocol information with get_run_info.
	//
	// Since 1.11
	ListProtocolRuns(context.Context, *ListProtocolRunsRequest) (*ListProtocolRunsResponse, error)
	// Returns the name and run id of the currently running protocol.
	//
	// Will fail with FAILED_PRECONDITION if there is no protocol running
	//
	// Since 1.11
	GetCurrentProtocolRun(context.Context, *GetCurrentProtocolRunRequest) (*ProtocolRunInfo, error)
	// Returns current protocol run info and streams any changes to the current protocol
	//
	// This call can be made even if there is no current protocol running. In this case, the next streamed
	// response will be the start of a new protocol instance and you will receive updates for that protocol
	// until it finishes
	//
	// If a protocol finishes this stream will still continue to run and you will be notified when a new protocol starts
	//
	// Since 1.12
	WatchCurrentProtocolRun(*WatchCurrentProtocolRunRequest, ProtocolService_WatchCurrentProtocolRunServer) error
	// Gives back a list that contains info about each possible protocol script minknow is aware of.
	// This will most likely be used to retrieve a suitable protocol script that can be passed on to `start_protocol`
	//
	// Since 1.10
	ListProtocols(context.Context, *ListProtocolsRequest) (*ListProtocolsResponse, error)
	// Returns string-to-string map of the context tags
	//
	// Since 1.11
	GetContextInfo(context.Context, *GetContextInfoRequest) (*GetContextInfoResponse, error)
	// Store context tags as arbitary string-to-string map
	//
	// Since 1.11
	SetContextInfo(context.Context, *SetContextInfoRequest) (*SetContextInfoResponse, error)
	// Sample id is a value set from the GUI that is defined by the user to identify an experiment.
	// This call gets this value
	// Deprecated: The sample_id is provided in the ProtocolRunUserInfo
	//
	// Since 1.11
	GetSampleId(context.Context, *GetSampleIdRequest) (*GetSampleIdResponse, error)
	// Sets the sample id. Refer to get_sample_id for what sample id is used for
	// Deprecated: The sample_id should be set in the request when a protocol starts ( start_protocol() )
	//
	// Since 1.11
	SetSampleId(context.Context, *SetSampleIdRequest) (*SetSampleIdResponse, error)
	// Value set by protocol scripts to define the purpose of the script. Gets this value
	//
	// Since 1.11
	GetProtocolPurpose(context.Context, *GetProtocolPurposeRequest) (*GetProtocolPurposeResponse, error)
	// Sets the protocol purpose. See also get_protocol_purpose
	//
	// Since 1.11
	SetProtocolPurpose(context.Context, *SetProtocolPurposeRequest) (*SetProtocolPurposeResponse, error)
	// Links an epi2me workflow reference to a run id.
	//
	// Since 1.15
	AddEpi2MeWorkflow(context.Context, *AddEpi2MeWorkflowRequest) (*AddEpi2MeWorkflowResponse, error)
	// List all used protocol group ids used in any previous protocol on the box.
	//
	// Since 3.2
	ListProtocolGroupIds(context.Context, *ListProtocolGroupIdsRequest) (*ListProtocolGroupIdsResponse, error)
}

// UnimplementedProtocolServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProtocolServiceServer struct {
}

func (*UnimplementedProtocolServiceServer) StartProtocol(ctx context.Context, req *StartProtocolRequest) (*StartProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProtocol not implemented")
}
func (*UnimplementedProtocolServiceServer) StopProtocol(ctx context.Context, req *StopProtocolRequest) (*StopProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProtocol not implemented")
}
func (*UnimplementedProtocolServiceServer) WaitForFinished(ctx context.Context, req *WaitForFinishedRequest) (*ProtocolRunInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForFinished not implemented")
}
func (*UnimplementedProtocolServiceServer) GetRunInfo(ctx context.Context, req *GetRunInfoRequest) (*ProtocolRunInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunInfo not implemented")
}
func (*UnimplementedProtocolServiceServer) ListProtocolRuns(ctx context.Context, req *ListProtocolRunsRequest) (*ListProtocolRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProtocolRuns not implemented")
}
func (*UnimplementedProtocolServiceServer) GetCurrentProtocolRun(ctx context.Context, req *GetCurrentProtocolRunRequest) (*ProtocolRunInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentProtocolRun not implemented")
}
func (*UnimplementedProtocolServiceServer) WatchCurrentProtocolRun(req *WatchCurrentProtocolRunRequest, srv ProtocolService_WatchCurrentProtocolRunServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchCurrentProtocolRun not implemented")
}
func (*UnimplementedProtocolServiceServer) ListProtocols(ctx context.Context, req *ListProtocolsRequest) (*ListProtocolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProtocols not implemented")
}
func (*UnimplementedProtocolServiceServer) GetContextInfo(ctx context.Context, req *GetContextInfoRequest) (*GetContextInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContextInfo not implemented")
}
func (*UnimplementedProtocolServiceServer) SetContextInfo(ctx context.Context, req *SetContextInfoRequest) (*SetContextInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContextInfo not implemented")
}
func (*UnimplementedProtocolServiceServer) GetSampleId(ctx context.Context, req *GetSampleIdRequest) (*GetSampleIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleId not implemented")
}
func (*UnimplementedProtocolServiceServer) SetSampleId(ctx context.Context, req *SetSampleIdRequest) (*SetSampleIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSampleId not implemented")
}
func (*UnimplementedProtocolServiceServer) GetProtocolPurpose(ctx context.Context, req *GetProtocolPurposeRequest) (*GetProtocolPurposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtocolPurpose not implemented")
}
func (*UnimplementedProtocolServiceServer) SetProtocolPurpose(ctx context.Context, req *SetProtocolPurposeRequest) (*SetProtocolPurposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProtocolPurpose not implemented")
}
func (*UnimplementedProtocolServiceServer) AddEpi2MeWorkflow(ctx context.Context, req *AddEpi2MeWorkflowRequest) (*AddEpi2MeWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEpi2MeWorkflow not implemented")
}
func (*UnimplementedProtocolServiceServer) ListProtocolGroupIds(ctx context.Context, req *ListProtocolGroupIdsRequest) (*ListProtocolGroupIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProtocolGroupIds not implemented")
}

func RegisterProtocolServiceServer(s *grpc.Server, srv ProtocolServiceServer) {
	s.RegisterService(&_ProtocolService_serviceDesc, srv)
}

func _ProtocolService_StartProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).StartProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/StartProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).StartProtocol(ctx, req.(*StartProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_StopProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).StopProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/StopProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).StopProtocol(ctx, req.(*StopProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_WaitForFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).WaitForFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/WaitForFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).WaitForFinished(ctx, req.(*WaitForFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetRunInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetRunInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/GetRunInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetRunInfo(ctx, req.(*GetRunInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ListProtocolRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProtocolRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ListProtocolRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/ListProtocolRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ListProtocolRuns(ctx, req.(*ListProtocolRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetCurrentProtocolRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentProtocolRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetCurrentProtocolRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/GetCurrentProtocolRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetCurrentProtocolRun(ctx, req.(*GetCurrentProtocolRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_WatchCurrentProtocolRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchCurrentProtocolRunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).WatchCurrentProtocolRun(m, &protocolServiceWatchCurrentProtocolRunServer{stream})
}

type ProtocolService_WatchCurrentProtocolRunServer interface {
	Send(*ProtocolRunInfo) error
	grpc.ServerStream
}

type protocolServiceWatchCurrentProtocolRunServer struct {
	grpc.ServerStream
}

func (x *protocolServiceWatchCurrentProtocolRunServer) Send(m *ProtocolRunInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_ListProtocols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProtocolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ListProtocols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/ListProtocols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ListProtocols(ctx, req.(*ListProtocolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetContextInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetContextInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/GetContextInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetContextInfo(ctx, req.(*GetContextInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_SetContextInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContextInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).SetContextInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/SetContextInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).SetContextInfo(ctx, req.(*SetContextInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetSampleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetSampleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/GetSampleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetSampleId(ctx, req.(*GetSampleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_SetSampleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSampleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).SetSampleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/SetSampleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).SetSampleId(ctx, req.(*SetSampleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetProtocolPurpose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtocolPurposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetProtocolPurpose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/GetProtocolPurpose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetProtocolPurpose(ctx, req.(*GetProtocolPurposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_SetProtocolPurpose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProtocolPurposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).SetProtocolPurpose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/SetProtocolPurpose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).SetProtocolPurpose(ctx, req.(*SetProtocolPurposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_AddEpi2MeWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEpi2MeWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).AddEpi2MeWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/AddEpi2MeWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).AddEpi2MeWorkflow(ctx, req.(*AddEpi2MeWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ListProtocolGroupIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProtocolGroupIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ListProtocolGroupIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.protocol.ProtocolService/ListProtocolGroupIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ListProtocolGroupIds(ctx, req.(*ListProtocolGroupIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ont.rpc.protocol.ProtocolService",
	HandlerType: (*ProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "start_protocol",
			Handler:    _ProtocolService_StartProtocol_Handler,
		},
		{
			MethodName: "stop_protocol",
			Handler:    _ProtocolService_StopProtocol_Handler,
		},
		{
			MethodName: "wait_for_finished",
			Handler:    _ProtocolService_WaitForFinished_Handler,
		},
		{
			MethodName: "get_run_info",
			Handler:    _ProtocolService_GetRunInfo_Handler,
		},
		{
			MethodName: "list_protocol_runs",
			Handler:    _ProtocolService_ListProtocolRuns_Handler,
		},
		{
			MethodName: "get_current_protocol_run",
			Handler:    _ProtocolService_GetCurrentProtocolRun_Handler,
		},
		{
			MethodName: "list_protocols",
			Handler:    _ProtocolService_ListProtocols_Handler,
		},
		{
			MethodName: "get_context_info",
			Handler:    _ProtocolService_GetContextInfo_Handler,
		},
		{
			MethodName: "set_context_info",
			Handler:    _ProtocolService_SetContextInfo_Handler,
		},
		{
			MethodName: "get_sample_id",
			Handler:    _ProtocolService_GetSampleId_Handler,
		},
		{
			MethodName: "set_sample_id",
			Handler:    _ProtocolService_SetSampleId_Handler,
		},
		{
			MethodName: "get_protocol_purpose",
			Handler:    _ProtocolService_GetProtocolPurpose_Handler,
		},
		{
			MethodName: "set_protocol_purpose",
			Handler:    _ProtocolService_SetProtocolPurpose_Handler,
		},
		{
			MethodName: "add_epi2me_workflow",
			Handler:    _ProtocolService_AddEpi2MeWorkflow_Handler,
		},
		{
			MethodName: "list_protocol_group_ids",
			Handler:    _ProtocolService_ListProtocolGroupIds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch_current_protocol_run",
			Handler:       _ProtocolService_WatchCurrentProtocolRun_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow/rpc/protocol.proto",
}
