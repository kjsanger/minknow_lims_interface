// Code generated by protoc-gen-go. DO NOT EDIT.
// source: minknow/rpc/acquisition.proto

package acquisition

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MinknowStatus int32

const (
	// ERROR_STATUS occurs when there is an error during a transition from one state to another.
	// Minknow will try to revert into the READY state to try to stabalise itself, but there is no guarantee of
	// that succeeding
	MinknowStatus_ERROR_STATUS MinknowStatus = 0
	// READY occurs when minknow is ready for a new experiment to start.
	MinknowStatus_READY MinknowStatus = 1
	// STARTING occurs when minknow has received a call for an experiment to start and is setting up the environment
	// for data acquisition to begin
	MinknowStatus_STARTING MinknowStatus = 2
	// PROCESSING occurs when minknow is reading data from the device.
	MinknowStatus_PROCESSING MinknowStatus = 3
	// FINISHING occurs when data acquisition has stopped (either from a explicit rpc request or the experiment naturally ended)
	// and data is still being processed (albacore is still in catchup and processing reads).
	MinknowStatus_FINISHING MinknowStatus = 4
)

var MinknowStatus_name = map[int32]string{
	0: "ERROR_STATUS",
	1: "READY",
	2: "STARTING",
	3: "PROCESSING",
	4: "FINISHING",
}

var MinknowStatus_value = map[string]int32{
	"ERROR_STATUS": 0,
	"READY":        1,
	"STARTING":     2,
	"PROCESSING":   3,
	"FINISHING":    4,
}

func (x MinknowStatus) String() string {
	return proto.EnumName(MinknowStatus_name, int32(x))
}

func (MinknowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{0}
}

// An on/off setting where MinKNOW can be allowed to choose a default.
type Option int32

const (
	// Allow MinKNOW to choose the default it believes is appropriate.
	Option_AUTO Option = 0
	// Prevent the behaviour being controlled.
	Option_DISABLE Option = 1
	// Force the behaviour being controlled.
	Option_FORCE Option = 2
)

var Option_name = map[int32]string{
	0: "AUTO",
	1: "DISABLE",
	2: "FORCE",
}

var Option_value = map[string]int32{
	"AUTO":    0,
	"DISABLE": 1,
	"FORCE":   2,
}

func (x Option) String() string {
	return proto.EnumName(Option_name, int32(x))
}

func (Option) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{1}
}

type Purpose int32

const (
	// No specific purpose listed.
	//
	// Reports and sequencing metrics will be disabled by default. No modifications will be made to
	// the analysis configuration.
	Purpose_OTHER_PURPOSE Purpose = 0
	// Indicates that the acquisition is for sequencing.
	//
	// This will enable reports and sequencing metrics by default.
	Purpose_SEQUENCING Purpose = 2
	// Indicates that the acquisition is for calibration.
	//
	// This will disable the entire analysis pipeline and all file output.
	Purpose_CALIBRATION Purpose = 3
)

var Purpose_name = map[int32]string{
	0: "OTHER_PURPOSE",
	2: "SEQUENCING",
	3: "CALIBRATION",
}

var Purpose_value = map[string]int32{
	"OTHER_PURPOSE": 0,
	"SEQUENCING":    2,
	"CALIBRATION":   3,
}

func (x Purpose) String() string {
	return proto.EnumName(Purpose_name, int32(x))
}

func (Purpose) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{2}
}

type AcquisitionState int32

const (
	// The acquisition period is starting up.
	AcquisitionState_ACQUISITION_STARTING AcquisitionState = 0
	// The acquisition period is still running.
	AcquisitionState_ACQUISITION_RUNNING AcquisitionState = 1
	// The acquisition period is finishing:
	// ie. finishing processing and saving
	// data produced during the run.
	AcquisitionState_ACQUISITION_FINISHING AcquisitionState = 2
	// The acquisition period finished on its own and
	// did not report an error.
	AcquisitionState_ACQUISITION_COMPLETED AcquisitionState = 3
)

var AcquisitionState_name = map[int32]string{
	0: "ACQUISITION_STARTING",
	1: "ACQUISITION_RUNNING",
	2: "ACQUISITION_FINISHING",
	3: "ACQUISITION_COMPLETED",
}

var AcquisitionState_value = map[string]int32{
	"ACQUISITION_STARTING":  0,
	"ACQUISITION_RUNNING":   1,
	"ACQUISITION_FINISHING": 2,
	"ACQUISITION_COMPLETED": 3,
}

func (x AcquisitionState) String() string {
	return proto.EnumName(AcquisitionState_name, int32(x))
}

func (AcquisitionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{3}
}

type AcquisitionStopReason int32

const (
	// The acquisition has not yet stopped.
	AcquisitionStopReason_STOPPED_NOT_SET AcquisitionStopReason = 0
	// The user called the stop rpc.
	AcquisitionStopReason_STOPPED_USER_REQUESTED AcquisitionStopReason = 1
	// MinKNOW detected disk space was low and ended acquisition.
	AcquisitionStopReason_STOPPED_NO_DISK_SPACE AcquisitionStopReason = 2
	// The device stopped acquisition as it was unable to read data.
	AcquisitionStopReason_STOPPED_DEVICE_STOPPED_ACQUISITION AcquisitionStopReason = 3
	// Another acquisition run was requested, so the old one was stopped.
	AcquisitionStopReason_STOPPED_STARTING_ANOTHER_RUN AcquisitionStopReason = 4
	// The protocol ended, causing the acquisition to stop.
	AcquisitionStopReason_STOPPED_PROTOCOL_ENDED AcquisitionStopReason = 5
	// The device or asic was disconnected, causing the run to stop.
	AcquisitionStopReason_STOPPED_DEVICE_ERROR AcquisitionStopReason = 6
)

var AcquisitionStopReason_name = map[int32]string{
	0: "STOPPED_NOT_SET",
	1: "STOPPED_USER_REQUESTED",
	2: "STOPPED_NO_DISK_SPACE",
	3: "STOPPED_DEVICE_STOPPED_ACQUISITION",
	4: "STOPPED_STARTING_ANOTHER_RUN",
	5: "STOPPED_PROTOCOL_ENDED",
	6: "STOPPED_DEVICE_ERROR",
}

var AcquisitionStopReason_value = map[string]int32{
	"STOPPED_NOT_SET":                    0,
	"STOPPED_USER_REQUESTED":             1,
	"STOPPED_NO_DISK_SPACE":              2,
	"STOPPED_DEVICE_STOPPED_ACQUISITION": 3,
	"STOPPED_STARTING_ANOTHER_RUN":       4,
	"STOPPED_PROTOCOL_ENDED":             5,
	"STOPPED_DEVICE_ERROR":               6,
}

func (x AcquisitionStopReason) String() string {
	return proto.EnumName(AcquisitionStopReason_name, int32(x))
}

func (AcquisitionStopReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{4}
}

type FinishingState int32

const (
	// The default state for acquisition
	FinishingState_FINISHING_UNKNOWN FinishingState = 0
	// The acquisition is processing raw signal into reads
	FinishingState_FINISHING_PROCESSING_DEVICE_SIGNAL FinishingState = 1
	// Processed reads are being basecalled
	FinishingState_FINISHING_BASECALLING_READS FinishingState = 2
	// Data is being written to disk (or copied to network storage)
	FinishingState_FINISHING_SAVING_DATA FinishingState = 3
)

var FinishingState_name = map[int32]string{
	0: "FINISHING_UNKNOWN",
	1: "FINISHING_PROCESSING_DEVICE_SIGNAL",
	2: "FINISHING_BASECALLING_READS",
	3: "FINISHING_SAVING_DATA",
}

var FinishingState_value = map[string]int32{
	"FINISHING_UNKNOWN":                  0,
	"FINISHING_PROCESSING_DEVICE_SIGNAL": 1,
	"FINISHING_BASECALLING_READS":        2,
	"FINISHING_SAVING_DATA":              3,
}

func (x FinishingState) String() string {
	return proto.EnumName(FinishingState_name, int32(x))
}

func (FinishingState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{5}
}

type StopRequest_DataAction int32

const (
	// The current default is set to FINISH_PROCESSING, but is subject to change
	StopRequest_STOP_DEFAULT StopRequest_DataAction = 0
	// STOP_KEEP_ALL_DATA tells minknow to stop albacore catchup, but keep all of the read files
	// Any reads that have not been successfully/unsucessfully basecalled will be classed as 'skipped'
	StopRequest_STOP_KEEP_ALL_DATA StopRequest_DataAction = 1
	// FINISH_PROCESSING will allow albacore to continue catchup until all of the reads have been basecalled
	StopRequest_STOP_FINISH_PROCESSING StopRequest_DataAction = 2
)

var StopRequest_DataAction_name = map[int32]string{
	0: "STOP_DEFAULT",
	1: "STOP_KEEP_ALL_DATA",
	2: "STOP_FINISH_PROCESSING",
}

var StopRequest_DataAction_value = map[string]int32{
	"STOP_DEFAULT":           0,
	"STOP_KEEP_ALL_DATA":     1,
	"STOP_FINISH_PROCESSING": 2,
}

func (x StopRequest_DataAction) String() string {
	return proto.EnumName(StopRequest_DataAction_name, int32(x))
}

func (StopRequest_DataAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{2, 0}
}

type StartRequest struct {
	// Wait for MinKNOW to enter the PROCESSING state before returning.
	//
	// Defaults to false, which will cause this call to return as soon as MinKNOW enters the
	// STARTING state.
	WaitUntilProcessing bool `protobuf:"varint,1,opt,name=wait_until_processing,json=waitUntilProcessing,proto3" json:"wait_until_processing,omitempty"`
	// Prevent waiting until the device is ready before starting acquisition.
	//
	// Defaults to false.
	//
	// By default, MinKNOW will block in the start() call for the device and flow cell to be ready
	// for acquisition (which may take several seconds after plugging in the flow cell on some
	// devices). Setting this option will cause the call to return with an error if the device is
	// not already prepared to acquire data.
	//
	// Since 1.14
	DontWaitForDeviceReady bool `protobuf:"varint,2,opt,name=dont_wait_for_device_ready,json=dontWaitForDeviceReady,proto3" json:"dont_wait_for_device_ready,omitempty"`
	// Generate duty time and throughput reports.
	//
	// Note that this setting will be ignored (and no reports will be generated) if no protocol is
	// running at the time acquisition is started.
	//
	// The default setting (AUTO) will only generate reports if purpose is set to SEQUENCING.
	//
	// Since 3.0
	GenerateReport Option `protobuf:"varint,3,opt,name=generate_report,json=generateReport,proto3,enum=ont.rpc.acquisition.Option" json:"generate_report,omitempty"`
	// Whether sequencing read metrics should be reported to Oxford Nanopore.
	//
	// These are performance metrics that are used to improve the sequencing technology. They do not
	// include any actual sequencing data, only statistics about read lengths, duty time and similar
	// generic performance information.
	//
	// The default setting (AUTO) will only send metrics if purpose is set to SEQUENCING.
	//
	// Since 3.0
	SendSequencingReadMetrics Option `protobuf:"varint,4,opt,name=send_sequencing_read_metrics,json=sendSequencingReadMetrics,proto3,enum=ont.rpc.acquisition.Option" json:"send_sequencing_read_metrics,omitempty"`
	// Whether basecalling metrics should be reported to Oxford Nanopore.
	//
	// These are performance metrics that are used to improve the sequencing technology. They do not
	// include any actual sequencing data, only statistics about basecalling performance.
	//
	// The default setting (AUTO) will only send metrics if purpose is set to SEQUENCING.
	//
	// NB: this setting is ignored if live basecalling is not enabled, since there will be no
	// metrics to send.
	//
	// Since 3.2
	SendBasecallingMetrics Option `protobuf:"varint,5,opt,name=send_basecalling_metrics,json=sendBasecallingMetrics,proto3,enum=ont.rpc.acquisition.Option" json:"send_basecalling_metrics,omitempty"`
	// Specify the purpose of this acquisition period.
	//
	// This affects various defaults (see the Purpose enum documentation for more details). It may
	// also affect how the user interface presents the state of the protocol.
	//
	// Since 3.2
	Purpose Purpose `protobuf:"varint,6,opt,name=purpose,proto3,enum=ont.rpc.acquisition.Purpose" json:"purpose,omitempty"`
	// Perform analysis for this acquisition period.
	//
	// If this is disabled, no reads, no events, no channel states and no basecalls will be
	// generated. Any RPCs that depend on any of these will fail. No reads-based files will be
	// produced at all, regardless of any other settings.
	//
	// This is mostly useful for calibration (although you should normally use the purpose field
	// rather than setting this explicitly).
	//
	// The default setting (AUTO) will use the persistent setting from the analysis_configuraiton
	// service, unless the purpose is set to CALIBRATION.
	//
	// Since 3.2
	Analysis Option `protobuf:"varint,7,opt,name=analysis,proto3,enum=ont.rpc.acquisition.Option" json:"analysis,omitempty"`
	// Allow file output for this acquisition period.
	//
	// If this is disabled, the file output settings will be ignored for this acquisition period,
	// and no data files will be produced. Note that reports are NOT managed by this setting.
	//
	// Note that setting this to FORCE will simply make file output respect the bulk and read writer
	// configurations. If each file output type is disabled, you will still get no file output.
	//
	// This is mostly useful for calibration (although you should normally use the purpose field
	// rather than setting this explicitly).
	//
	// The default setting (AUTO) will only suppress file output if purpose is set to CALIBRATION.
	//
	// Since 3.2
	FileOutput           Option   `protobuf:"varint,8,opt,name=file_output,json=fileOutput,proto3,enum=ont.rpc.acquisition.Option" json:"file_output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartRequest) Reset()         { *m = StartRequest{} }
func (m *StartRequest) String() string { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()    {}
func (*StartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{0}
}

func (m *StartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartRequest.Unmarshal(m, b)
}
func (m *StartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartRequest.Marshal(b, m, deterministic)
}
func (m *StartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRequest.Merge(m, src)
}
func (m *StartRequest) XXX_Size() int {
	return xxx_messageInfo_StartRequest.Size(m)
}
func (m *StartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRequest proto.InternalMessageInfo

func (m *StartRequest) GetWaitUntilProcessing() bool {
	if m != nil {
		return m.WaitUntilProcessing
	}
	return false
}

func (m *StartRequest) GetDontWaitForDeviceReady() bool {
	if m != nil {
		return m.DontWaitForDeviceReady
	}
	return false
}

func (m *StartRequest) GetGenerateReport() Option {
	if m != nil {
		return m.GenerateReport
	}
	return Option_AUTO
}

func (m *StartRequest) GetSendSequencingReadMetrics() Option {
	if m != nil {
		return m.SendSequencingReadMetrics
	}
	return Option_AUTO
}

func (m *StartRequest) GetSendBasecallingMetrics() Option {
	if m != nil {
		return m.SendBasecallingMetrics
	}
	return Option_AUTO
}

func (m *StartRequest) GetPurpose() Purpose {
	if m != nil {
		return m.Purpose
	}
	return Purpose_OTHER_PURPOSE
}

func (m *StartRequest) GetAnalysis() Option {
	if m != nil {
		return m.Analysis
	}
	return Option_AUTO
}

func (m *StartRequest) GetFileOutput() Option {
	if m != nil {
		return m.FileOutput
	}
	return Option_AUTO
}

type StartResponse struct {
	// UUID generated when the protocol is started, to uniquely represent this protocol instance
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartResponse) Reset()         { *m = StartResponse{} }
func (m *StartResponse) String() string { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()    {}
func (*StartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{1}
}

func (m *StartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartResponse.Unmarshal(m, b)
}
func (m *StartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartResponse.Marshal(b, m, deterministic)
}
func (m *StartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse.Merge(m, src)
}
func (m *StartResponse) XXX_Size() int {
	return xxx_messageInfo_StartResponse.Size(m)
}
func (m *StartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse proto.InternalMessageInfo

func (m *StartResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type StopRequest struct {
	DataActionOnStop StopRequest_DataAction `protobuf:"varint,1,opt,name=data_action_on_stop,json=dataActionOnStop,proto3,enum=ont.rpc.acquisition.StopRequest_DataAction" json:"data_action_on_stop,omitempty"`
	// Defaults to false
	// If false will return as soon as minknow enters the FINISHING state.
	// If true then returns as soon as minknow enters the READY state.
	WaitUntilReady bool `protobuf:"varint,2,opt,name=wait_until_ready,json=waitUntilReady,proto3" json:"wait_until_ready,omitempty"`
	// Keep the ASIC power on for GridIONs and MinIONs.
	//
	// Unless this option is set to true, the ASIC power will be disabled as soon as MinKNOW has
	// stopped pulling data from it. This is because removing (or plugging in) a flow cell while the
	// power is on can damage it. Disabling the power will also disable the heating element; this is
	// likely to cause the device to cool down (particularly for MinIONs).
	//
	// You should normally only use this option if you are expecting to start acquisition again
	// in a short amount of time.
	//
	// This option has no effect on PromethIONs.
	//
	// Since 1.15.2
	KeepPowerOn          bool     `protobuf:"varint,3,opt,name=keep_power_on,json=keepPowerOn,proto3" json:"keep_power_on,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopRequest) Reset()         { *m = StopRequest{} }
func (m *StopRequest) String() string { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()    {}
func (*StopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{2}
}

func (m *StopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopRequest.Unmarshal(m, b)
}
func (m *StopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopRequest.Marshal(b, m, deterministic)
}
func (m *StopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRequest.Merge(m, src)
}
func (m *StopRequest) XXX_Size() int {
	return xxx_messageInfo_StopRequest.Size(m)
}
func (m *StopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopRequest proto.InternalMessageInfo

func (m *StopRequest) GetDataActionOnStop() StopRequest_DataAction {
	if m != nil {
		return m.DataActionOnStop
	}
	return StopRequest_STOP_DEFAULT
}

func (m *StopRequest) GetWaitUntilReady() bool {
	if m != nil {
		return m.WaitUntilReady
	}
	return false
}

func (m *StopRequest) GetKeepPowerOn() bool {
	if m != nil {
		return m.KeepPowerOn
	}
	return false
}

type StopResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopResponse) Reset()         { *m = StopResponse{} }
func (m *StopResponse) String() string { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()    {}
func (*StopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{3}
}

func (m *StopResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopResponse.Unmarshal(m, b)
}
func (m *StopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopResponse.Marshal(b, m, deterministic)
}
func (m *StopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopResponse.Merge(m, src)
}
func (m *StopResponse) XXX_Size() int {
	return xxx_messageInfo_StopResponse.Size(m)
}
func (m *StopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopResponse proto.InternalMessageInfo

type WatchForStatusChangeRequest struct {
	Stop                 bool     `protobuf:"varint,1,opt,name=stop,proto3" json:"stop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchForStatusChangeRequest) Reset()         { *m = WatchForStatusChangeRequest{} }
func (m *WatchForStatusChangeRequest) String() string { return proto.CompactTextString(m) }
func (*WatchForStatusChangeRequest) ProtoMessage()    {}
func (*WatchForStatusChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{4}
}

func (m *WatchForStatusChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchForStatusChangeRequest.Unmarshal(m, b)
}
func (m *WatchForStatusChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchForStatusChangeRequest.Marshal(b, m, deterministic)
}
func (m *WatchForStatusChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchForStatusChangeRequest.Merge(m, src)
}
func (m *WatchForStatusChangeRequest) XXX_Size() int {
	return xxx_messageInfo_WatchForStatusChangeRequest.Size(m)
}
func (m *WatchForStatusChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchForStatusChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchForStatusChangeRequest proto.InternalMessageInfo

func (m *WatchForStatusChangeRequest) GetStop() bool {
	if m != nil {
		return m.Stop
	}
	return false
}

type WatchForStatusChangeResponse struct {
	Status               MinknowStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ont.rpc.acquisition.MinknowStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WatchForStatusChangeResponse) Reset()         { *m = WatchForStatusChangeResponse{} }
func (m *WatchForStatusChangeResponse) String() string { return proto.CompactTextString(m) }
func (*WatchForStatusChangeResponse) ProtoMessage()    {}
func (*WatchForStatusChangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{5}
}

func (m *WatchForStatusChangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchForStatusChangeResponse.Unmarshal(m, b)
}
func (m *WatchForStatusChangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchForStatusChangeResponse.Marshal(b, m, deterministic)
}
func (m *WatchForStatusChangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchForStatusChangeResponse.Merge(m, src)
}
func (m *WatchForStatusChangeResponse) XXX_Size() int {
	return xxx_messageInfo_WatchForStatusChangeResponse.Size(m)
}
func (m *WatchForStatusChangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchForStatusChangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchForStatusChangeResponse proto.InternalMessageInfo

func (m *WatchForStatusChangeResponse) GetStatus() MinknowStatus {
	if m != nil {
		return m.Status
	}
	return MinknowStatus_ERROR_STATUS
}

type CurrentStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentStatusRequest) Reset()         { *m = CurrentStatusRequest{} }
func (m *CurrentStatusRequest) String() string { return proto.CompactTextString(m) }
func (*CurrentStatusRequest) ProtoMessage()    {}
func (*CurrentStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{6}
}

func (m *CurrentStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentStatusRequest.Unmarshal(m, b)
}
func (m *CurrentStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentStatusRequest.Marshal(b, m, deterministic)
}
func (m *CurrentStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentStatusRequest.Merge(m, src)
}
func (m *CurrentStatusRequest) XXX_Size() int {
	return xxx_messageInfo_CurrentStatusRequest.Size(m)
}
func (m *CurrentStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentStatusRequest proto.InternalMessageInfo

type CurrentStatusResponse struct {
	Status               MinknowStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ont.rpc.acquisition.MinknowStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CurrentStatusResponse) Reset()         { *m = CurrentStatusResponse{} }
func (m *CurrentStatusResponse) String() string { return proto.CompactTextString(m) }
func (*CurrentStatusResponse) ProtoMessage()    {}
func (*CurrentStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{7}
}

func (m *CurrentStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentStatusResponse.Unmarshal(m, b)
}
func (m *CurrentStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentStatusResponse.Marshal(b, m, deterministic)
}
func (m *CurrentStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentStatusResponse.Merge(m, src)
}
func (m *CurrentStatusResponse) XXX_Size() int {
	return xxx_messageInfo_CurrentStatusResponse.Size(m)
}
func (m *CurrentStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentStatusResponse proto.InternalMessageInfo

func (m *CurrentStatusResponse) GetStatus() MinknowStatus {
	if m != nil {
		return m.Status
	}
	return MinknowStatus_ERROR_STATUS
}

type GetProgressRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProgressRequest) Reset()         { *m = GetProgressRequest{} }
func (m *GetProgressRequest) String() string { return proto.CompactTextString(m) }
func (*GetProgressRequest) ProtoMessage()    {}
func (*GetProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{8}
}

func (m *GetProgressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProgressRequest.Unmarshal(m, b)
}
func (m *GetProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProgressRequest.Marshal(b, m, deterministic)
}
func (m *GetProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProgressRequest.Merge(m, src)
}
func (m *GetProgressRequest) XXX_Size() int {
	return xxx_messageInfo_GetProgressRequest.Size(m)
}
func (m *GetProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProgressRequest proto.InternalMessageInfo

type GetProgressResponse struct {
	// The amount of raw data (per channel) that has been acquired and
	// processed.
	RawPerChannel        *GetProgressResponse_RawPerChannel `protobuf:"bytes,1,opt,name=raw_per_channel,json=rawPerChannel,proto3" json:"raw_per_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *GetProgressResponse) Reset()         { *m = GetProgressResponse{} }
func (m *GetProgressResponse) String() string { return proto.CompactTextString(m) }
func (*GetProgressResponse) ProtoMessage()    {}
func (*GetProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{9}
}

func (m *GetProgressResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProgressResponse.Unmarshal(m, b)
}
func (m *GetProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProgressResponse.Marshal(b, m, deterministic)
}
func (m *GetProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProgressResponse.Merge(m, src)
}
func (m *GetProgressResponse) XXX_Size() int {
	return xxx_messageInfo_GetProgressResponse.Size(m)
}
func (m *GetProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProgressResponse proto.InternalMessageInfo

func (m *GetProgressResponse) GetRawPerChannel() *GetProgressResponse_RawPerChannel {
	if m != nil {
		return m.RawPerChannel
	}
	return nil
}

type GetProgressResponse_RawPerChannel struct {
	// Number of samples (per channel) acquired from the device.
	Acquired uint64 `protobuf:"varint,1,opt,name=acquired,proto3" json:"acquired,omitempty"`
	// Number of samples (per channel) passed to the analysis pipeline
	// for processing.
	//
	// This can be compared to acquired to see how far behind the analysis
	// is lagging.
	Processed            uint64   `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProgressResponse_RawPerChannel) Reset()         { *m = GetProgressResponse_RawPerChannel{} }
func (m *GetProgressResponse_RawPerChannel) String() string { return proto.CompactTextString(m) }
func (*GetProgressResponse_RawPerChannel) ProtoMessage()    {}
func (*GetProgressResponse_RawPerChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{9, 0}
}

func (m *GetProgressResponse_RawPerChannel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProgressResponse_RawPerChannel.Unmarshal(m, b)
}
func (m *GetProgressResponse_RawPerChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProgressResponse_RawPerChannel.Marshal(b, m, deterministic)
}
func (m *GetProgressResponse_RawPerChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProgressResponse_RawPerChannel.Merge(m, src)
}
func (m *GetProgressResponse_RawPerChannel) XXX_Size() int {
	return xxx_messageInfo_GetProgressResponse_RawPerChannel.Size(m)
}
func (m *GetProgressResponse_RawPerChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProgressResponse_RawPerChannel.DiscardUnknown(m)
}

var xxx_messageInfo_GetProgressResponse_RawPerChannel proto.InternalMessageInfo

func (m *GetProgressResponse_RawPerChannel) GetAcquired() uint64 {
	if m != nil {
		return m.Acquired
	}
	return 0
}

func (m *GetProgressResponse_RawPerChannel) GetProcessed() uint64 {
	if m != nil {
		return m.Processed
	}
	return 0
}

type GetAcquisitionRunInfoRequest struct {
	// The protocol run to get information about.
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAcquisitionRunInfoRequest) Reset()         { *m = GetAcquisitionRunInfoRequest{} }
func (m *GetAcquisitionRunInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetAcquisitionRunInfoRequest) ProtoMessage()    {}
func (*GetAcquisitionRunInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{10}
}

func (m *GetAcquisitionRunInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAcquisitionRunInfoRequest.Unmarshal(m, b)
}
func (m *GetAcquisitionRunInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAcquisitionRunInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetAcquisitionRunInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAcquisitionRunInfoRequest.Merge(m, src)
}
func (m *GetAcquisitionRunInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetAcquisitionRunInfoRequest.Size(m)
}
func (m *GetAcquisitionRunInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAcquisitionRunInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAcquisitionRunInfoRequest proto.InternalMessageInfo

func (m *GetAcquisitionRunInfoRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type AcquisitionYieldSummary struct {
	// Number of reads selected by analysis as good reads.
	//
	// The reads in this counter are completed, but not necessarily on disk yet.
	ReadCount int64 `protobuf:"varint,1,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`
	// Number of reads written to disk.
	//
	// The reads which have been finalised and written to disk.
	WrittenReadCount int64 `protobuf:"varint,2,opt,name=written_read_count,json=writtenReadCount,proto3" json:"written_read_count,omitempty"`
	// Number of reads successfully basecalled.
	BasecalledPassReadCount int64 `protobuf:"varint,3,opt,name=basecalled_pass_read_count,json=basecalledPassReadCount,proto3" json:"basecalled_pass_read_count,omitempty"`
	// Number of reads which have failed to basecall.
	BasecalledFailReadCount int64 `protobuf:"varint,4,opt,name=basecalled_fail_read_count,json=basecalledFailReadCount,proto3" json:"basecalled_fail_read_count,omitempty"`
	// Number of reads which have been skipped
	BasecalledSkippedReadCount int64 `protobuf:"varint,10,opt,name=basecalled_skipped_read_count,json=basecalledSkippedReadCount,proto3" json:"basecalled_skipped_read_count,omitempty"`
	// Number of bases which have been called.
	BasecalledBases int64 `protobuf:"varint,5,opt,name=basecalled_bases,json=basecalledBases,proto3" json:"basecalled_bases,omitempty"`
	// Number of raw samples which have been called.
	BasecalledSamples int64 `protobuf:"varint,6,opt,name=basecalled_samples,json=basecalledSamples,proto3" json:"basecalled_samples,omitempty"`
	// Number of minknow raw samples which have been selected
	// for writing to disk as reads.
	SelectedRawSamples int64 `protobuf:"varint,7,opt,name=selected_raw_samples,json=selectedRawSamples,proto3" json:"selected_raw_samples,omitempty"`
	// Number of minknow events which have been selected
	// for writing to disk as reads.
	SelectedEvents int64 `protobuf:"varint,8,opt,name=selected_events,json=selectedEvents,proto3" json:"selected_events,omitempty"`
	// Estimated number of bases MinKNOW has selected for writing.
	// This is estimated based on already called bases and samples.
	EstimatedSelectedBases int64 `protobuf:"varint,9,opt,name=estimated_selected_bases,json=estimatedSelectedBases,proto3" json:"estimated_selected_bases,omitempty"`
	// Number of bytes which minknow needs to write in order to
	// finish the experiment.
	//
	// Since 3.3
	BytesToWriteProduced int64 `protobuf:"varint,11,opt,name=bytes_to_write_produced,json=bytesToWriteProduced,proto3" json:"bytes_to_write_produced,omitempty"`
	// Number of bytes which minknow has failed to write to final location.
	// These reads are instead contained in the fallback/tmp locations.
	//
	// Since 3.3
	BytesToWriteFailed int64 `protobuf:"varint,12,opt,name=bytes_to_write_failed,json=bytesToWriteFailed,proto3" json:"bytes_to_write_failed,omitempty"`
	// Number of bytes which minknow has written to final location.
	//
	// Since 3.3
	BytesToWriteCompleted int64    `protobuf:"varint,13,opt,name=bytes_to_write_completed,json=bytesToWriteCompleted,proto3" json:"bytes_to_write_completed,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *AcquisitionYieldSummary) Reset()         { *m = AcquisitionYieldSummary{} }
func (m *AcquisitionYieldSummary) String() string { return proto.CompactTextString(m) }
func (*AcquisitionYieldSummary) ProtoMessage()    {}
func (*AcquisitionYieldSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{11}
}

func (m *AcquisitionYieldSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcquisitionYieldSummary.Unmarshal(m, b)
}
func (m *AcquisitionYieldSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcquisitionYieldSummary.Marshal(b, m, deterministic)
}
func (m *AcquisitionYieldSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquisitionYieldSummary.Merge(m, src)
}
func (m *AcquisitionYieldSummary) XXX_Size() int {
	return xxx_messageInfo_AcquisitionYieldSummary.Size(m)
}
func (m *AcquisitionYieldSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquisitionYieldSummary.DiscardUnknown(m)
}

var xxx_messageInfo_AcquisitionYieldSummary proto.InternalMessageInfo

func (m *AcquisitionYieldSummary) GetReadCount() int64 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetWrittenReadCount() int64 {
	if m != nil {
		return m.WrittenReadCount
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetBasecalledPassReadCount() int64 {
	if m != nil {
		return m.BasecalledPassReadCount
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetBasecalledFailReadCount() int64 {
	if m != nil {
		return m.BasecalledFailReadCount
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetBasecalledSkippedReadCount() int64 {
	if m != nil {
		return m.BasecalledSkippedReadCount
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetBasecalledBases() int64 {
	if m != nil {
		return m.BasecalledBases
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetBasecalledSamples() int64 {
	if m != nil {
		return m.BasecalledSamples
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetSelectedRawSamples() int64 {
	if m != nil {
		return m.SelectedRawSamples
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetSelectedEvents() int64 {
	if m != nil {
		return m.SelectedEvents
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetEstimatedSelectedBases() int64 {
	if m != nil {
		return m.EstimatedSelectedBases
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetBytesToWriteProduced() int64 {
	if m != nil {
		return m.BytesToWriteProduced
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetBytesToWriteFailed() int64 {
	if m != nil {
		return m.BytesToWriteFailed
	}
	return 0
}

func (m *AcquisitionYieldSummary) GetBytesToWriteCompleted() int64 {
	if m != nil {
		return m.BytesToWriteCompleted
	}
	return 0
}

type ChannelStateInfo struct {
	// The groups of channel states.
	//
	// The groups are ordered according to the "order" attribute of the group style in the channel
	// states configuration.
	Groups               []*ChannelStateInfo_Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ChannelStateInfo) Reset()         { *m = ChannelStateInfo{} }
func (m *ChannelStateInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelStateInfo) ProtoMessage()    {}
func (*ChannelStateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{12}
}

func (m *ChannelStateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelStateInfo.Unmarshal(m, b)
}
func (m *ChannelStateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelStateInfo.Marshal(b, m, deterministic)
}
func (m *ChannelStateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelStateInfo.Merge(m, src)
}
func (m *ChannelStateInfo) XXX_Size() int {
	return xxx_messageInfo_ChannelStateInfo.Size(m)
}
func (m *ChannelStateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelStateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelStateInfo proto.InternalMessageInfo

func (m *ChannelStateInfo) GetGroups() []*ChannelStateInfo_Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ChannelStateInfo_Style struct {
	// The human-readable name to display when rendering this channel state or group.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// A sentence describing the meaning of the channel state or group.
	//
	// This can be used as a tooltip, for example.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The colour to use when rendering this channel state or group.
	//
	// This is a six-digit hex string describing an RGB colour (eg: "ff00ff" for purple).
	Colour               string   `protobuf:"bytes,3,opt,name=colour,proto3" json:"colour,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelStateInfo_Style) Reset()         { *m = ChannelStateInfo_Style{} }
func (m *ChannelStateInfo_Style) String() string { return proto.CompactTextString(m) }
func (*ChannelStateInfo_Style) ProtoMessage()    {}
func (*ChannelStateInfo_Style) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{12, 0}
}

func (m *ChannelStateInfo_Style) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelStateInfo_Style.Unmarshal(m, b)
}
func (m *ChannelStateInfo_Style) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelStateInfo_Style.Marshal(b, m, deterministic)
}
func (m *ChannelStateInfo_Style) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelStateInfo_Style.Merge(m, src)
}
func (m *ChannelStateInfo_Style) XXX_Size() int {
	return xxx_messageInfo_ChannelStateInfo_Style.Size(m)
}
func (m *ChannelStateInfo_Style) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelStateInfo_Style.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelStateInfo_Style proto.InternalMessageInfo

func (m *ChannelStateInfo_Style) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ChannelStateInfo_Style) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChannelStateInfo_Style) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

type ChannelStateInfo_ChannelState struct {
	// The numeric identifier of the state.
	//
	// This is what is reported in any other APIs that return a channel state ID.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The internal name of the state.
	//
	// This is what is reported in any other APIs that return a channel state name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// How to render the channel state in a graphical user interface.
	//
	// Note that the style may be missing from some channel states (such as the ones that are
	// built in to MinKNOW).
	Style *ChannelStateInfo_Style `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	// An order ranking for the channel states when they are ungrouped.
	//
	// This can be used to order the channel states after merging the groups.
	GlobalOrder          uint32   `protobuf:"varint,4,opt,name=global_order,json=globalOrder,proto3" json:"global_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelStateInfo_ChannelState) Reset()         { *m = ChannelStateInfo_ChannelState{} }
func (m *ChannelStateInfo_ChannelState) String() string { return proto.CompactTextString(m) }
func (*ChannelStateInfo_ChannelState) ProtoMessage()    {}
func (*ChannelStateInfo_ChannelState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{12, 1}
}

func (m *ChannelStateInfo_ChannelState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelStateInfo_ChannelState.Unmarshal(m, b)
}
func (m *ChannelStateInfo_ChannelState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelStateInfo_ChannelState.Marshal(b, m, deterministic)
}
func (m *ChannelStateInfo_ChannelState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelStateInfo_ChannelState.Merge(m, src)
}
func (m *ChannelStateInfo_ChannelState) XXX_Size() int {
	return xxx_messageInfo_ChannelStateInfo_ChannelState.Size(m)
}
func (m *ChannelStateInfo_ChannelState) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelStateInfo_ChannelState.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelStateInfo_ChannelState proto.InternalMessageInfo

func (m *ChannelStateInfo_ChannelState) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelStateInfo_ChannelState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelStateInfo_ChannelState) GetStyle() *ChannelStateInfo_Style {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *ChannelStateInfo_ChannelState) GetGlobalOrder() uint32 {
	if m != nil {
		return m.GlobalOrder
	}
	return 0
}

type ChannelStateInfo_Group struct {
	// The name of the group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// How to render the group in a graphical user interface.
	//
	// Note that the style may be missing from some groups (such as the ones that are built in
	// to MinKNOW).
	Style *ChannelStateInfo_Style `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	// The channel states contained in the group.
	//
	// The groups are ordered according to the "order" attribute of the channel state style in
	// the channel states configuration.
	States               []*ChannelStateInfo_ChannelState `protobuf:"bytes,3,rep,name=states,proto3" json:"states,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ChannelStateInfo_Group) Reset()         { *m = ChannelStateInfo_Group{} }
func (m *ChannelStateInfo_Group) String() string { return proto.CompactTextString(m) }
func (*ChannelStateInfo_Group) ProtoMessage()    {}
func (*ChannelStateInfo_Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{12, 2}
}

func (m *ChannelStateInfo_Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelStateInfo_Group.Unmarshal(m, b)
}
func (m *ChannelStateInfo_Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelStateInfo_Group.Marshal(b, m, deterministic)
}
func (m *ChannelStateInfo_Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelStateInfo_Group.Merge(m, src)
}
func (m *ChannelStateInfo_Group) XXX_Size() int {
	return xxx_messageInfo_ChannelStateInfo_Group.Size(m)
}
func (m *ChannelStateInfo_Group) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelStateInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelStateInfo_Group proto.InternalMessageInfo

func (m *ChannelStateInfo_Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelStateInfo_Group) GetStyle() *ChannelStateInfo_Style {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *ChannelStateInfo_Group) GetStates() []*ChannelStateInfo_ChannelState {
	if m != nil {
		return m.States
	}
	return nil
}

type AcquisitionConfigSummary struct {
	// Was basecalling enabled for the run.
	BasecallingEnabled bool `protobuf:"varint,1,opt,name=basecalling_enabled,json=basecallingEnabled,proto3" json:"basecalling_enabled,omitempty"`
	// Root directory reads were written to for the run.
	//
	// Empty if no reads were enabled.
	ReadsDirectory string `protobuf:"bytes,2,opt,name=reads_directory,json=readsDirectory,proto3" json:"reads_directory,omitempty"`
	// Directories reads are written to if the reads_directory is on the network
	// and writes to it fail.
	//
	// Empty if no reads were enabled.
	ReadsFallbackDirectories []string `protobuf:"bytes,3,rep,name=reads_fallback_directories,json=readsFallbackDirectories,proto3" json:"reads_fallback_directories,omitempty"`
	// Determine if fast5 reads were enabled for the run.
	Fast5ReadsEnabled bool `protobuf:"varint,4,opt,name=fast5_reads_enabled,json=fast5ReadsEnabled,proto3" json:"fast5_reads_enabled,omitempty"`
	// Determine if fastq reads were enabled for the run.
	FastqReadsEnabled bool `protobuf:"varint,5,opt,name=fastq_reads_enabled,json=fastqReadsEnabled,proto3" json:"fastq_reads_enabled,omitempty"`
	// Determine if protobuf reads were enabled for the run.
	ProtobufReadsEnabled bool `protobuf:"varint,6,opt,name=protobuf_reads_enabled,json=protobufReadsEnabled,proto3" json:"protobuf_reads_enabled,omitempty"`
	// The path of the bulk file for the run.
	//
	// Empty if no reads were enabled.
	BulkFilePath string `protobuf:"bytes,7,opt,name=bulk_file_path,json=bulkFilePath,proto3" json:"bulk_file_path,omitempty"`
	// Find if the bulk writer was enabled for a run.
	BulkFileEnabled bool `protobuf:"varint,8,opt,name=bulk_file_enabled,json=bulkFileEnabled,proto3" json:"bulk_file_enabled,omitempty"`
	// Channel state styling information
	ChannelStateInfo *ChannelStateInfo `protobuf:"bytes,9,opt,name=channel_state_info,json=channelStateInfo,proto3" json:"channel_state_info,omitempty"`
	// Number of bases per event
	EventsToBaseRatio float32 `protobuf:"fixed32,10,opt,name=events_to_base_ratio,json=eventsToBaseRatio,proto3" json:"events_to_base_ratio,omitempty"`
	// Sample rate for the acquisition.
	//
	// Since 3.3
	SampleRate uint32 `protobuf:"varint,11,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Channel count used in the acquisition.
	//
	// Since 3.3
	ChannelCount         uint32   `protobuf:"varint,12,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcquisitionConfigSummary) Reset()         { *m = AcquisitionConfigSummary{} }
func (m *AcquisitionConfigSummary) String() string { return proto.CompactTextString(m) }
func (*AcquisitionConfigSummary) ProtoMessage()    {}
func (*AcquisitionConfigSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{13}
}

func (m *AcquisitionConfigSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcquisitionConfigSummary.Unmarshal(m, b)
}
func (m *AcquisitionConfigSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcquisitionConfigSummary.Marshal(b, m, deterministic)
}
func (m *AcquisitionConfigSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquisitionConfigSummary.Merge(m, src)
}
func (m *AcquisitionConfigSummary) XXX_Size() int {
	return xxx_messageInfo_AcquisitionConfigSummary.Size(m)
}
func (m *AcquisitionConfigSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquisitionConfigSummary.DiscardUnknown(m)
}

var xxx_messageInfo_AcquisitionConfigSummary proto.InternalMessageInfo

func (m *AcquisitionConfigSummary) GetBasecallingEnabled() bool {
	if m != nil {
		return m.BasecallingEnabled
	}
	return false
}

func (m *AcquisitionConfigSummary) GetReadsDirectory() string {
	if m != nil {
		return m.ReadsDirectory
	}
	return ""
}

func (m *AcquisitionConfigSummary) GetReadsFallbackDirectories() []string {
	if m != nil {
		return m.ReadsFallbackDirectories
	}
	return nil
}

func (m *AcquisitionConfigSummary) GetFast5ReadsEnabled() bool {
	if m != nil {
		return m.Fast5ReadsEnabled
	}
	return false
}

func (m *AcquisitionConfigSummary) GetFastqReadsEnabled() bool {
	if m != nil {
		return m.FastqReadsEnabled
	}
	return false
}

func (m *AcquisitionConfigSummary) GetProtobufReadsEnabled() bool {
	if m != nil {
		return m.ProtobufReadsEnabled
	}
	return false
}

func (m *AcquisitionConfigSummary) GetBulkFilePath() string {
	if m != nil {
		return m.BulkFilePath
	}
	return ""
}

func (m *AcquisitionConfigSummary) GetBulkFileEnabled() bool {
	if m != nil {
		return m.BulkFileEnabled
	}
	return false
}

func (m *AcquisitionConfigSummary) GetChannelStateInfo() *ChannelStateInfo {
	if m != nil {
		return m.ChannelStateInfo
	}
	return nil
}

func (m *AcquisitionConfigSummary) GetEventsToBaseRatio() float32 {
	if m != nil {
		return m.EventsToBaseRatio
	}
	return 0
}

func (m *AcquisitionConfigSummary) GetSampleRate() uint32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *AcquisitionConfigSummary) GetChannelCount() uint32 {
	if m != nil {
		return m.ChannelCount
	}
	return 0
}

type AcquisitionRunInfo struct {
	// The unique identifier assigned to this acquisition run.
	//
	// This is guaranteed to be made of ASCII characters, and at
	// most 40 characters. It is globally unique across all
	// protocols runs on all MinKNOW instances.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Indicates the current state of the protocol run.
	State AcquisitionState `protobuf:"varint,2,opt,name=state,proto3,enum=ont.rpc.acquisition.AcquisitionState" json:"state,omitempty"`
	// If the experiment is finishing, an extra piece of state
	// describing the current finishing state.
	FinishingState FinishingState `protobuf:"varint,10,opt,name=finishing_state,json=finishingState,proto3,enum=ont.rpc.acquisition.FinishingState" json:"finishing_state,omitempty"`
	// The reason the acquisition period was ended.
	StopReason AcquisitionStopReason `protobuf:"varint,3,opt,name=stop_reason,json=stopReason,proto3,enum=ont.rpc.acquisition.AcquisitionStopReason" json:"stop_reason,omitempty"`
	// When the acquisition period was started (UTC).
	StartTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// When MinKNOW began acquiring data (UTC).
	//
	// Unset if the acquisition is still starting up.
	DataReadStartTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=data_read_start_time,json=dataReadStartTime,proto3" json:"data_read_start_time,omitempty"`
	// When the MinKNOW stopped acquiring data (UTC).
	//
	// Unset if the acquisition is still acquiring.
	DataReadEndTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=data_read_end_time,json=dataReadEndTime,proto3" json:"data_read_end_time,omitempty"`
	// When the acquisition terminated (UTC).
	//
	// Unset if the protocol is still running.
	EndTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Summary of acquisition yields.
	//
	// Since 1.12
	YieldSummary *AcquisitionYieldSummary `protobuf:"bytes,8,opt,name=yield_summary,json=yieldSummary,proto3" json:"yield_summary,omitempty"`
	// Summary of the configuration settings for a run.
	//
	// Since 1.14
	ConfigSummary        *AcquisitionConfigSummary `protobuf:"bytes,9,opt,name=config_summary,json=configSummary,proto3" json:"config_summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AcquisitionRunInfo) Reset()         { *m = AcquisitionRunInfo{} }
func (m *AcquisitionRunInfo) String() string { return proto.CompactTextString(m) }
func (*AcquisitionRunInfo) ProtoMessage()    {}
func (*AcquisitionRunInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{14}
}

func (m *AcquisitionRunInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcquisitionRunInfo.Unmarshal(m, b)
}
func (m *AcquisitionRunInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcquisitionRunInfo.Marshal(b, m, deterministic)
}
func (m *AcquisitionRunInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquisitionRunInfo.Merge(m, src)
}
func (m *AcquisitionRunInfo) XXX_Size() int {
	return xxx_messageInfo_AcquisitionRunInfo.Size(m)
}
func (m *AcquisitionRunInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquisitionRunInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AcquisitionRunInfo proto.InternalMessageInfo

func (m *AcquisitionRunInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *AcquisitionRunInfo) GetState() AcquisitionState {
	if m != nil {
		return m.State
	}
	return AcquisitionState_ACQUISITION_STARTING
}

func (m *AcquisitionRunInfo) GetFinishingState() FinishingState {
	if m != nil {
		return m.FinishingState
	}
	return FinishingState_FINISHING_UNKNOWN
}

func (m *AcquisitionRunInfo) GetStopReason() AcquisitionStopReason {
	if m != nil {
		return m.StopReason
	}
	return AcquisitionStopReason_STOPPED_NOT_SET
}

func (m *AcquisitionRunInfo) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *AcquisitionRunInfo) GetDataReadStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.DataReadStartTime
	}
	return nil
}

func (m *AcquisitionRunInfo) GetDataReadEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.DataReadEndTime
	}
	return nil
}

func (m *AcquisitionRunInfo) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *AcquisitionRunInfo) GetYieldSummary() *AcquisitionYieldSummary {
	if m != nil {
		return m.YieldSummary
	}
	return nil
}

func (m *AcquisitionRunInfo) GetConfigSummary() *AcquisitionConfigSummary {
	if m != nil {
		return m.ConfigSummary
	}
	return nil
}

type ListAcquisitionRunsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAcquisitionRunsRequest) Reset()         { *m = ListAcquisitionRunsRequest{} }
func (m *ListAcquisitionRunsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAcquisitionRunsRequest) ProtoMessage()    {}
func (*ListAcquisitionRunsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{15}
}

func (m *ListAcquisitionRunsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAcquisitionRunsRequest.Unmarshal(m, b)
}
func (m *ListAcquisitionRunsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAcquisitionRunsRequest.Marshal(b, m, deterministic)
}
func (m *ListAcquisitionRunsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAcquisitionRunsRequest.Merge(m, src)
}
func (m *ListAcquisitionRunsRequest) XXX_Size() int {
	return xxx_messageInfo_ListAcquisitionRunsRequest.Size(m)
}
func (m *ListAcquisitionRunsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAcquisitionRunsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAcquisitionRunsRequest proto.InternalMessageInfo

type ListAcquisitionRunsResponse struct {
	RunIds               []string `protobuf:"bytes,1,rep,name=run_ids,json=runIds,proto3" json:"run_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAcquisitionRunsResponse) Reset()         { *m = ListAcquisitionRunsResponse{} }
func (m *ListAcquisitionRunsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAcquisitionRunsResponse) ProtoMessage()    {}
func (*ListAcquisitionRunsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{16}
}

func (m *ListAcquisitionRunsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAcquisitionRunsResponse.Unmarshal(m, b)
}
func (m *ListAcquisitionRunsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAcquisitionRunsResponse.Marshal(b, m, deterministic)
}
func (m *ListAcquisitionRunsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAcquisitionRunsResponse.Merge(m, src)
}
func (m *ListAcquisitionRunsResponse) XXX_Size() int {
	return xxx_messageInfo_ListAcquisitionRunsResponse.Size(m)
}
func (m *ListAcquisitionRunsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAcquisitionRunsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAcquisitionRunsResponse proto.InternalMessageInfo

func (m *ListAcquisitionRunsResponse) GetRunIds() []string {
	if m != nil {
		return m.RunIds
	}
	return nil
}

type GetCurrentAcquisitionRunRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentAcquisitionRunRequest) Reset()         { *m = GetCurrentAcquisitionRunRequest{} }
func (m *GetCurrentAcquisitionRunRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentAcquisitionRunRequest) ProtoMessage()    {}
func (*GetCurrentAcquisitionRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{17}
}

func (m *GetCurrentAcquisitionRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCurrentAcquisitionRunRequest.Unmarshal(m, b)
}
func (m *GetCurrentAcquisitionRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCurrentAcquisitionRunRequest.Marshal(b, m, deterministic)
}
func (m *GetCurrentAcquisitionRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentAcquisitionRunRequest.Merge(m, src)
}
func (m *GetCurrentAcquisitionRunRequest) XXX_Size() int {
	return xxx_messageInfo_GetCurrentAcquisitionRunRequest.Size(m)
}
func (m *GetCurrentAcquisitionRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentAcquisitionRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentAcquisitionRunRequest proto.InternalMessageInfo

type WatchCurrentAcquisitionRunRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchCurrentAcquisitionRunRequest) Reset()         { *m = WatchCurrentAcquisitionRunRequest{} }
func (m *WatchCurrentAcquisitionRunRequest) String() string { return proto.CompactTextString(m) }
func (*WatchCurrentAcquisitionRunRequest) ProtoMessage()    {}
func (*WatchCurrentAcquisitionRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3026ff25b0b43366, []int{18}
}

func (m *WatchCurrentAcquisitionRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchCurrentAcquisitionRunRequest.Unmarshal(m, b)
}
func (m *WatchCurrentAcquisitionRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchCurrentAcquisitionRunRequest.Marshal(b, m, deterministic)
}
func (m *WatchCurrentAcquisitionRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchCurrentAcquisitionRunRequest.Merge(m, src)
}
func (m *WatchCurrentAcquisitionRunRequest) XXX_Size() int {
	return xxx_messageInfo_WatchCurrentAcquisitionRunRequest.Size(m)
}
func (m *WatchCurrentAcquisitionRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchCurrentAcquisitionRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchCurrentAcquisitionRunRequest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ont.rpc.acquisition.MinknowStatus", MinknowStatus_name, MinknowStatus_value)
	proto.RegisterEnum("ont.rpc.acquisition.Option", Option_name, Option_value)
	proto.RegisterEnum("ont.rpc.acquisition.Purpose", Purpose_name, Purpose_value)
	proto.RegisterEnum("ont.rpc.acquisition.AcquisitionState", AcquisitionState_name, AcquisitionState_value)
	proto.RegisterEnum("ont.rpc.acquisition.AcquisitionStopReason", AcquisitionStopReason_name, AcquisitionStopReason_value)
	proto.RegisterEnum("ont.rpc.acquisition.FinishingState", FinishingState_name, FinishingState_value)
	proto.RegisterEnum("ont.rpc.acquisition.StopRequest_DataAction", StopRequest_DataAction_name, StopRequest_DataAction_value)
	proto.RegisterType((*StartRequest)(nil), "ont.rpc.acquisition.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "ont.rpc.acquisition.StartResponse")
	proto.RegisterType((*StopRequest)(nil), "ont.rpc.acquisition.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "ont.rpc.acquisition.StopResponse")
	proto.RegisterType((*WatchForStatusChangeRequest)(nil), "ont.rpc.acquisition.WatchForStatusChangeRequest")
	proto.RegisterType((*WatchForStatusChangeResponse)(nil), "ont.rpc.acquisition.WatchForStatusChangeResponse")
	proto.RegisterType((*CurrentStatusRequest)(nil), "ont.rpc.acquisition.CurrentStatusRequest")
	proto.RegisterType((*CurrentStatusResponse)(nil), "ont.rpc.acquisition.CurrentStatusResponse")
	proto.RegisterType((*GetProgressRequest)(nil), "ont.rpc.acquisition.GetProgressRequest")
	proto.RegisterType((*GetProgressResponse)(nil), "ont.rpc.acquisition.GetProgressResponse")
	proto.RegisterType((*GetProgressResponse_RawPerChannel)(nil), "ont.rpc.acquisition.GetProgressResponse.RawPerChannel")
	proto.RegisterType((*GetAcquisitionRunInfoRequest)(nil), "ont.rpc.acquisition.GetAcquisitionRunInfoRequest")
	proto.RegisterType((*AcquisitionYieldSummary)(nil), "ont.rpc.acquisition.AcquisitionYieldSummary")
	proto.RegisterType((*ChannelStateInfo)(nil), "ont.rpc.acquisition.ChannelStateInfo")
	proto.RegisterType((*ChannelStateInfo_Style)(nil), "ont.rpc.acquisition.ChannelStateInfo.Style")
	proto.RegisterType((*ChannelStateInfo_ChannelState)(nil), "ont.rpc.acquisition.ChannelStateInfo.ChannelState")
	proto.RegisterType((*ChannelStateInfo_Group)(nil), "ont.rpc.acquisition.ChannelStateInfo.Group")
	proto.RegisterType((*AcquisitionConfigSummary)(nil), "ont.rpc.acquisition.AcquisitionConfigSummary")
	proto.RegisterType((*AcquisitionRunInfo)(nil), "ont.rpc.acquisition.AcquisitionRunInfo")
	proto.RegisterType((*ListAcquisitionRunsRequest)(nil), "ont.rpc.acquisition.ListAcquisitionRunsRequest")
	proto.RegisterType((*ListAcquisitionRunsResponse)(nil), "ont.rpc.acquisition.ListAcquisitionRunsResponse")
	proto.RegisterType((*GetCurrentAcquisitionRunRequest)(nil), "ont.rpc.acquisition.GetCurrentAcquisitionRunRequest")
	proto.RegisterType((*WatchCurrentAcquisitionRunRequest)(nil), "ont.rpc.acquisition.WatchCurrentAcquisitionRunRequest")
}

func init() { proto.RegisterFile("minknow/rpc/acquisition.proto", fileDescriptor_3026ff25b0b43366) }

var fileDescriptor_3026ff25b0b43366 = []byte{
	// 2274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x73, 0xdb, 0xc6,
	0x11, 0x17, 0xc5, 0x3f, 0x22, 0x97, 0x7f, 0x04, 0x9d, 0xfe, 0x31, 0xb4, 0x3c, 0xb6, 0x99, 0x36,
	0x51, 0xd4, 0x84, 0x92, 0xd5, 0xd8, 0x69, 0x93, 0xf4, 0x01, 0x26, 0x21, 0x85, 0x35, 0x4d, 0x32,
	0x07, 0x32, 0x1e, 0x7b, 0x3a, 0xbd, 0x81, 0xc0, 0x23, 0x85, 0x31, 0x04, 0xc0, 0xc0, 0xd1, 0x1a,
	0x4d, 0x3b, 0x7d, 0xea, 0x4c, 0x1f, 0xf2, 0x05, 0xfa, 0x11, 0x3a, 0x7d, 0x6e, 0xdf, 0xfb, 0x5d,
	0x3a, 0xd3, 0xcf, 0xd0, 0xc7, 0xce, 0xdd, 0x01, 0x20, 0xc4, 0x90, 0xa6, 0xd2, 0xc9, 0x13, 0x89,
	0xdd, 0xfd, 0xfd, 0x76, 0xef, 0xb0, 0xb7, 0xd8, 0x3d, 0xb8, 0x7f, 0x65, 0x39, 0x6f, 0x1c, 0xf7,
	0xfa, 0xd8, 0xf7, 0xcc, 0x63, 0xc3, 0x7c, 0x3b, 0xb5, 0x02, 0x8b, 0x59, 0xae, 0xd3, 0xf0, 0x7c,
	0x97, 0xb9, 0x68, 0xdb, 0x75, 0x58, 0xc3, 0xf7, 0xcc, 0x46, 0x42, 0x55, 0x7b, 0x30, 0x71, 0xdd,
	0x89, 0x4d, 0x8f, 0x85, 0xc9, 0xc5, 0x74, 0x7c, 0xcc, 0xac, 0x2b, 0x1a, 0x30, 0xe3, 0xca, 0x93,
	0xa8, 0xfa, 0xdf, 0x32, 0x50, 0xd2, 0x99, 0xe1, 0x33, 0x4c, 0xdf, 0x4e, 0x69, 0xc0, 0xd0, 0x29,
	0xec, 0x5e, 0x1b, 0x16, 0x23, 0x53, 0x87, 0x59, 0x36, 0xf1, 0x7c, 0xd7, 0xa4, 0x41, 0x60, 0x39,
	0x93, 0x6a, 0xea, 0x61, 0xea, 0x30, 0x8f, 0xb7, 0xb9, 0x72, 0xc8, 0x75, 0xfd, 0x58, 0x85, 0xbe,
	0x84, 0xda, 0xc8, 0x75, 0x18, 0x11, 0xc0, 0xb1, 0xeb, 0x93, 0x11, 0x7d, 0x67, 0x99, 0x94, 0xf8,
	0xd4, 0x18, 0xdd, 0x54, 0xd7, 0x05, 0x70, 0x8f, 0x5b, 0xbc, 0x34, 0x2c, 0x76, 0xe6, 0xfa, 0x2d,
	0xa1, 0xc6, 0x5c, 0x8b, 0x5a, 0xb0, 0x39, 0xa1, 0x0e, 0xf5, 0x0d, 0xc6, 0xed, 0x3d, 0xd7, 0x67,
	0xd5, 0xf4, 0xc3, 0xd4, 0x61, 0xe5, 0xf4, 0x5e, 0x63, 0xc1, 0x82, 0x1a, 0x3d, 0x8f, 0xff, 0xe0,
	0x4a, 0x84, 0xc1, 0x02, 0x82, 0x7e, 0x07, 0x07, 0x01, 0x75, 0x46, 0x24, 0xe0, 0xab, 0x70, 0x4c,
	0xcb, 0x99, 0x08, 0xe7, 0xe4, 0x8a, 0x32, 0xdf, 0x32, 0x83, 0x6a, 0x66, 0x35, 0xe5, 0x07, 0x9c,
	0x40, 0x8f, 0xf1, 0x3c, 0xba, 0x17, 0x12, 0x8d, 0x86, 0x50, 0x15, 0xec, 0x17, 0x46, 0x40, 0x4d,
	0xc3, 0xb6, 0x39, 0x7d, 0xc4, 0x9c, 0x5d, 0xcd, 0xbc, 0xc7, 0xc1, 0xcf, 0x66, 0xd8, 0x88, 0xf6,
	0x29, 0x6c, 0x78, 0x53, 0xdf, 0x73, 0x03, 0x5a, 0xcd, 0x09, 0x96, 0x83, 0x85, 0x2c, 0x7d, 0x69,
	0x83, 0x23, 0x63, 0xf4, 0x05, 0xe4, 0x0d, 0xc7, 0xb0, 0x6f, 0x02, 0x2b, 0xa8, 0x6e, 0xac, 0x76,
	0x1f, 0x1b, 0xa3, 0xaf, 0xa1, 0x38, 0xb6, 0x6c, 0x4a, 0xdc, 0x29, 0xf3, 0xa6, 0xac, 0x9a, 0x5f,
	0x8d, 0x05, 0x6e, 0xdf, 0x13, 0xe6, 0xf5, 0x8f, 0xa0, 0x1c, 0x66, 0x4a, 0xe0, 0xb9, 0x4e, 0x40,
	0xd1, 0x2e, 0xe4, 0xfc, 0xa9, 0x43, 0xac, 0x91, 0xc8, 0x8d, 0x02, 0xce, 0xfa, 0x53, 0xa7, 0x3d,
	0xaa, 0x7f, 0xbf, 0x0e, 0x45, 0x9d, 0xb9, 0x5e, 0x94, 0x51, 0xaf, 0x61, 0x7b, 0x64, 0x30, 0x83,
	0x18, 0x26, 0xa7, 0x24, 0xae, 0x43, 0x02, 0xe6, 0x7a, 0x02, 0x53, 0x39, 0xfd, 0xc5, 0x42, 0xef,
	0x09, 0x78, 0xa3, 0x65, 0x30, 0x43, 0x15, 0x50, 0xac, 0x8c, 0xe2, 0xff, 0x3d, 0x87, 0xdb, 0xa0,
	0x43, 0x50, 0x12, 0xd9, 0x9a, 0xcc, 0xb7, 0x4a, 0x9c, 0xa8, 0x32, 0xcf, 0xea, 0x50, 0x7e, 0x43,
	0xa9, 0x47, 0x3c, 0xf7, 0x9a, 0xfa, 0xc4, 0x75, 0x44, 0x96, 0xe5, 0x71, 0x91, 0x0b, 0xfb, 0x5c,
	0xd6, 0x73, 0xea, 0x18, 0x60, 0xe6, 0x0d, 0x29, 0x50, 0xd2, 0x07, 0xbd, 0x3e, 0x69, 0x69, 0x67,
	0xea, 0xb0, 0x33, 0x50, 0xd6, 0xd0, 0x1e, 0x20, 0x21, 0x79, 0xae, 0x69, 0x7d, 0xa2, 0x76, 0x3a,
	0xa4, 0xa5, 0x0e, 0x54, 0x25, 0x85, 0x6a, 0xb0, 0x27, 0xe4, 0x67, 0xed, 0x6e, 0x5b, 0xff, 0x86,
	0xf4, 0x71, 0xaf, 0xa9, 0xe9, 0x7a, 0xbb, 0x7b, 0xae, 0xac, 0xd7, 0x2b, 0xfc, 0x7c, 0xf1, 0xd5,
	0xc8, 0x4d, 0xab, 0x3f, 0x86, 0x7b, 0x2f, 0x0d, 0x66, 0x5e, 0x9e, 0xb9, 0xbe, 0xce, 0x0c, 0x36,
	0x0d, 0x9a, 0x97, 0x86, 0x33, 0xa1, 0xd1, 0x66, 0x21, 0xc8, 0xc4, 0xbb, 0x93, 0xc7, 0xe2, 0x7f,
	0xfd, 0x35, 0x1c, 0x2c, 0x86, 0x84, 0xef, 0xe1, 0x4b, 0xc8, 0x05, 0x42, 0x1e, 0xee, 0x69, 0x7d,
	0xe1, 0x9e, 0xbe, 0x90, 0xd5, 0x43, 0x32, 0xe0, 0x10, 0x51, 0xdf, 0x83, 0x9d, 0xe6, 0xd4, 0xf7,
	0xa9, 0xc3, 0x42, 0x85, 0x8c, 0xa3, 0xae, 0xc3, 0xee, 0x9c, 0xfc, 0x27, 0x70, 0xb6, 0x03, 0xe8,
	0x9c, 0xb2, 0xbe, 0xef, 0x4e, 0x7c, 0x1a, 0xc4, 0xae, 0xfe, 0x95, 0x82, 0xed, 0x5b, 0xe2, 0xd0,
	0xd3, 0xef, 0x61, 0xd3, 0x37, 0xae, 0x89, 0x47, 0x7d, 0x62, 0x5e, 0x1a, 0x8e, 0x43, 0x6d, 0xe1,
	0xb2, 0x78, 0xfa, 0x74, 0xa1, 0xcb, 0x05, 0x14, 0x0d, 0x6c, 0x5c, 0xf7, 0xa9, 0xdf, 0x94, 0x68,
	0x5c, 0xf6, 0x93, 0x8f, 0xb5, 0x36, 0x94, 0x6f, 0xe9, 0x51, 0x0d, 0xf2, 0x82, 0xd0, 0xa7, 0x32,
	0xa3, 0x33, 0x38, 0x7e, 0x46, 0x07, 0x50, 0x08, 0x6b, 0x21, 0x1d, 0x89, 0x0c, 0xcb, 0xe0, 0x99,
	0xa0, 0xfe, 0x04, 0x0e, 0xce, 0x29, 0x53, 0x67, 0xd1, 0xe0, 0xa9, 0xd3, 0x76, 0xc6, 0x6e, 0xf4,
	0x56, 0x97, 0x9c, 0x94, 0x7f, 0x66, 0x61, 0x3f, 0x01, 0x7a, 0x65, 0x51, 0x7b, 0xa4, 0x4f, 0xaf,
	0xae, 0x0c, 0xff, 0x06, 0xdd, 0x07, 0x10, 0x15, 0xcc, 0x74, 0xa7, 0x0e, 0x13, 0xb0, 0x34, 0x2e,
	0x70, 0x49, 0x93, 0x0b, 0xd0, 0xa7, 0x80, 0xae, 0x7d, 0x8b, 0x31, 0xea, 0x90, 0x84, 0xd9, 0xba,
	0x30, 0x53, 0x42, 0x0d, 0x8e, 0xad, 0xbf, 0x82, 0x5a, 0x54, 0xbb, 0xe8, 0x88, 0x78, 0x46, 0x10,
	0x24, 0x51, 0x69, 0x81, 0xda, 0x9f, 0x59, 0xf4, 0x0d, 0xbe, 0x87, 0x8b, 0xc1, 0x63, 0x23, 0x3c,
	0x68, 0x21, 0x38, 0x33, 0x0f, 0x3e, 0x33, 0xe4, 0x91, 0x93, 0x60, 0x15, 0xee, 0x27, 0xc0, 0xc1,
	0x1b, 0xcb, 0xf3, 0xe8, 0x28, 0x89, 0x07, 0x81, 0x4f, 0x78, 0xd0, 0xa5, 0xcd, 0x8c, 0xe2, 0x13,
	0x50, 0x12, 0x14, 0xfc, 0xaf, 0xac, 0xba, 0x69, 0xbc, 0x39, 0x93, 0xf3, 0xf2, 0x1a, 0xa0, 0xcf,
	0x00, 0x25, 0xbd, 0x19, 0x57, 0x9e, 0x4d, 0x03, 0x51, 0x5c, 0xd3, 0x78, 0x2b, 0xe1, 0x42, 0x2a,
	0xd0, 0x09, 0xec, 0x04, 0xd4, 0xa6, 0x26, 0xe3, 0x21, 0x19, 0xd7, 0x31, 0x60, 0x43, 0x00, 0x50,
	0xa4, 0xc3, 0xc6, 0x75, 0x84, 0xf8, 0x18, 0x36, 0x63, 0x04, 0x7d, 0x47, 0x1d, 0x16, 0x88, 0x2a,
	0x9a, 0xc6, 0x95, 0x48, 0xac, 0x09, 0x29, 0xfa, 0x15, 0x54, 0x69, 0xc0, 0xac, 0x2b, 0x83, 0x5b,
	0xc6, 0x10, 0x19, 0x7c, 0x41, 0x20, 0xf6, 0x62, 0xbd, 0x1e, 0xaa, 0xe5, 0x1a, 0x9e, 0xc0, 0xfe,
	0xc5, 0x0d, 0xa3, 0x01, 0x61, 0x2e, 0xe1, 0x2f, 0x92, 0xf2, 0x8f, 0xf0, 0x68, 0x6a, 0xd2, 0x51,
	0xb5, 0x28, 0x80, 0x3b, 0x42, 0x3d, 0x70, 0x5f, 0x72, 0x65, 0x3f, 0xd4, 0xa1, 0xc7, 0xb0, 0x3b,
	0x07, 0xe3, 0x6f, 0x8a, 0x8e, 0xaa, 0x25, 0xb9, 0x98, 0x24, 0xe8, 0x4c, 0x68, 0xd0, 0x17, 0x50,
	0x9d, 0x83, 0x98, 0x2e, 0x5f, 0x26, 0xa3, 0xa3, 0x6a, 0x59, 0xa0, 0x76, 0x93, 0xa8, 0x66, 0xa4,
	0xac, 0xff, 0x37, 0x0d, 0x4a, 0x78, 0x68, 0xf8, 0x09, 0xa7, 0x3c, 0xd5, 0x51, 0x13, 0x72, 0x13,
	0xdf, 0x9d, 0x7a, 0xbc, 0x30, 0xa4, 0x0f, 0x8b, 0x4b, 0x2a, 0xfb, 0x3c, 0xac, 0x71, 0xce, 0x31,
	0x38, 0x84, 0xd6, 0x5e, 0x42, 0x56, 0x67, 0x37, 0x36, 0x45, 0x3b, 0x90, 0xb5, 0x8d, 0x8b, 0xf0,
	0xc8, 0x17, 0xb0, 0x7c, 0x40, 0x0f, 0xa1, 0x38, 0xa2, 0x81, 0xe9, 0x5b, 0xe2, 0xeb, 0x24, 0xd2,
	0xbd, 0x80, 0x93, 0x22, 0xb4, 0x07, 0x39, 0xd3, 0xb5, 0xdd, 0xa9, 0x2f, 0xb2, 0xba, 0x80, 0xc3,
	0xa7, 0xda, 0x5f, 0x53, 0x50, 0x4a, 0xfa, 0x46, 0x15, 0x58, 0x0f, 0x8f, 0x63, 0x19, 0xaf, 0x5b,
	0x23, 0x5e, 0x78, 0x1d, 0xe3, 0x8a, 0x86, 0x9c, 0xe2, 0x3f, 0x52, 0x21, 0x1b, 0xf0, 0x68, 0x04,
	0xd7, 0x9d, 0x57, 0x24, 0x16, 0x80, 0x25, 0x12, 0x3d, 0x82, 0xd2, 0xc4, 0x76, 0x2f, 0x0c, 0x9b,
	0xb8, 0xfe, 0x88, 0xfa, 0xe2, 0xb8, 0x94, 0x71, 0x51, 0xca, 0x7a, 0x5c, 0x54, 0xfb, 0x7b, 0x0a,
	0xb2, 0x62, 0x17, 0xe2, 0x18, 0x52, 0x8b, 0x62, 0x58, 0xff, 0xbf, 0x63, 0xf8, 0xad, 0x2c, 0xd9,
	0x34, 0xa8, 0xa6, 0xc5, 0x9b, 0x39, 0xbd, 0x1b, 0x47, 0x52, 0x80, 0x43, 0x86, 0xfa, 0x7f, 0x32,
	0x50, 0x4d, 0x94, 0xac, 0xa6, 0xeb, 0x8c, 0xad, 0x49, 0x54, 0xb3, 0x8e, 0x61, 0x3b, 0xd9, 0x22,
	0x51, 0xc7, 0xb8, 0xb0, 0xc3, 0x5a, 0x9a, 0xc7, 0x28, 0xa1, 0xd2, 0xa4, 0x86, 0x1f, 0x27, 0x5e,
	0x0a, 0x02, 0x32, 0xb2, 0x7c, 0x6a, 0x32, 0xd7, 0xbf, 0x09, 0xf7, 0xbf, 0x22, 0xc4, 0xad, 0x48,
	0x8a, 0xbe, 0x86, 0x9a, 0x34, 0x1c, 0x1b, 0xb6, 0x7d, 0x61, 0x98, 0x6f, 0x62, 0x84, 0x15, 0x2e,
	0xab, 0x80, 0xab, 0xc2, 0xe2, 0x2c, 0x34, 0x68, 0xcd, 0xf4, 0xa8, 0x01, 0xdb, 0x63, 0x23, 0x60,
	0x4f, 0x88, 0xe4, 0x88, 0xe2, 0xca, 0x88, 0xb8, 0xb6, 0x84, 0x8a, 0x97, 0x9b, 0x20, 0x0a, 0x2b,
	0xb4, 0x7f, 0x3b, 0x67, 0x9f, 0x9d, 0xd9, 0xbf, 0xbd, 0x65, 0xff, 0x39, 0xec, 0x45, 0x0d, 0xf6,
	0x1c, 0x24, 0x27, 0x20, 0x3b, 0x91, 0xf6, 0x16, 0xea, 0x67, 0x50, 0xb9, 0x98, 0xda, 0x6f, 0x88,
	0x68, 0xc9, 0x3c, 0x83, 0x5d, 0x8a, 0xba, 0x53, 0xc0, 0x25, 0x2e, 0x3d, 0xb3, 0x6c, 0xda, 0x37,
	0xd8, 0x25, 0x3a, 0x82, 0xad, 0x99, 0x55, 0x44, 0x9b, 0x17, 0xb4, 0x9b, 0x91, 0x61, 0xc4, 0xa8,
	0x03, 0x0a, 0xbf, 0x94, 0x44, 0xbc, 0x2e, 0x62, 0x39, 0x63, 0x57, 0x94, 0x9b, 0xe2, 0xe9, 0xcf,
	0xef, 0xf4, 0xd2, 0xb1, 0x62, 0xce, 0x9f, 0xeb, 0x63, 0xd8, 0x91, 0x95, 0x8e, 0x97, 0x09, 0xfe,
	0x0e, 0x89, 0x6f, 0x30, 0xcb, 0x15, 0x85, 0x7b, 0x1d, 0x6f, 0x49, 0xdd, 0xc0, 0xe5, 0xc5, 0x0b,
	0x73, 0x05, 0x7a, 0x00, 0x45, 0x59, 0x48, 0xb9, 0x21, 0x15, 0x45, 0xab, 0x8c, 0x41, 0x8a, 0x30,
	0x3f, 0x7a, 0x1f, 0x42, 0x39, 0x0a, 0x53, 0x7e, 0x03, 0x4a, 0xc2, 0xa4, 0x14, 0x0a, 0x45, 0xd5,
	0xaf, 0xff, 0x23, 0x0b, 0xe8, 0x87, 0x1f, 0xd4, 0x25, 0x5f, 0x52, 0xf4, 0x15, 0x3f, 0x25, 0xdc,
	0xdb, 0xba, 0x68, 0x4a, 0x16, 0x2f, 0x36, 0x41, 0x27, 0x93, 0x5a, 0x62, 0x50, 0x07, 0x36, 0xc7,
	0x96, 0x63, 0x05, 0x97, 0x3c, 0x69, 0x25, 0x0d, 0x08, 0x9a, 0x0f, 0x17, 0xd2, 0x9c, 0x45, 0xb6,
	0x92, 0xa4, 0x32, 0xbe, 0xf5, 0x8c, 0x9e, 0x43, 0x91, 0x77, 0x6d, 0x3c, 0x11, 0x82, 0xb0, 0xcd,
	0xac, 0x9c, 0x1e, 0xad, 0x0e, 0x88, 0xf7, 0x88, 0x1c, 0x81, 0x21, 0x88, 0xff, 0xa3, 0x5f, 0x03,
	0x04, 0xbc, 0xe7, 0x26, 0x7c, 0x6e, 0x13, 0x09, 0x5b, 0x3c, 0xad, 0x35, 0xe4, 0x50, 0xd7, 0x88,
	0xb2, 0xaa, 0x31, 0x88, 0x86, 0x3a, 0x5c, 0x10, 0xd6, 0xfc, 0x19, 0x3d, 0x87, 0x1d, 0xd1, 0x76,
	0x8b, 0x6f, 0x6d, 0x82, 0x24, 0xbb, 0x92, 0x64, 0x8b, 0xe3, 0x78, 0xaa, 0xea, 0x31, 0xd9, 0x39,
	0xa0, 0x19, 0x19, 0x1f, 0x85, 0x04, 0x55, 0x6e, 0x25, 0xd5, 0x66, 0x44, 0xa5, 0x39, 0x23, 0x41,
	0xf4, 0x04, 0xf2, 0x31, 0x7c, 0x63, 0x25, 0x7c, 0x83, 0x86, 0xb0, 0x6f, 0xa1, 0x7c, 0xc3, 0xbb,
	0x23, 0x12, 0xc8, 0x52, 0x23, 0x4e, 0x40, 0xf1, 0xf4, 0xd3, 0x55, 0xdb, 0x9a, 0x6c, 0xa9, 0x70,
	0xe9, 0x26, 0xd9, 0x60, 0x0d, 0xa0, 0x62, 0x8a, 0xea, 0x15, 0x73, 0xca, 0x83, 0xf2, 0xd9, 0x2a,
	0xce, 0x5b, 0x35, 0x0f, 0x97, 0xcd, 0xe4, 0x63, 0xfd, 0x00, 0x6a, 0x1d, 0x2b, 0x98, 0x6b, 0x05,
	0xe3, 0x56, 0xf7, 0x29, 0xdc, 0x5b, 0xa8, 0x0d, 0x3b, 0xde, 0x7d, 0xd8, 0x90, 0xc9, 0x2d, 0xbf,
	0xa1, 0x05, 0x9c, 0x13, 0xd9, 0x1d, 0xd4, 0x1f, 0xc1, 0x83, 0x73, 0xca, 0xc2, 0x86, 0xfc, 0x36,
	0x3a, 0xa2, 0xfe, 0x10, 0x1e, 0x89, 0x21, 0xe1, 0x7d, 0x46, 0x47, 0xaf, 0xa0, 0x7c, 0xab, 0x33,
	0xe7, 0x33, 0x8e, 0x86, 0x71, 0x0f, 0x13, 0x7d, 0xa0, 0x0e, 0x86, 0xba, 0xb2, 0x86, 0x0a, 0x90,
	0xc5, 0x9a, 0xda, 0x7a, 0xa5, 0xa4, 0x50, 0x09, 0xf2, 0xfa, 0x40, 0xc5, 0x03, 0x31, 0xc8, 0xa0,
	0x0a, 0x40, 0x62, 0xb0, 0x49, 0xa3, 0x32, 0x14, 0xe4, 0xbc, 0xc3, 0x1f, 0x33, 0x47, 0x47, 0x90,
	0x93, 0x33, 0x23, 0xca, 0x43, 0x46, 0x1d, 0x0e, 0x7a, 0xca, 0x1a, 0x2a, 0xc2, 0x46, 0xab, 0xad,
	0xab, 0xcf, 0x3a, 0x9a, 0x92, 0xe2, 0xc4, 0x67, 0x3d, 0xdc, 0xd4, 0x94, 0xf5, 0xa3, 0xdf, 0xc0,
	0x46, 0x38, 0xd4, 0xa2, 0x2d, 0x28, 0xf7, 0x06, 0xdf, 0x68, 0x98, 0xf4, 0x87, 0xb8, 0xdf, 0xd3,
	0x35, 0x65, 0x8d, 0x3b, 0xd2, 0xb5, 0x6f, 0x87, 0x5a, 0xb7, 0x29, 0x1d, 0x6f, 0x42, 0xb1, 0xa9,
	0x76, 0xda, 0xcf, 0xb0, 0x3a, 0x68, 0xf7, 0xba, 0x4a, 0xfa, 0xe8, 0x0f, 0xa0, 0xcc, 0x1f, 0x65,
	0x54, 0x85, 0x1d, 0xb5, 0xf9, 0xed, 0xb0, 0xad, 0xb7, 0xb9, 0x11, 0x89, 0xe3, 0x5e, 0x43, 0xfb,
	0xb0, 0x9d, 0xd4, 0xe0, 0x61, 0xb7, 0xcb, 0x15, 0x29, 0xf4, 0x01, 0xec, 0x26, 0x15, 0xb3, 0xc5,
	0xac, 0xcf, 0xab, 0x9a, 0xbd, 0x17, 0xfd, 0x8e, 0x36, 0xd0, 0x5a, 0x4a, 0xfa, 0xe8, 0xdf, 0x29,
	0xd8, 0x5d, 0x78, 0x6e, 0xd1, 0x36, 0x6c, 0xf2, 0x29, 0xb0, 0xaf, 0xb5, 0x48, 0xb7, 0x37, 0x20,
	0xba, 0xc6, 0x47, 0xc6, 0x70, 0x34, 0xe4, 0xc2, 0xa1, 0xae, 0x61, 0x82, 0xf9, 0xca, 0x74, 0x4e,
	0x25, 0x02, 0x98, 0x01, 0x48, 0xab, 0xad, 0x3f, 0x27, 0x7a, 0x5f, 0xe5, 0x3b, 0x84, 0x3e, 0x82,
	0x7a, 0xa4, 0x6a, 0x69, 0xdf, 0xb5, 0x9b, 0x1a, 0x89, 0x1e, 0x13, 0x71, 0x29, 0x69, 0xf4, 0x10,
	0x0e, 0x22, 0x45, 0xb4, 0x64, 0xa2, 0x76, 0xe5, 0x8e, 0xe2, 0x61, 0x57, 0xc9, 0x24, 0x03, 0xe8,
	0xe3, 0xde, 0xa0, 0xd7, 0xec, 0x75, 0x88, 0xd6, 0x6d, 0x69, 0x2d, 0x25, 0xcb, 0x37, 0x6d, 0xce,
	0x8b, 0x48, 0x06, 0x25, 0x77, 0xf4, 0x7d, 0x0a, 0x2a, 0xb7, 0xeb, 0x1c, 0xda, 0x85, 0xad, 0x78,
	0x8b, 0xc8, 0xb0, 0xfb, 0xbc, 0xdb, 0x7b, 0xd9, 0x55, 0xd6, 0x78, 0xa4, 0x33, 0xf1, 0x2c, 0x41,
	0xe2, 0xb0, 0xdb, 0xe7, 0x5d, 0xb5, 0xa3, 0xa4, 0xd0, 0x03, 0xb8, 0x37, 0xb3, 0x7b, 0xa6, 0xea,
	0x5a, 0x53, 0xed, 0x74, 0xf8, 0x7f, 0x9e, 0x6d, 0xba, 0xdc, 0xf3, 0x99, 0x81, 0xae, 0x7e, 0x27,
	0x48, 0xf8, 0x7c, 0x9d, 0x3e, 0xfd, 0x4b, 0xfe, 0xd6, 0xb7, 0x40, 0xa7, 0xfe, 0x3b, 0xcb, 0xa4,
	0xa8, 0x2f, 0x8a, 0xbe, 0xcf, 0xd0, 0xa3, 0x25, 0x97, 0x08, 0xb3, 0x6b, 0xad, 0x5a, 0xfd, 0x7d,
	0x26, 0xe1, 0x68, 0xbe, 0x86, 0x5e, 0xc8, 0xe9, 0x1b, 0x3d, 0x5c, 0x75, 0x2b, 0x51, 0x7b, 0xf4,
	0x1e, 0x8b, 0x98, 0xee, 0xcf, 0x29, 0xd8, 0xbf, 0xe6, 0x87, 0x52, 0x5c, 0x8a, 0xc9, 0x21, 0x58,
	0xcc, 0xb2, 0x13, 0x8a, 0x4e, 0x16, 0x12, 0xbc, 0xe7, 0x6a, 0xa0, 0xf6, 0xf8, 0x47, 0x20, 0xa2,
	0x10, 0x0e, 0x53, 0x27, 0x29, 0x1e, 0xc6, 0x7d, 0x19, 0x86, 0x29, 0x8b, 0x03, 0x49, 0x10, 0x10,
	0x7f, 0xea, 0xa0, 0xa7, 0xcb, 0xa9, 0xdf, 0x57, 0x4f, 0x6a, 0x1f, 0xaf, 0xaa, 0x95, 0xe1, 0x67,
	0xbb, 0xbe, 0x76, 0x92, 0x42, 0x16, 0x54, 0x22, 0xff, 0x72, 0x2b, 0xd0, 0x27, 0x8b, 0x7b, 0x92,
	0x05, 0xf7, 0x11, 0xb5, 0xa3, 0xbb, 0x98, 0xc6, 0x1b, 0x6f, 0x42, 0x69, 0x42, 0x19, 0x1f, 0x9c,
	0xc4, 0x7d, 0x00, 0xfa, 0x78, 0xf5, 0x8d, 0x81, 0x74, 0x73, 0x78, 0xd7, 0xab, 0x85, 0xfa, 0x1a,
	0x62, 0xb0, 0xc3, 0x9d, 0x24, 0xf7, 0x92, 0xf7, 0x5b, 0xe8, 0xf1, 0x32, 0x8e, 0xa5, 0xf7, 0x03,
	0x3f, 0x62, 0x1f, 0xd1, 0x1f, 0x61, 0xd7, 0xb6, 0x82, 0x1f, 0xbc, 0xc2, 0x00, 0x1d, 0x2f, 0xe4,
	0x58, 0xfe, 0x31, 0xaa, 0x9d, 0xdc, 0x1d, 0x10, 0xaf, 0xf9, 0x4f, 0x70, 0x8f, 0xaf, 0x79, 0x59,
	0x1e, 0x7d, 0xbe, 0x6c, 0xe9, 0x3f, 0x51, 0x16, 0x3d, 0x3b, 0x79, 0xdd, 0x08, 0x6f, 0xc1, 0x89,
	0x6d, 0x5d, 0x05, 0xc4, 0x72, 0x18, 0xf5, 0xc7, 0x86, 0x49, 0x8f, 0x97, 0x5c, 0x8e, 0x5f, 0xe4,
	0x44, 0x5b, 0xf1, 0xcb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x27, 0xd8, 0x6e, 0xbe, 0x3e, 0x17,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AcquisitionServiceClient is the client API for AcquisitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AcquisitionServiceClient interface {
	// Starts reading data from the device
	//
	// Some setup calls will need to be made before starting data acquisition: particularly setting the analysis configuration,
	// calibration, read writer and bulk writer config and some device calls such as setting the sampling frequency
	//
	// If acqusition is already running (even in the FINISHING state), this call will fail.
	//
	// On MinIONs and GridIONs, this will enable the ASIC power supply if it is not already enabled.
	// See StopRequest.keep_power_on for more details about the implications of this.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Stops data acquisition.
	//
	// Can specify a stop mode that handles what is done with the data when data acquisition is stopped. Refer to the enum
	// description for documentation on what each mode does.
	//
	// Be aware that this command will return as soon as Minknow enters the FINISHING state and not the READY state.
	// So if starting a new experiment then you will have to wait for the READY state seperately
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Watches for status changes within MinKNOW. Status states are defined from MinknowStatus enum.
	// This is a bi-directional stream where the incoming response stream will return everytime the status has changed
	// and the request stream is used to stop the watcher. Refer to http://www.grpc.io/docs/tutorials/basic/python.html
	// to see how bi-directoional streaming works in grpc, but essentially when calling this function the user will have
	// to pass in a generator that will eventually yield a WatchForStatusChangeRequest(stop=True) to the cpp side.
	// A wrapper class for this is provided in the Python code.
	//
	// The function will first return with the current status that MinKNOW is in. Every response thereafter will be a
	// change from one status to another.
	//
	// The ERROR_STATUS state includes errors during transition between states. If that happens, MinKNOW will
	// try to revert to the READY state. It is up to the user to determine if they wish to try to wait for MinKNOW to
	// correct itself or to try some other course of action
	WatchForStatusChange(ctx context.Context, opts ...grpc.CallOption) (AcquisitionService_WatchForStatusChangeClient, error)
	// Returns current acquisition run info and streams any changes to the current acquisition
	//
	// This call can be made even if there is no current protocol running. In this case, the next streamed
	// response will be the start of a new acquisition and you will receive updates for that acquisition
	// until it finishes.
	//
	// If an acquisition finishes this stream will still continue to run and you will be notified when a new acquisition starts.
	//
	// Note if you begin this stream before any acquisition is started in minknow the state is `ACQUISITION_COMPLETED`.
	//
	// Since 1.13
	WatchCurrentAcquisitionRun(ctx context.Context, in *WatchCurrentAcquisitionRunRequest, opts ...grpc.CallOption) (AcquisitionService_WatchCurrentAcquisitionRunClient, error)
	// Check the current status of MinKNOW.
	CurrentStatus(ctx context.Context, in *CurrentStatusRequest, opts ...grpc.CallOption) (*CurrentStatusResponse, error)
	// Information on how much data has been acquired, processed and written.
	GetProgress(ctx context.Context, in *GetProgressRequest, opts ...grpc.CallOption) (*GetProgressResponse, error)
	// Gets information about an acquisition run, run within this instance on MinKNOW.
	//
	// If no run ID is provided, information about the most recently started acquisition run is
	// provided.
	//
	// Since 1.11
	GetAcquisitionInfo(ctx context.Context, in *GetAcquisitionRunInfoRequest, opts ...grpc.CallOption) (*AcquisitionRunInfo, error)
	// Gets information about all previous protocol runs.
	//
	// Since 1.11
	ListAcquisitionRuns(ctx context.Context, in *ListAcquisitionRunsRequest, opts ...grpc.CallOption) (*ListAcquisitionRunsResponse, error)
	// Returns the name and run id of the currently running acquisition.
	//
	// Will fail with FAILED_PRECONDITION if there is no acquisition running
	//
	// Since 1.11
	GetCurrentAcquisitionRun(ctx context.Context, in *GetCurrentAcquisitionRunRequest, opts ...grpc.CallOption) (*AcquisitionRunInfo, error)
}

type acquisitionServiceClient struct {
	cc *grpc.ClientConn
}

func NewAcquisitionServiceClient(cc *grpc.ClientConn) AcquisitionServiceClient {
	return &acquisitionServiceClient{cc}
}

func (c *acquisitionServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.acquisition.AcquisitionService/start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acquisitionServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.acquisition.AcquisitionService/stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acquisitionServiceClient) WatchForStatusChange(ctx context.Context, opts ...grpc.CallOption) (AcquisitionService_WatchForStatusChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AcquisitionService_serviceDesc.Streams[0], "/ont.rpc.acquisition.AcquisitionService/watch_for_status_change", opts...)
	if err != nil {
		return nil, err
	}
	x := &acquisitionServiceWatchForStatusChangeClient{stream}
	return x, nil
}

type AcquisitionService_WatchForStatusChangeClient interface {
	Send(*WatchForStatusChangeRequest) error
	Recv() (*WatchForStatusChangeResponse, error)
	grpc.ClientStream
}

type acquisitionServiceWatchForStatusChangeClient struct {
	grpc.ClientStream
}

func (x *acquisitionServiceWatchForStatusChangeClient) Send(m *WatchForStatusChangeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *acquisitionServiceWatchForStatusChangeClient) Recv() (*WatchForStatusChangeResponse, error) {
	m := new(WatchForStatusChangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *acquisitionServiceClient) WatchCurrentAcquisitionRun(ctx context.Context, in *WatchCurrentAcquisitionRunRequest, opts ...grpc.CallOption) (AcquisitionService_WatchCurrentAcquisitionRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AcquisitionService_serviceDesc.Streams[1], "/ont.rpc.acquisition.AcquisitionService/watch_current_acquisition_run", opts...)
	if err != nil {
		return nil, err
	}
	x := &acquisitionServiceWatchCurrentAcquisitionRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AcquisitionService_WatchCurrentAcquisitionRunClient interface {
	Recv() (*AcquisitionRunInfo, error)
	grpc.ClientStream
}

type acquisitionServiceWatchCurrentAcquisitionRunClient struct {
	grpc.ClientStream
}

func (x *acquisitionServiceWatchCurrentAcquisitionRunClient) Recv() (*AcquisitionRunInfo, error) {
	m := new(AcquisitionRunInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *acquisitionServiceClient) CurrentStatus(ctx context.Context, in *CurrentStatusRequest, opts ...grpc.CallOption) (*CurrentStatusResponse, error) {
	out := new(CurrentStatusResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.acquisition.AcquisitionService/current_status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acquisitionServiceClient) GetProgress(ctx context.Context, in *GetProgressRequest, opts ...grpc.CallOption) (*GetProgressResponse, error) {
	out := new(GetProgressResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.acquisition.AcquisitionService/get_progress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acquisitionServiceClient) GetAcquisitionInfo(ctx context.Context, in *GetAcquisitionRunInfoRequest, opts ...grpc.CallOption) (*AcquisitionRunInfo, error) {
	out := new(AcquisitionRunInfo)
	err := c.cc.Invoke(ctx, "/ont.rpc.acquisition.AcquisitionService/get_acquisition_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acquisitionServiceClient) ListAcquisitionRuns(ctx context.Context, in *ListAcquisitionRunsRequest, opts ...grpc.CallOption) (*ListAcquisitionRunsResponse, error) {
	out := new(ListAcquisitionRunsResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.acquisition.AcquisitionService/list_acquisition_runs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acquisitionServiceClient) GetCurrentAcquisitionRun(ctx context.Context, in *GetCurrentAcquisitionRunRequest, opts ...grpc.CallOption) (*AcquisitionRunInfo, error) {
	out := new(AcquisitionRunInfo)
	err := c.cc.Invoke(ctx, "/ont.rpc.acquisition.AcquisitionService/get_current_acquisition_run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcquisitionServiceServer is the server API for AcquisitionService service.
type AcquisitionServiceServer interface {
	// Starts reading data from the device
	//
	// Some setup calls will need to be made before starting data acquisition: particularly setting the analysis configuration,
	// calibration, read writer and bulk writer config and some device calls such as setting the sampling frequency
	//
	// If acqusition is already running (even in the FINISHING state), this call will fail.
	//
	// On MinIONs and GridIONs, this will enable the ASIC power supply if it is not already enabled.
	// See StopRequest.keep_power_on for more details about the implications of this.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Stops data acquisition.
	//
	// Can specify a stop mode that handles what is done with the data when data acquisition is stopped. Refer to the enum
	// description for documentation on what each mode does.
	//
	// Be aware that this command will return as soon as Minknow enters the FINISHING state and not the READY state.
	// So if starting a new experiment then you will have to wait for the READY state seperately
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Watches for status changes within MinKNOW. Status states are defined from MinknowStatus enum.
	// This is a bi-directional stream where the incoming response stream will return everytime the status has changed
	// and the request stream is used to stop the watcher. Refer to http://www.grpc.io/docs/tutorials/basic/python.html
	// to see how bi-directoional streaming works in grpc, but essentially when calling this function the user will have
	// to pass in a generator that will eventually yield a WatchForStatusChangeRequest(stop=True) to the cpp side.
	// A wrapper class for this is provided in the Python code.
	//
	// The function will first return with the current status that MinKNOW is in. Every response thereafter will be a
	// change from one status to another.
	//
	// The ERROR_STATUS state includes errors during transition between states. If that happens, MinKNOW will
	// try to revert to the READY state. It is up to the user to determine if they wish to try to wait for MinKNOW to
	// correct itself or to try some other course of action
	WatchForStatusChange(AcquisitionService_WatchForStatusChangeServer) error
	// Returns current acquisition run info and streams any changes to the current acquisition
	//
	// This call can be made even if there is no current protocol running. In this case, the next streamed
	// response will be the start of a new acquisition and you will receive updates for that acquisition
	// until it finishes.
	//
	// If an acquisition finishes this stream will still continue to run and you will be notified when a new acquisition starts.
	//
	// Note if you begin this stream before any acquisition is started in minknow the state is `ACQUISITION_COMPLETED`.
	//
	// Since 1.13
	WatchCurrentAcquisitionRun(*WatchCurrentAcquisitionRunRequest, AcquisitionService_WatchCurrentAcquisitionRunServer) error
	// Check the current status of MinKNOW.
	CurrentStatus(context.Context, *CurrentStatusRequest) (*CurrentStatusResponse, error)
	// Information on how much data has been acquired, processed and written.
	GetProgress(context.Context, *GetProgressRequest) (*GetProgressResponse, error)
	// Gets information about an acquisition run, run within this instance on MinKNOW.
	//
	// If no run ID is provided, information about the most recently started acquisition run is
	// provided.
	//
	// Since 1.11
	GetAcquisitionInfo(context.Context, *GetAcquisitionRunInfoRequest) (*AcquisitionRunInfo, error)
	// Gets information about all previous protocol runs.
	//
	// Since 1.11
	ListAcquisitionRuns(context.Context, *ListAcquisitionRunsRequest) (*ListAcquisitionRunsResponse, error)
	// Returns the name and run id of the currently running acquisition.
	//
	// Will fail with FAILED_PRECONDITION if there is no acquisition running
	//
	// Since 1.11
	GetCurrentAcquisitionRun(context.Context, *GetCurrentAcquisitionRunRequest) (*AcquisitionRunInfo, error)
}

// UnimplementedAcquisitionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAcquisitionServiceServer struct {
}

func (*UnimplementedAcquisitionServiceServer) Start(ctx context.Context, req *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedAcquisitionServiceServer) Stop(ctx context.Context, req *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedAcquisitionServiceServer) WatchForStatusChange(srv AcquisitionService_WatchForStatusChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchForStatusChange not implemented")
}
func (*UnimplementedAcquisitionServiceServer) WatchCurrentAcquisitionRun(req *WatchCurrentAcquisitionRunRequest, srv AcquisitionService_WatchCurrentAcquisitionRunServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchCurrentAcquisitionRun not implemented")
}
func (*UnimplementedAcquisitionServiceServer) CurrentStatus(ctx context.Context, req *CurrentStatusRequest) (*CurrentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentStatus not implemented")
}
func (*UnimplementedAcquisitionServiceServer) GetProgress(ctx context.Context, req *GetProgressRequest) (*GetProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgress not implemented")
}
func (*UnimplementedAcquisitionServiceServer) GetAcquisitionInfo(ctx context.Context, req *GetAcquisitionRunInfoRequest) (*AcquisitionRunInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcquisitionInfo not implemented")
}
func (*UnimplementedAcquisitionServiceServer) ListAcquisitionRuns(ctx context.Context, req *ListAcquisitionRunsRequest) (*ListAcquisitionRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAcquisitionRuns not implemented")
}
func (*UnimplementedAcquisitionServiceServer) GetCurrentAcquisitionRun(ctx context.Context, req *GetCurrentAcquisitionRunRequest) (*AcquisitionRunInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentAcquisitionRun not implemented")
}

func RegisterAcquisitionServiceServer(s *grpc.Server, srv AcquisitionServiceServer) {
	s.RegisterService(&_AcquisitionService_serviceDesc, srv)
}

func _AcquisitionService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquisitionServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.acquisition.AcquisitionService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquisitionServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcquisitionService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquisitionServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.acquisition.AcquisitionService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquisitionServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcquisitionService_WatchForStatusChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AcquisitionServiceServer).WatchForStatusChange(&acquisitionServiceWatchForStatusChangeServer{stream})
}

type AcquisitionService_WatchForStatusChangeServer interface {
	Send(*WatchForStatusChangeResponse) error
	Recv() (*WatchForStatusChangeRequest, error)
	grpc.ServerStream
}

type acquisitionServiceWatchForStatusChangeServer struct {
	grpc.ServerStream
}

func (x *acquisitionServiceWatchForStatusChangeServer) Send(m *WatchForStatusChangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *acquisitionServiceWatchForStatusChangeServer) Recv() (*WatchForStatusChangeRequest, error) {
	m := new(WatchForStatusChangeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AcquisitionService_WatchCurrentAcquisitionRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchCurrentAcquisitionRunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AcquisitionServiceServer).WatchCurrentAcquisitionRun(m, &acquisitionServiceWatchCurrentAcquisitionRunServer{stream})
}

type AcquisitionService_WatchCurrentAcquisitionRunServer interface {
	Send(*AcquisitionRunInfo) error
	grpc.ServerStream
}

type acquisitionServiceWatchCurrentAcquisitionRunServer struct {
	grpc.ServerStream
}

func (x *acquisitionServiceWatchCurrentAcquisitionRunServer) Send(m *AcquisitionRunInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _AcquisitionService_CurrentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquisitionServiceServer).CurrentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.acquisition.AcquisitionService/CurrentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquisitionServiceServer).CurrentStatus(ctx, req.(*CurrentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcquisitionService_GetProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquisitionServiceServer).GetProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.acquisition.AcquisitionService/GetProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquisitionServiceServer).GetProgress(ctx, req.(*GetProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcquisitionService_GetAcquisitionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcquisitionRunInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquisitionServiceServer).GetAcquisitionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.acquisition.AcquisitionService/GetAcquisitionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquisitionServiceServer).GetAcquisitionInfo(ctx, req.(*GetAcquisitionRunInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcquisitionService_ListAcquisitionRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAcquisitionRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquisitionServiceServer).ListAcquisitionRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.acquisition.AcquisitionService/ListAcquisitionRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquisitionServiceServer).ListAcquisitionRuns(ctx, req.(*ListAcquisitionRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcquisitionService_GetCurrentAcquisitionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentAcquisitionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquisitionServiceServer).GetCurrentAcquisitionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.acquisition.AcquisitionService/GetCurrentAcquisitionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquisitionServiceServer).GetCurrentAcquisitionRun(ctx, req.(*GetCurrentAcquisitionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AcquisitionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ont.rpc.acquisition.AcquisitionService",
	HandlerType: (*AcquisitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "start",
			Handler:    _AcquisitionService_Start_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _AcquisitionService_Stop_Handler,
		},
		{
			MethodName: "current_status",
			Handler:    _AcquisitionService_CurrentStatus_Handler,
		},
		{
			MethodName: "get_progress",
			Handler:    _AcquisitionService_GetProgress_Handler,
		},
		{
			MethodName: "get_acquisition_info",
			Handler:    _AcquisitionService_GetAcquisitionInfo_Handler,
		},
		{
			MethodName: "list_acquisition_runs",
			Handler:    _AcquisitionService_ListAcquisitionRuns_Handler,
		},
		{
			MethodName: "get_current_acquisition_run",
			Handler:    _AcquisitionService_GetCurrentAcquisitionRun_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch_for_status_change",
			Handler:       _AcquisitionService_WatchForStatusChange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "watch_current_acquisition_run",
			Handler:       _AcquisitionService_WatchCurrentAcquisitionRun_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow/rpc/acquisition.proto",
}
