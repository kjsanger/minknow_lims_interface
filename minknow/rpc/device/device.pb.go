// Code generated by protoc-gen-go. DO NOT EDIT.
// source: minknow/rpc/device.proto

package device

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	_ "minknow_lims_interface/minknow/rpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetDeviceInfoResponse_DeviceType int32

const (
	GetDeviceInfoResponse_MINION          GetDeviceInfoResponse_DeviceType = 0
	GetDeviceInfoResponse_PROMETHION      GetDeviceInfoResponse_DeviceType = 1
	GetDeviceInfoResponse_GRIDION         GetDeviceInfoResponse_DeviceType = 2
	GetDeviceInfoResponse_PROMETHION_BETA GetDeviceInfoResponse_DeviceType = 3
	GetDeviceInfoResponse_MINION_MK1C     GetDeviceInfoResponse_DeviceType = 4
)

var GetDeviceInfoResponse_DeviceType_name = map[int32]string{
	0: "MINION",
	1: "PROMETHION",
	2: "GRIDION",
	3: "PROMETHION_BETA",
	4: "MINION_MK1C",
}

var GetDeviceInfoResponse_DeviceType_value = map[string]int32{
	"MINION":          0,
	"PROMETHION":      1,
	"GRIDION":         2,
	"PROMETHION_BETA": 3,
	"MINION_MK1C":     4,
}

func (x GetDeviceInfoResponse_DeviceType) String() string {
	return proto.EnumName(GetDeviceInfoResponse_DeviceType_name, int32(x))
}

func (GetDeviceInfoResponse_DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{2, 0}
}

type GetDeviceStateResponse_DeviceState int32

const (
	GetDeviceStateResponse_DEVICE_DISCONNECTED GetDeviceStateResponse_DeviceState = 0
	GetDeviceStateResponse_DEVICE_READY        GetDeviceStateResponse_DeviceState = 1
)

var GetDeviceStateResponse_DeviceState_name = map[int32]string{
	0: "DEVICE_DISCONNECTED",
	1: "DEVICE_READY",
}

var GetDeviceStateResponse_DeviceState_value = map[string]int32{
	"DEVICE_DISCONNECTED": 0,
	"DEVICE_READY":        1,
}

func (x GetDeviceStateResponse_DeviceState) String() string {
	return proto.EnumName(GetDeviceStateResponse_DeviceState_name, int32(x))
}

func (GetDeviceStateResponse_DeviceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{4, 0}
}

// Describes the configuration of a channel on the device.
//
// Note that this is a lossy representation. The device-specific APIs provide more precise
// information. This only describes common configurations, and omits anything that doesn't impact
// the received signal.
type ChannelConfiguration struct {
	// The currently-connected well.
	//
	// Wells are counted from 1. 0 indicates that no well is connected. 5 indicates some non-generic configuration
	// such as ground for a minion or connecting all wells on promethion
	//
	// Note that MinKNOW can return channel configurations where the well number is larger than the
	// ``max_well_count`` value returned by :meth:`DeviceService.get_device_info`. This indicates
	// that some other connection has been made (for example, PromethIONs can simultaneously
	// connect all wells, and MinIONs can connect to ground).
	Well uint32 `protobuf:"varint,1,opt,name=well,proto3" json:"well,omitempty"`
	// Whether the test current is connected to the integrator (measurement circuit).
	//
	// The signal will be a steady test current produced on the device. This can be used for
	// calibration or to test the device integration circuits.
	TestCurrent bool `protobuf:"varint,2,opt,name=test_current,json=testCurrent,proto3" json:"test_current,omitempty"`
	// Please DO NOT USE - does not have a practical use, will be removed in later versions.
	// Whether the regeneration current is connected to the integrator (measurement circuit).
	//
	// This is similar to unblock, but uses a different circuit. It is not available on MinION or
	// GridION devices.
	Regeneration bool `protobuf:"varint,3,opt,name=regeneration,proto3" json:"regeneration,omitempty"`
	// Whether the unblock voltage is connected to the integrator (measurement circuit).
	//
	// Provides a reverse potential across the connected well. This can be used to drive molecules
	// back out of the well.
	Unblock              bool     `protobuf:"varint,4,opt,name=unblock,proto3" json:"unblock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelConfiguration) Reset()         { *m = ChannelConfiguration{} }
func (m *ChannelConfiguration) String() string { return proto.CompactTextString(m) }
func (*ChannelConfiguration) ProtoMessage()    {}
func (*ChannelConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{0}
}

func (m *ChannelConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelConfiguration.Unmarshal(m, b)
}
func (m *ChannelConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelConfiguration.Marshal(b, m, deterministic)
}
func (m *ChannelConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelConfiguration.Merge(m, src)
}
func (m *ChannelConfiguration) XXX_Size() int {
	return xxx_messageInfo_ChannelConfiguration.Size(m)
}
func (m *ChannelConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelConfiguration proto.InternalMessageInfo

func (m *ChannelConfiguration) GetWell() uint32 {
	if m != nil {
		return m.Well
	}
	return 0
}

func (m *ChannelConfiguration) GetTestCurrent() bool {
	if m != nil {
		return m.TestCurrent
	}
	return false
}

func (m *ChannelConfiguration) GetRegeneration() bool {
	if m != nil {
		return m.Regeneration
	}
	return false
}

func (m *ChannelConfiguration) GetUnblock() bool {
	if m != nil {
		return m.Unblock
	}
	return false
}

type GetDeviceInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceInfoRequest) Reset()         { *m = GetDeviceInfoRequest{} }
func (m *GetDeviceInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeviceInfoRequest) ProtoMessage()    {}
func (*GetDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{1}
}

func (m *GetDeviceInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceInfoRequest.Unmarshal(m, b)
}
func (m *GetDeviceInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetDeviceInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceInfoRequest.Merge(m, src)
}
func (m *GetDeviceInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetDeviceInfoRequest.Size(m)
}
func (m *GetDeviceInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceInfoRequest proto.InternalMessageInfo

type GetDeviceInfoResponse struct {
	// A unique identifier for the device.
	//
	// This is the identifier of the device MinKNOW was started for. It will only communicate
	// with this device.
	//
	// Note that simulated device IDs are only unique for this host, not globally.
	//
	// This value will be set even if the device is not currently connected (assuming MinKNOW
	// was started by the manager service).
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The type of the device.
	DeviceType GetDeviceInfoResponse_DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=ont.rpc.device.GetDeviceInfoResponse_DeviceType" json:"device_type,omitempty"`
	// Whether the device is simulated.
	//
	// If this is true, there is no physical device - MinKNOW is simluating it. If it is false,
	// MinKNOW will be acquiring data from a real device.
	IsSimulated bool `protobuf:"varint,3,opt,name=is_simulated,json=isSimulated,proto3" json:"is_simulated,omitempty"`
	// The maximum number of channels supported by the device.
	//
	// Each channel provides a signal from the device. For example, a MinION supports up to 512
	// channels, and so can provide 512 simultaneous streams of data.
	//
	// This value is fixed for a given device type. Note, however, that a flow cell might be attached
	// that has a smaller number of channels.
	MaxChannelCount uint32 `protobuf:"varint,4,opt,name=max_channel_count,json=maxChannelCount,proto3" json:"max_channel_count,omitempty"`
	// The maximum number of wells connected to each channel.
	//
	// A well is a discrete location on the device where sensing can take place. Normally, each well
	// should have a single nanopore in it.
	//
	// For example, a MinION supports up to 4 wells per channel, allowing for 2048 wells in total.
	// So the value of this for a MinION will be 4.
	//
	// This value is fixed for a given device type. Note, however, that a flow cell might be attached
	// that has a smaller number of wells on each channel.
	MaxWellsPerChannel uint32 `protobuf:"varint,5,opt,name=max_wells_per_channel,json=maxWellsPerChannel,proto3" json:"max_wells_per_channel,omitempty"`
	// Whether the set_temperature() method can be expected to work.
	//
	// On some systems, not all connected devices have the ability to control their own temperature,
	// as temperature controls are managed in groups. If this field is true, this device can control
	// its own temperature. If it it false, it cannot, and the temperature will be maintained at a
	// pre-determined temperature.
	CanSetTemperature bool `protobuf:"varint,6,opt,name=can_set_temperature,json=canSetTemperature,proto3" json:"can_set_temperature,omitempty"`
	// The range of uncalibrated data values.
	//
	// This is the number of distinct signal values that can be produced by the device's analog to
	// digital converter (ADC).
	Digitisation uint32 `protobuf:"varint,7,opt,name=digitisation,proto3" json:"digitisation,omitempty"`
	// If this is true then the physical location of the device is described by the location_index
	// field below. Examples of hardware that will know their physical locations are the devices in
	// GridIONs and PromethIONs. This is false for MinIONs as these devices are not constrained
	// to physical location.
	LocationDefined bool `protobuf:"varint,8,opt,name=location_defined,json=locationDefined,proto3" json:"location_defined,omitempty"`
	// An index that describes the position of the device in a linear order of devices (from
	// 0 onwards.)
	LocationIndex        uint32                                    `protobuf:"varint,9,opt,name=location_index,json=locationIndex,proto3" json:"location_index,omitempty"`
	FirmwareVersion      []*GetDeviceInfoResponse_ComponentVersion `protobuf:"bytes,10,rep,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *GetDeviceInfoResponse) Reset()         { *m = GetDeviceInfoResponse{} }
func (m *GetDeviceInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetDeviceInfoResponse) ProtoMessage()    {}
func (*GetDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{2}
}

func (m *GetDeviceInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceInfoResponse.Unmarshal(m, b)
}
func (m *GetDeviceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetDeviceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceInfoResponse.Merge(m, src)
}
func (m *GetDeviceInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetDeviceInfoResponse.Size(m)
}
func (m *GetDeviceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceInfoResponse proto.InternalMessageInfo

func (m *GetDeviceInfoResponse) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *GetDeviceInfoResponse) GetDeviceType() GetDeviceInfoResponse_DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return GetDeviceInfoResponse_MINION
}

func (m *GetDeviceInfoResponse) GetIsSimulated() bool {
	if m != nil {
		return m.IsSimulated
	}
	return false
}

func (m *GetDeviceInfoResponse) GetMaxChannelCount() uint32 {
	if m != nil {
		return m.MaxChannelCount
	}
	return 0
}

func (m *GetDeviceInfoResponse) GetMaxWellsPerChannel() uint32 {
	if m != nil {
		return m.MaxWellsPerChannel
	}
	return 0
}

func (m *GetDeviceInfoResponse) GetCanSetTemperature() bool {
	if m != nil {
		return m.CanSetTemperature
	}
	return false
}

func (m *GetDeviceInfoResponse) GetDigitisation() uint32 {
	if m != nil {
		return m.Digitisation
	}
	return 0
}

func (m *GetDeviceInfoResponse) GetLocationDefined() bool {
	if m != nil {
		return m.LocationDefined
	}
	return false
}

func (m *GetDeviceInfoResponse) GetLocationIndex() uint32 {
	if m != nil {
		return m.LocationIndex
	}
	return 0
}

func (m *GetDeviceInfoResponse) GetFirmwareVersion() []*GetDeviceInfoResponse_ComponentVersion {
	if m != nil {
		return m.FirmwareVersion
	}
	return nil
}

// Firmware versions of components associated with this device
//
// Depending on the hardware, there may be several components associated with
// this device, each with their own firmware version.
type GetDeviceInfoResponse_ComponentVersion struct {
	// Description of the component that has firmware
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// The firmware version, if this cannot be determined for a component where
	// the firmware version would usually be available, this will contain
	// "Unknown"
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceInfoResponse_ComponentVersion) Reset() {
	*m = GetDeviceInfoResponse_ComponentVersion{}
}
func (m *GetDeviceInfoResponse_ComponentVersion) String() string { return proto.CompactTextString(m) }
func (*GetDeviceInfoResponse_ComponentVersion) ProtoMessage()    {}
func (*GetDeviceInfoResponse_ComponentVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{2, 0}
}

func (m *GetDeviceInfoResponse_ComponentVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceInfoResponse_ComponentVersion.Unmarshal(m, b)
}
func (m *GetDeviceInfoResponse_ComponentVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceInfoResponse_ComponentVersion.Marshal(b, m, deterministic)
}
func (m *GetDeviceInfoResponse_ComponentVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceInfoResponse_ComponentVersion.Merge(m, src)
}
func (m *GetDeviceInfoResponse_ComponentVersion) XXX_Size() int {
	return xxx_messageInfo_GetDeviceInfoResponse_ComponentVersion.Size(m)
}
func (m *GetDeviceInfoResponse_ComponentVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceInfoResponse_ComponentVersion.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceInfoResponse_ComponentVersion proto.InternalMessageInfo

func (m *GetDeviceInfoResponse_ComponentVersion) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *GetDeviceInfoResponse_ComponentVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type GetDeviceStateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceStateRequest) Reset()         { *m = GetDeviceStateRequest{} }
func (m *GetDeviceStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeviceStateRequest) ProtoMessage()    {}
func (*GetDeviceStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{3}
}

func (m *GetDeviceStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceStateRequest.Unmarshal(m, b)
}
func (m *GetDeviceStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceStateRequest.Marshal(b, m, deterministic)
}
func (m *GetDeviceStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceStateRequest.Merge(m, src)
}
func (m *GetDeviceStateRequest) XXX_Size() int {
	return xxx_messageInfo_GetDeviceStateRequest.Size(m)
}
func (m *GetDeviceStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceStateRequest proto.InternalMessageInfo

type GetDeviceStateResponse struct {
	DeviceState          GetDeviceStateResponse_DeviceState `protobuf:"varint,1,opt,name=device_state,json=deviceState,proto3,enum=ont.rpc.device.GetDeviceStateResponse_DeviceState" json:"device_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *GetDeviceStateResponse) Reset()         { *m = GetDeviceStateResponse{} }
func (m *GetDeviceStateResponse) String() string { return proto.CompactTextString(m) }
func (*GetDeviceStateResponse) ProtoMessage()    {}
func (*GetDeviceStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{4}
}

func (m *GetDeviceStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceStateResponse.Unmarshal(m, b)
}
func (m *GetDeviceStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceStateResponse.Marshal(b, m, deterministic)
}
func (m *GetDeviceStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceStateResponse.Merge(m, src)
}
func (m *GetDeviceStateResponse) XXX_Size() int {
	return xxx_messageInfo_GetDeviceStateResponse.Size(m)
}
func (m *GetDeviceStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceStateResponse proto.InternalMessageInfo

func (m *GetDeviceStateResponse) GetDeviceState() GetDeviceStateResponse_DeviceState {
	if m != nil {
		return m.DeviceState
	}
	return GetDeviceStateResponse_DEVICE_DISCONNECTED
}

type StreamDeviceStateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamDeviceStateRequest) Reset()         { *m = StreamDeviceStateRequest{} }
func (m *StreamDeviceStateRequest) String() string { return proto.CompactTextString(m) }
func (*StreamDeviceStateRequest) ProtoMessage()    {}
func (*StreamDeviceStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{5}
}

func (m *StreamDeviceStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamDeviceStateRequest.Unmarshal(m, b)
}
func (m *StreamDeviceStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamDeviceStateRequest.Marshal(b, m, deterministic)
}
func (m *StreamDeviceStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDeviceStateRequest.Merge(m, src)
}
func (m *StreamDeviceStateRequest) XXX_Size() int {
	return xxx_messageInfo_StreamDeviceStateRequest.Size(m)
}
func (m *StreamDeviceStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDeviceStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDeviceStateRequest proto.InternalMessageInfo

type GetFlowCellInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFlowCellInfoRequest) Reset()         { *m = GetFlowCellInfoRequest{} }
func (m *GetFlowCellInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetFlowCellInfoRequest) ProtoMessage()    {}
func (*GetFlowCellInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{6}
}

func (m *GetFlowCellInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFlowCellInfoRequest.Unmarshal(m, b)
}
func (m *GetFlowCellInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFlowCellInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetFlowCellInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlowCellInfoRequest.Merge(m, src)
}
func (m *GetFlowCellInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetFlowCellInfoRequest.Size(m)
}
func (m *GetFlowCellInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlowCellInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlowCellInfoRequest proto.InternalMessageInfo

type GetFlowCellInfoResponse struct {
	// Whether there is a flow cell present.
	//
	// If both this and has_adapter are false, none of the other fields will contain useful
	// information.
	HasFlowCell bool `protobuf:"varint,1,opt,name=has_flow_cell,json=hasFlowCell,proto3" json:"has_flow_cell,omitempty"`
	// The number of channels currently supported by the device.
	//
	// This may be smaller than the ``max_channel_count`` value returned by get_device_info(),
	// depending on the attached flow cell.
	ChannelCount uint32 `protobuf:"varint,2,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
	// The number of wells currently supported by the device.
	//
	// This may be smaller than the ``max_wells_per_channel`` value returned by get_device_info(),
	// depending on the attached flow cell.
	WellsPerChannel uint32 `protobuf:"varint,3,opt,name=wells_per_channel,json=wellsPerChannel,proto3" json:"wells_per_channel,omitempty"`
	// The unique identifier for the flow cell.
	//
	// This should be same as the value printed onto the flow cell casing. Not all flow cells will
	// have the flow cell ID recorded in a way that MinKNOW can read. In those cases, this will be an
	// empty string, even though the user may be able to see a printed identifier on the flow cell.
	FlowCellId string `protobuf:"bytes,4,opt,name=flow_cell_id,json=flowCellId,proto3" json:"flow_cell_id,omitempty"`
	// The unique identifier for the ASIC.
	//
	// Note: This member is deprecated in favour of asic_id_str - it does not work for PromethION
	//       asics, and will be removed in future.
	//
	// This is a numerical value uniquely identifying the ASIC embedded in the flow cell. It will
	// always be set when a flow cell is present.
	//
	// The intended use for this is to track whether the flow cell has been replaced between calls to
	// get_flow_cell_info(). Any other use is unsupported (see the caveats below).
	//
	// Caveats:
	//
	// * This value will not mean anything to an end-user.
	// * There is no guarantee that this field will contain the same numerical identifier across
	//   MinKNOW versions, even with the same flow cell.
	// * An ASIC can be recycled into a new flow cell, so this identifier may be re-used in the
	//   future (although it can be considered unique for the duration of a protocol run).
	AsicId uint32 `protobuf:"varint,5,opt,name=asic_id,json=asicId,proto3" json:"asic_id,omitempty"`
	// The unique identifier for the ASIC (formatted as string).
	//
	// This is a value uniquely identifying the ASIC embedded in the flow cell. It will
	// always be set when a flow cell is present.
	//
	// The intended use for this is to track the identity of the asic in the flow cell, eg. for
	// displaying to users during production of chips.
	//
	// Caveats:
	//
	// * This value will not mean anything to a customer.
	// * There is no guarantee that this field will contain the same identifier across
	//   MinKNOW versions, even with the same flow cell.
	// * An ASIC can be recycled into a new flow cell, so this identifier may be re-used in the
	//   future (although it can be considered unique for the duration of a protocol run).
	AsicIdStr string `protobuf:"bytes,13,opt,name=asic_id_str,json=asicIdStr,proto3" json:"asic_id_str,omitempty"`
	// The product code for the flow cell.
	//
	// This should be the code displayed in the shop where the flow cell was bought. Not all
	// flow cells will have the product code recorded in a way that MinKNOW can read. In those cases,
	// this will be an empty string.
	ProductCode string `protobuf:"bytes,6,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// A unique identifier for the flow cell, which the user can specify.
	//
	// In the event a flow cell does not have an eeprom, this field contains data input by the user
	// using set_flow_cell_info to record required data.
	//
	// Since 1.12
	UserSpecifiedFlowCellId string `protobuf:"bytes,7,opt,name=user_specified_flow_cell_id,json=userSpecifiedFlowCellId,proto3" json:"user_specified_flow_cell_id,omitempty"`
	// A product code for the flow cell, which the user can specify.
	//
	// This should be the code displayed in the shop where the flow cell was bought. Not all
	// flow cells have an eeprom, in the event they don't, the user can specify using this id using
	// set_flow_cell_info.
	//
	// Since 1.12
	UserSpecifiedProductCode string `protobuf:"bytes,8,opt,name=user_specified_product_code,json=userSpecifiedProductCode,proto3" json:"user_specified_product_code,omitempty"`
	// Whether there is a flongle adapter.
	//
	// If this is true, the adapter_id, channel_count and wells_per_channel fields should all
	// provide useful information, even if has_flow_cell is false.
	HasAdapter bool `protobuf:"varint,9,opt,name=has_adapter,json=hasAdapter,proto3" json:"has_adapter,omitempty"`
	// The unique identifier of an attached flongle adatper.
	//
	// This should be same as the value printed onto the adapter casing.
	AdapterId string `protobuf:"bytes,10,opt,name=adapter_id,json=adapterId,proto3" json:"adapter_id,omitempty"`
	// Used to make the field nullable, since the null value is not protobuf's default.
	//
	// Types that are valid to be assigned to TemperatureOffsetNullable:
	//	*GetFlowCellInfoResponse_TemperatureOffset
	TemperatureOffsetNullable isGetFlowCellInfoResponse_TemperatureOffsetNullable `protobuf_oneof:"temperature_offset_nullable"`
	// The version of the ASIC contained in the flowcell (if specified by the hardware).
	//
	// This can be used to determine if the hardware should support certain features
	// added to only newer ASICs.
	//
	// Possible values include: "IA02C", "IA02D", or if the value is not readable on the
	// current hardware an empty string is returned.
	//
	// Since 1.14
	AsicVersion          string   `protobuf:"bytes,12,opt,name=asic_version,json=asicVersion,proto3" json:"asic_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFlowCellInfoResponse) Reset()         { *m = GetFlowCellInfoResponse{} }
func (m *GetFlowCellInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetFlowCellInfoResponse) ProtoMessage()    {}
func (*GetFlowCellInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{7}
}

func (m *GetFlowCellInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFlowCellInfoResponse.Unmarshal(m, b)
}
func (m *GetFlowCellInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFlowCellInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetFlowCellInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlowCellInfoResponse.Merge(m, src)
}
func (m *GetFlowCellInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetFlowCellInfoResponse.Size(m)
}
func (m *GetFlowCellInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlowCellInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlowCellInfoResponse proto.InternalMessageInfo

func (m *GetFlowCellInfoResponse) GetHasFlowCell() bool {
	if m != nil {
		return m.HasFlowCell
	}
	return false
}

func (m *GetFlowCellInfoResponse) GetChannelCount() uint32 {
	if m != nil {
		return m.ChannelCount
	}
	return 0
}

func (m *GetFlowCellInfoResponse) GetWellsPerChannel() uint32 {
	if m != nil {
		return m.WellsPerChannel
	}
	return 0
}

func (m *GetFlowCellInfoResponse) GetFlowCellId() string {
	if m != nil {
		return m.FlowCellId
	}
	return ""
}

func (m *GetFlowCellInfoResponse) GetAsicId() uint32 {
	if m != nil {
		return m.AsicId
	}
	return 0
}

func (m *GetFlowCellInfoResponse) GetAsicIdStr() string {
	if m != nil {
		return m.AsicIdStr
	}
	return ""
}

func (m *GetFlowCellInfoResponse) GetProductCode() string {
	if m != nil {
		return m.ProductCode
	}
	return ""
}

func (m *GetFlowCellInfoResponse) GetUserSpecifiedFlowCellId() string {
	if m != nil {
		return m.UserSpecifiedFlowCellId
	}
	return ""
}

func (m *GetFlowCellInfoResponse) GetUserSpecifiedProductCode() string {
	if m != nil {
		return m.UserSpecifiedProductCode
	}
	return ""
}

func (m *GetFlowCellInfoResponse) GetHasAdapter() bool {
	if m != nil {
		return m.HasAdapter
	}
	return false
}

func (m *GetFlowCellInfoResponse) GetAdapterId() string {
	if m != nil {
		return m.AdapterId
	}
	return ""
}

type isGetFlowCellInfoResponse_TemperatureOffsetNullable interface {
	isGetFlowCellInfoResponse_TemperatureOffsetNullable()
}

type GetFlowCellInfoResponse_TemperatureOffset struct {
	TemperatureOffset float32 `protobuf:"fixed32,11,opt,name=temperature_offset,json=temperatureOffset,proto3,oneof"`
}

func (*GetFlowCellInfoResponse_TemperatureOffset) isGetFlowCellInfoResponse_TemperatureOffsetNullable() {
}

func (m *GetFlowCellInfoResponse) GetTemperatureOffsetNullable() isGetFlowCellInfoResponse_TemperatureOffsetNullable {
	if m != nil {
		return m.TemperatureOffsetNullable
	}
	return nil
}

func (m *GetFlowCellInfoResponse) GetTemperatureOffset() float32 {
	if x, ok := m.GetTemperatureOffsetNullable().(*GetFlowCellInfoResponse_TemperatureOffset); ok {
		return x.TemperatureOffset
	}
	return 0
}

func (m *GetFlowCellInfoResponse) GetAsicVersion() string {
	if m != nil {
		return m.AsicVersion
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetFlowCellInfoResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetFlowCellInfoResponse_TemperatureOffset)(nil),
	}
}

type StreamFlowCellInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamFlowCellInfoRequest) Reset()         { *m = StreamFlowCellInfoRequest{} }
func (m *StreamFlowCellInfoRequest) String() string { return proto.CompactTextString(m) }
func (*StreamFlowCellInfoRequest) ProtoMessage()    {}
func (*StreamFlowCellInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{8}
}

func (m *StreamFlowCellInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamFlowCellInfoRequest.Unmarshal(m, b)
}
func (m *StreamFlowCellInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamFlowCellInfoRequest.Marshal(b, m, deterministic)
}
func (m *StreamFlowCellInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamFlowCellInfoRequest.Merge(m, src)
}
func (m *StreamFlowCellInfoRequest) XXX_Size() int {
	return xxx_messageInfo_StreamFlowCellInfoRequest.Size(m)
}
func (m *StreamFlowCellInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamFlowCellInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamFlowCellInfoRequest proto.InternalMessageInfo

type SetUserSpecifiedFlowCellIdRequest struct {
	// A unique identifier for the flow cell, which the user can specify.
	//
	// In the event a flow cell does not have an eeprom, this field can be used by the user
	// to record their flow_cell_id.
	//
	// Since 1.12
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUserSpecifiedFlowCellIdRequest) Reset()         { *m = SetUserSpecifiedFlowCellIdRequest{} }
func (m *SetUserSpecifiedFlowCellIdRequest) String() string { return proto.CompactTextString(m) }
func (*SetUserSpecifiedFlowCellIdRequest) ProtoMessage()    {}
func (*SetUserSpecifiedFlowCellIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{9}
}

func (m *SetUserSpecifiedFlowCellIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUserSpecifiedFlowCellIdRequest.Unmarshal(m, b)
}
func (m *SetUserSpecifiedFlowCellIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUserSpecifiedFlowCellIdRequest.Marshal(b, m, deterministic)
}
func (m *SetUserSpecifiedFlowCellIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserSpecifiedFlowCellIdRequest.Merge(m, src)
}
func (m *SetUserSpecifiedFlowCellIdRequest) XXX_Size() int {
	return xxx_messageInfo_SetUserSpecifiedFlowCellIdRequest.Size(m)
}
func (m *SetUserSpecifiedFlowCellIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserSpecifiedFlowCellIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserSpecifiedFlowCellIdRequest proto.InternalMessageInfo

func (m *SetUserSpecifiedFlowCellIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SetUserSpecifiedFlowCellIdResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUserSpecifiedFlowCellIdResponse) Reset()         { *m = SetUserSpecifiedFlowCellIdResponse{} }
func (m *SetUserSpecifiedFlowCellIdResponse) String() string { return proto.CompactTextString(m) }
func (*SetUserSpecifiedFlowCellIdResponse) ProtoMessage()    {}
func (*SetUserSpecifiedFlowCellIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{10}
}

func (m *SetUserSpecifiedFlowCellIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUserSpecifiedFlowCellIdResponse.Unmarshal(m, b)
}
func (m *SetUserSpecifiedFlowCellIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUserSpecifiedFlowCellIdResponse.Marshal(b, m, deterministic)
}
func (m *SetUserSpecifiedFlowCellIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserSpecifiedFlowCellIdResponse.Merge(m, src)
}
func (m *SetUserSpecifiedFlowCellIdResponse) XXX_Size() int {
	return xxx_messageInfo_SetUserSpecifiedFlowCellIdResponse.Size(m)
}
func (m *SetUserSpecifiedFlowCellIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserSpecifiedFlowCellIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserSpecifiedFlowCellIdResponse proto.InternalMessageInfo

type SetUserSpecifiedProductCodeRequest struct {
	// A product code for the flow cell, which the user can specify.
	//
	// In the event a flow cell does not have an eeprom, the user can specify product code here.
	//
	// Since 1.12
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUserSpecifiedProductCodeRequest) Reset()         { *m = SetUserSpecifiedProductCodeRequest{} }
func (m *SetUserSpecifiedProductCodeRequest) String() string { return proto.CompactTextString(m) }
func (*SetUserSpecifiedProductCodeRequest) ProtoMessage()    {}
func (*SetUserSpecifiedProductCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{11}
}

func (m *SetUserSpecifiedProductCodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUserSpecifiedProductCodeRequest.Unmarshal(m, b)
}
func (m *SetUserSpecifiedProductCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUserSpecifiedProductCodeRequest.Marshal(b, m, deterministic)
}
func (m *SetUserSpecifiedProductCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserSpecifiedProductCodeRequest.Merge(m, src)
}
func (m *SetUserSpecifiedProductCodeRequest) XXX_Size() int {
	return xxx_messageInfo_SetUserSpecifiedProductCodeRequest.Size(m)
}
func (m *SetUserSpecifiedProductCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserSpecifiedProductCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserSpecifiedProductCodeRequest proto.InternalMessageInfo

func (m *SetUserSpecifiedProductCodeRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type SetUserSpecifiedProductCodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUserSpecifiedProductCodeResponse) Reset()         { *m = SetUserSpecifiedProductCodeResponse{} }
func (m *SetUserSpecifiedProductCodeResponse) String() string { return proto.CompactTextString(m) }
func (*SetUserSpecifiedProductCodeResponse) ProtoMessage()    {}
func (*SetUserSpecifiedProductCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{12}
}

func (m *SetUserSpecifiedProductCodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUserSpecifiedProductCodeResponse.Unmarshal(m, b)
}
func (m *SetUserSpecifiedProductCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUserSpecifiedProductCodeResponse.Marshal(b, m, deterministic)
}
func (m *SetUserSpecifiedProductCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserSpecifiedProductCodeResponse.Merge(m, src)
}
func (m *SetUserSpecifiedProductCodeResponse) XXX_Size() int {
	return xxx_messageInfo_SetUserSpecifiedProductCodeResponse.Size(m)
}
func (m *SetUserSpecifiedProductCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserSpecifiedProductCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserSpecifiedProductCodeResponse proto.InternalMessageInfo

type GetChannelsLayoutRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChannelsLayoutRequest) Reset()         { *m = GetChannelsLayoutRequest{} }
func (m *GetChannelsLayoutRequest) String() string { return proto.CompactTextString(m) }
func (*GetChannelsLayoutRequest) ProtoMessage()    {}
func (*GetChannelsLayoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{13}
}

func (m *GetChannelsLayoutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChannelsLayoutRequest.Unmarshal(m, b)
}
func (m *GetChannelsLayoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChannelsLayoutRequest.Marshal(b, m, deterministic)
}
func (m *GetChannelsLayoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelsLayoutRequest.Merge(m, src)
}
func (m *GetChannelsLayoutRequest) XXX_Size() int {
	return xxx_messageInfo_GetChannelsLayoutRequest.Size(m)
}
func (m *GetChannelsLayoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelsLayoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelsLayoutRequest proto.InternalMessageInfo

type GetChannelsLayoutResponse struct {
	ChannelRecords       []*ChannelRecord `protobuf:"bytes,1,rep,name=channel_records,json=channelRecords,proto3" json:"channel_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetChannelsLayoutResponse) Reset()         { *m = GetChannelsLayoutResponse{} }
func (m *GetChannelsLayoutResponse) String() string { return proto.CompactTextString(m) }
func (*GetChannelsLayoutResponse) ProtoMessage()    {}
func (*GetChannelsLayoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{14}
}

func (m *GetChannelsLayoutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChannelsLayoutResponse.Unmarshal(m, b)
}
func (m *GetChannelsLayoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChannelsLayoutResponse.Marshal(b, m, deterministic)
}
func (m *GetChannelsLayoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelsLayoutResponse.Merge(m, src)
}
func (m *GetChannelsLayoutResponse) XXX_Size() int {
	return xxx_messageInfo_GetChannelsLayoutResponse.Size(m)
}
func (m *GetChannelsLayoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelsLayoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelsLayoutResponse proto.InternalMessageInfo

func (m *GetChannelsLayoutResponse) GetChannelRecords() []*ChannelRecord {
	if m != nil {
		return m.ChannelRecords
	}
	return nil
}

type ChannelRecord struct {
	Id                   uint32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MuxRecords           []*ChannelRecord_MuxRecord `protobuf:"bytes,3,rep,name=mux_records,json=muxRecords,proto3" json:"mux_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ChannelRecord) Reset()         { *m = ChannelRecord{} }
func (m *ChannelRecord) String() string { return proto.CompactTextString(m) }
func (*ChannelRecord) ProtoMessage()    {}
func (*ChannelRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{15}
}

func (m *ChannelRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelRecord.Unmarshal(m, b)
}
func (m *ChannelRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelRecord.Marshal(b, m, deterministic)
}
func (m *ChannelRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelRecord.Merge(m, src)
}
func (m *ChannelRecord) XXX_Size() int {
	return xxx_messageInfo_ChannelRecord.Size(m)
}
func (m *ChannelRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelRecord proto.InternalMessageInfo

func (m *ChannelRecord) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelRecord) GetMuxRecords() []*ChannelRecord_MuxRecord {
	if m != nil {
		return m.MuxRecords
	}
	return nil
}

type ChannelRecord_MuxRecord struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PhysX                uint32   `protobuf:"varint,2,opt,name=phys_x,json=physX,proto3" json:"phys_x,omitempty"`
	PhysY                uint32   `protobuf:"varint,3,opt,name=phys_y,json=physY,proto3" json:"phys_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelRecord_MuxRecord) Reset()         { *m = ChannelRecord_MuxRecord{} }
func (m *ChannelRecord_MuxRecord) String() string { return proto.CompactTextString(m) }
func (*ChannelRecord_MuxRecord) ProtoMessage()    {}
func (*ChannelRecord_MuxRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d057f97a394d8b2, []int{15, 0}
}

func (m *ChannelRecord_MuxRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelRecord_MuxRecord.Unmarshal(m, b)
}
func (m *ChannelRecord_MuxRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelRecord_MuxRecord.Marshal(b, m, deterministic)
}
func (m *ChannelRecord_MuxRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelRecord_MuxRecord.Merge(m, src)
}
func (m *ChannelRecord_MuxRecord) XXX_Size() int {
	return xxx_messageInfo_ChannelRecord_MuxRecord.Size(m)
}
func (m *ChannelRecord_MuxRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelRecord_MuxRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelRecord_MuxRecord proto.InternalMessageInfo

func (m *ChannelRecord_MuxRecord) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelRecord_MuxRecord) GetPhysX() uint32 {
	if m != nil {
		return m.PhysX
	}
	return 0
}

func (m *ChannelRecord_MuxRecord) GetPhysY() uint32 {
	if m != nil {
		return m.PhysY
	}
	return 0
}

func init() {
	proto.RegisterEnum("ont.rpc.device.GetDeviceInfoResponse_DeviceType", GetDeviceInfoResponse_DeviceType_name, GetDeviceInfoResponse_DeviceType_value)
	proto.RegisterEnum("ont.rpc.device.GetDeviceStateResponse_DeviceState", GetDeviceStateResponse_DeviceState_name, GetDeviceStateResponse_DeviceState_value)
	proto.RegisterType((*ChannelConfiguration)(nil), "ont.rpc.device.ChannelConfiguration")
	proto.RegisterType((*GetDeviceInfoRequest)(nil), "ont.rpc.device.GetDeviceInfoRequest")
	proto.RegisterType((*GetDeviceInfoResponse)(nil), "ont.rpc.device.GetDeviceInfoResponse")
	proto.RegisterType((*GetDeviceInfoResponse_ComponentVersion)(nil), "ont.rpc.device.GetDeviceInfoResponse.ComponentVersion")
	proto.RegisterType((*GetDeviceStateRequest)(nil), "ont.rpc.device.GetDeviceStateRequest")
	proto.RegisterType((*GetDeviceStateResponse)(nil), "ont.rpc.device.GetDeviceStateResponse")
	proto.RegisterType((*StreamDeviceStateRequest)(nil), "ont.rpc.device.StreamDeviceStateRequest")
	proto.RegisterType((*GetFlowCellInfoRequest)(nil), "ont.rpc.device.GetFlowCellInfoRequest")
	proto.RegisterType((*GetFlowCellInfoResponse)(nil), "ont.rpc.device.GetFlowCellInfoResponse")
	proto.RegisterType((*StreamFlowCellInfoRequest)(nil), "ont.rpc.device.StreamFlowCellInfoRequest")
	proto.RegisterType((*SetUserSpecifiedFlowCellIdRequest)(nil), "ont.rpc.device.SetUserSpecifiedFlowCellIdRequest")
	proto.RegisterType((*SetUserSpecifiedFlowCellIdResponse)(nil), "ont.rpc.device.SetUserSpecifiedFlowCellIdResponse")
	proto.RegisterType((*SetUserSpecifiedProductCodeRequest)(nil), "ont.rpc.device.SetUserSpecifiedProductCodeRequest")
	proto.RegisterType((*SetUserSpecifiedProductCodeResponse)(nil), "ont.rpc.device.SetUserSpecifiedProductCodeResponse")
	proto.RegisterType((*GetChannelsLayoutRequest)(nil), "ont.rpc.device.GetChannelsLayoutRequest")
	proto.RegisterType((*GetChannelsLayoutResponse)(nil), "ont.rpc.device.GetChannelsLayoutResponse")
	proto.RegisterType((*ChannelRecord)(nil), "ont.rpc.device.ChannelRecord")
	proto.RegisterType((*ChannelRecord_MuxRecord)(nil), "ont.rpc.device.ChannelRecord.MuxRecord")
}

func init() { proto.RegisterFile("minknow/rpc/device.proto", fileDescriptor_8d057f97a394d8b2) }

var fileDescriptor_8d057f97a394d8b2 = []byte{
	// 1294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xeb, 0x72, 0xdb, 0xc4,
	0x17, 0x8f, 0x1c, 0x37, 0x97, 0xe3, 0xf8, 0x92, 0x4d, 0xd3, 0xa8, 0xce, 0x3f, 0x6d, 0xaa, 0x36,
	0xff, 0x26, 0x65, 0xc6, 0x69, 0xd3, 0x19, 0x06, 0x66, 0x80, 0x99, 0xc6, 0x76, 0x5b, 0x03, 0x49,
	0x8a, 0x9c, 0x16, 0x0a, 0x1f, 0x16, 0x45, 0x5a, 0x3b, 0x9a, 0xca, 0x5a, 0xb1, 0xbb, 0xaa, 0x9d,
	0x37, 0x60, 0x80, 0xf7, 0x60, 0x78, 0x00, 0x3e, 0xc1, 0x03, 0xf0, 0x58, 0xcc, 0xae, 0x56, 0x8e,
	0x7c, 0xc9, 0xa5, 0xc3, 0x27, 0xef, 0xfe, 0xce, 0xfd, 0xe8, 0x9c, 0x9f, 0x2c, 0x30, 0x7b, 0x7e,
	0xf8, 0x2e, 0xa4, 0xfd, 0x5d, 0x16, 0xb9, 0xbb, 0x1e, 0x79, 0xef, 0xbb, 0xa4, 0x16, 0x31, 0x2a,
	0x28, 0x2a, 0xd1, 0x50, 0xd4, 0x58, 0xe4, 0xd6, 0x12, 0xb4, 0xba, 0x91, 0xd5, 0x64, 0x91, 0x8b,
	0x69, 0x24, 0x7c, 0x1a, 0xf2, 0x44, 0xbd, 0x7a, 0xa7, 0x4b, 0x69, 0x37, 0x20, 0xbb, 0xea, 0x76,
	0x12, 0x77, 0x76, 0xfb, 0xcc, 0x89, 0x22, 0xc2, 0xb4, 0xdc, 0xfa, 0xd5, 0x80, 0x9b, 0xf5, 0x53,
	0x27, 0x0c, 0x49, 0x50, 0xa7, 0x61, 0xc7, 0xef, 0xc6, 0xcc, 0x91, 0xf6, 0x08, 0x41, 0xbe, 0x4f,
	0x82, 0xc0, 0x34, 0x36, 0x8d, 0xed, 0xa2, 0xad, 0xce, 0xe8, 0x1e, 0x2c, 0x09, 0xc2, 0x05, 0x76,
	0x63, 0xc6, 0x48, 0x28, 0xcc, 0xdc, 0xa6, 0xb1, 0xbd, 0x60, 0x17, 0x24, 0x56, 0x4f, 0x20, 0x64,
	0xc1, 0x12, 0x23, 0x5d, 0x12, 0x92, 0xc4, 0x8d, 0x39, 0xab, 0x54, 0x46, 0x30, 0x64, 0xc2, 0x7c,
	0x1c, 0x9e, 0x04, 0xd4, 0x7d, 0x67, 0xe6, 0x95, 0x38, 0xbd, 0x5a, 0xb7, 0xe0, 0xe6, 0x0b, 0x22,
	0x1a, 0xaa, 0xb2, 0x56, 0xd8, 0xa1, 0x36, 0xf9, 0x29, 0x26, 0x5c, 0x58, 0x7f, 0xdd, 0x80, 0xd5,
	0x31, 0x01, 0x8f, 0x68, 0xc8, 0x09, 0x5a, 0x87, 0xc5, 0xa4, 0x11, 0xd8, 0xf7, 0x54, 0xae, 0x8b,
	0xf6, 0x42, 0x02, 0xb4, 0x3c, 0xf4, 0x0d, 0x14, 0xb4, 0x50, 0x9c, 0x45, 0x44, 0xa5, 0x5b, 0xda,
	0x7b, 0x5c, 0x1b, 0xed, 0x60, 0x6d, 0xaa, 0xe3, 0x5a, 0x02, 0x1d, 0x9f, 0x45, 0xc4, 0x06, 0x6f,
	0x78, 0x96, 0x2d, 0xf0, 0x39, 0xe6, 0x7e, 0x2f, 0x0e, 0x1c, 0x41, 0x3c, 0x5d, 0x5f, 0xc1, 0xe7,
	0xed, 0x14, 0x42, 0x8f, 0x60, 0xb9, 0xe7, 0x0c, 0xb0, 0x9b, 0x74, 0x15, 0xbb, 0x34, 0x0e, 0x85,
	0x2a, 0xb4, 0x68, 0x97, 0x7b, 0xce, 0x60, 0xd8, 0xed, 0x38, 0x14, 0xe8, 0x09, 0xac, 0x4a, 0x5d,
	0xd9, 0x5d, 0x8e, 0x23, 0xc2, 0x52, 0x2b, 0xf3, 0x86, 0xd2, 0x47, 0x3d, 0x67, 0xf0, 0xad, 0x94,
	0xbd, 0x22, 0x4c, 0xdb, 0xa1, 0x1a, 0xac, 0xb8, 0x4e, 0x88, 0x39, 0x11, 0x58, 0x90, 0x5e, 0x24,
	0x9b, 0x1a, 0x33, 0x62, 0xce, 0xa9, 0x44, 0x96, 0x5d, 0x27, 0x6c, 0x13, 0x71, 0x7c, 0x2e, 0x90,
	0x4f, 0xc4, 0xf3, 0xbb, 0xbe, 0xf0, 0x79, 0xf2, 0x44, 0xe6, 0x95, 0xe7, 0x11, 0x0c, 0xed, 0x40,
	0x25, 0xa0, 0xae, 0x3a, 0x63, 0x8f, 0x74, 0xfc, 0x90, 0x78, 0xe6, 0x82, 0x72, 0x58, 0x4e, 0xf1,
	0x46, 0x02, 0xa3, 0x2d, 0x28, 0x0d, 0x55, 0xfd, 0xd0, 0x23, 0x03, 0x73, 0x51, 0x39, 0x2c, 0xa6,
	0x68, 0x4b, 0x82, 0xc8, 0x81, 0x4a, 0xc7, 0x67, 0xbd, 0xbe, 0xc3, 0x08, 0x7e, 0x4f, 0x18, 0x97,
	0x91, 0x61, 0x73, 0x76, 0xbb, 0xb0, 0xf7, 0xf1, 0xf5, 0xfa, 0x5f, 0xa7, 0xbd, 0x88, 0x86, 0x24,
	0x14, 0x6f, 0x12, 0x6b, 0xbb, 0x9c, 0xfa, 0xd3, 0x40, 0xf5, 0x4b, 0xa8, 0x8c, 0x2b, 0xa1, 0xff,
	0xc1, 0xa2, 0x9b, 0x62, 0x7a, 0x1c, 0xce, 0x01, 0x39, 0x78, 0x69, 0x2e, 0x39, 0x25, 0x4b, 0xaf,
	0xd6, 0x0f, 0x00, 0xe7, 0x0f, 0x1c, 0x01, 0xcc, 0x1d, 0xb4, 0x0e, 0x5b, 0x47, 0x87, 0x95, 0x19,
	0x54, 0x02, 0x78, 0x65, 0x1f, 0x1d, 0x34, 0x8f, 0x5f, 0xca, 0xbb, 0x81, 0x0a, 0x30, 0xff, 0xc2,
	0x6e, 0x35, 0xe4, 0x25, 0x87, 0x56, 0xa0, 0x7c, 0x2e, 0xc4, 0xfb, 0xcd, 0xe3, 0x67, 0x95, 0x59,
	0x54, 0x86, 0x42, 0x62, 0x8d, 0x0f, 0xbe, 0x7a, 0x52, 0xaf, 0xe4, 0xad, 0xb5, 0xcc, 0xf0, 0xb6,
	0x85, 0x23, 0x48, 0x3a, 0xd6, 0x7f, 0x18, 0x70, 0x6b, 0x5c, 0xa2, 0xe7, 0xfa, 0x35, 0x2c, 0xe9,
	0xd1, 0xe5, 0x12, 0x57, 0xb5, 0x94, 0xf6, 0xf6, 0x2e, 0xec, 0xdd, 0x88, 0x75, 0x2d, 0x8b, 0xe9,
	0x15, 0x50, 0x17, 0xeb, 0x13, 0x28, 0x64, 0x64, 0x68, 0x0d, 0x56, 0x1a, 0xcd, 0x37, 0xad, 0x7a,
	0x13, 0x37, 0x5a, 0xed, 0xfa, 0xd1, 0xe1, 0x61, 0xb3, 0x7e, 0xdc, 0x6c, 0x54, 0x66, 0x50, 0x05,
	0x96, 0xb4, 0xc0, 0x6e, 0x3e, 0x6b, 0xbc, 0xad, 0x18, 0x56, 0x15, 0xcc, 0xb6, 0x60, 0xc4, 0xe9,
	0x4d, 0xa9, 0xc3, 0x54, 0x65, 0x3c, 0x0f, 0x68, 0xbf, 0x4e, 0x82, 0x20, 0xbb, 0xb8, 0x7f, 0xe7,
	0x61, 0x6d, 0x42, 0xa4, 0x4b, 0xb4, 0xa0, 0x78, 0xea, 0x70, 0xdc, 0x09, 0x68, 0x1f, 0xbb, 0x29,
	0xd5, 0x2c, 0xd8, 0x85, 0x53, 0x87, 0xa7, 0xfa, 0xe8, 0x3e, 0x14, 0x47, 0xf7, 0x28, 0x97, 0x4c,
	0xaf, 0x9b, 0x5d, 0xa2, 0x47, 0xb0, 0x3c, 0xb9, 0x40, 0xb3, 0xc9, 0xc2, 0xf5, 0xc7, 0xb6, 0x67,
	0x13, 0x96, 0x86, 0x01, 0x25, 0x65, 0xe4, 0xd5, 0x1c, 0x40, 0x27, 0x4d, 0xd0, 0x43, 0x6b, 0x30,
	0xef, 0x70, 0xdf, 0x95, 0xc2, 0x64, 0x09, 0xe7, 0xe4, 0xb5, 0xe5, 0xa1, 0x3b, 0x50, 0xd0, 0x02,
	0xcc, 0x05, 0x33, 0x8b, 0xc9, 0x74, 0x25, 0xc2, 0xb6, 0x60, 0x92, 0x1a, 0x22, 0x46, 0xbd, 0xd8,
	0x15, 0xd8, 0xa5, 0x5e, 0xb2, 0x91, 0x8b, 0x76, 0x41, 0x63, 0x75, 0xea, 0x11, 0xf4, 0x19, 0xac,
	0xc7, 0x9c, 0x30, 0xcc, 0x23, 0xe2, 0xfa, 0x1d, 0x9f, 0x78, 0x78, 0x24, 0x99, 0x79, 0x65, 0xb1,
	0x26, 0x55, 0xda, 0xa9, 0xc6, 0xf3, 0xf3, 0xcc, 0x3e, 0x9f, 0xb0, 0x1e, 0x89, 0xb7, 0xa0, 0xac,
	0xcd, 0x11, 0xeb, 0x57, 0x99, 0xe0, 0x77, 0x41, 0xb6, 0x16, 0x3b, 0x9e, 0x13, 0x09, 0xc2, 0xd4,
	0xda, 0x2e, 0xd8, 0x70, 0xea, 0xf0, 0x67, 0x09, 0x82, 0x36, 0x00, 0xb4, 0x50, 0x26, 0x03, 0xba,
	0xbe, 0x04, 0x69, 0x79, 0x68, 0x17, 0x50, 0x86, 0x70, 0x30, 0xed, 0x74, 0x38, 0x11, 0x66, 0x61,
	0xd3, 0xd8, 0xce, 0xbd, 0x9c, 0xb1, 0x97, 0x33, 0xb2, 0x23, 0x25, 0x92, 0x0d, 0x51, 0x0d, 0x4b,
	0x77, 0x6e, 0x29, 0x69, 0x88, 0xc4, 0xf4, 0xbe, 0xee, 0x6f, 0xc0, 0xfa, 0xa4, 0x4f, 0x1c, 0xc6,
	0x41, 0xe0, 0x9c, 0x04, 0xc4, 0x5a, 0x87, 0xdb, 0xc9, 0xd0, 0x4d, 0x9b, 0xad, 0x4f, 0xe1, 0x5e,
	0x9b, 0x88, 0xd7, 0xd3, 0x9b, 0xa5, 0x95, 0xd0, 0x4d, 0xc8, 0xa5, 0x2f, 0x86, 0xfd, 0xfc, 0xcf,
	0x7f, 0x9a, 0x86, 0x9d, 0xf3, 0x3d, 0xeb, 0x01, 0x58, 0x97, 0x99, 0x26, 0x03, 0x6a, 0x7d, 0x31,
	0xa9, 0x95, 0xe9, 0x67, 0x1a, 0xc1, 0x84, 0xbc, 0x6a, 0x7f, 0x36, 0x86, 0x42, 0xac, 0x2d, 0xb8,
	0x7f, 0xa9, 0xbd, 0x0e, 0x53, 0x05, 0xf3, 0x05, 0x11, 0x7a, 0x40, 0xf9, 0xd7, 0xce, 0x19, 0x8d,
	0x45, 0x5a, 0xa3, 0x0b, 0xb7, 0xa7, 0xc8, 0xf4, 0x02, 0x3d, 0x87, 0x72, 0xba, 0x1c, 0x8c, 0xb8,
	0x94, 0x79, 0xdc, 0x34, 0x14, 0xc5, 0x6e, 0x8c, 0xd3, 0x84, 0x76, 0x60, 0x2b, 0x2d, 0xbb, 0xe4,
	0x66, 0xaf, 0xdc, 0xfa, 0xc7, 0x80, 0xe2, 0x88, 0x06, 0x2a, 0x0d, 0xbb, 0x56, 0x94, 0xfd, 0x92,
	0x7f, 0x06, 0x42, 0xa7, 0x47, 0x34, 0x6b, 0xaa, 0x33, 0x7a, 0x09, 0x85, 0x5e, 0x3c, 0x18, 0x46,
	0x9e, 0x55, 0x91, 0x1f, 0x5e, 0x1a, 0xb9, 0x76, 0x10, 0x0f, 0x74, 0x0e, 0xd0, 0x4b, 0x8f, 0xbc,
	0xda, 0x82, 0xc5, 0xa1, 0x60, 0x22, 0xf4, 0x2a, 0xcc, 0x45, 0xa7, 0x67, 0x1c, 0x0f, 0xf4, 0xea,
	0xdf, 0x90, 0xb7, 0xef, 0x86, 0xf0, 0x99, 0x5e, 0x74, 0x05, 0xbf, 0xdd, 0xfb, 0x7d, 0x1e, 0x8a,
	0x9a, 0xa0, 0x08, 0x93, 0x3f, 0xe8, 0x47, 0x28, 0x77, 0x89, 0xc0, 0xe9, 0x9f, 0x84, 0xb0, 0x43,
	0xd1, 0x83, 0x2b, 0xde, 0x40, 0xaa, 0xf5, 0xd5, 0xad, 0x6b, 0xbd, 0xa7, 0xac, 0x19, 0xe4, 0x42,
	0x25, 0x13, 0x41, 0xd1, 0x35, 0xda, 0xba, 0x8a, 0xa8, 0x93, 0x18, 0xff, 0xbf, 0x1e, 0x9f, 0x5b,
	0x33, 0xe8, 0x1d, 0xac, 0x70, 0xb5, 0x09, 0xa3, 0x71, 0xb6, 0xc7, 0x1d, 0x5c, 0xc4, 0xd1, 0xd7,
	0x0f, 0xf5, 0xd8, 0x40, 0x5d, 0x40, 0xb2, 0xa2, 0x0c, 0x37, 0xc9, 0xb6, 0x4d, 0xf3, 0x30, 0x65,
	0x2f, 0xab, 0x0f, 0xaf, 0xd4, 0x1b, 0x56, 0x45, 0x61, 0x55, 0x57, 0x35, 0x16, 0x6b, 0x67, 0x7a,
	0x5d, 0xff, 0x2d, 0xdc, 0x63, 0x03, 0xfd, 0x62, 0xc0, 0x5d, 0xc9, 0x30, 0x97, 0xb0, 0x30, 0x7a,
	0x32, 0x11, 0xfb, 0x2a, 0x96, 0xa9, 0xee, 0x7d, 0x88, 0xc9, 0xb0, 0xfa, 0xdf, 0xa6, 0x27, 0x93,
	0x25, 0x75, 0x74, 0xa5, 0xe7, 0x49, 0x46, 0xaa, 0x3e, 0xfd, 0x20, 0x9b, 0x61, 0x3a, 0x01, 0xac,
	0xc8, 0xa7, 0xae, 0xc9, 0x81, 0xe3, 0x40, 0xb1, 0xcd, 0xe4, 0x88, 0x5d, 0x44, 0x56, 0xd5, 0x9d,
	0x6b, 0x68, 0xa6, 0xd1, 0xf6, 0x3f, 0xfa, 0x7e, 0x47, 0x7f, 0xb9, 0xe0, 0xc0, 0xef, 0x71, 0xec,
	0x87, 0x82, 0xb0, 0x8e, 0xe3, 0x92, 0xdd, 0xc9, 0x4f, 0x9f, 0x93, 0x39, 0xf5, 0xb1, 0xf2, 0xf4,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x13, 0x4b, 0x73, 0x17, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServiceClient interface {
	// Get information about the device this MinKNOW instance was started for.
	//
	// In normal circumstances (ie: when using the manager service), a new MinKNOW instance
	// is started for each available device. This call provides information about this device.
	//
	// The information returned by this call will not change (providing the MinKNOW instance
	// was started by the manager service).
	GetDeviceInfo(ctx context.Context, in *GetDeviceInfoRequest, opts ...grpc.CallOption) (*GetDeviceInfoResponse, error)
	// Get information about the current device state.
	//
	// Information in this call may change as the device is used with MinKNOW, for example,
	// by unplugging or plugging in the device.
	// Since 1.12
	GetDeviceState(ctx context.Context, in *GetDeviceStateRequest, opts ...grpc.CallOption) (*GetDeviceStateResponse, error)
	// Streaming version of get_device_state
	//
	// Since 1.13
	StreamDeviceState(ctx context.Context, in *StreamDeviceStateRequest, opts ...grpc.CallOption) (DeviceService_StreamDeviceStateClient, error)
	// Get information about the flow cell (if any).
	//
	// This provides information about the flow_cell attached to the device (described by
	// get_device_info()), if any.
	GetFlowCellInfo(ctx context.Context, in *GetFlowCellInfoRequest, opts ...grpc.CallOption) (*GetFlowCellInfoResponse, error)
	// Streaming version of get_flow_cell_info
	//
	// Since 1.13
	StreamFlowCellInfo(ctx context.Context, in *StreamFlowCellInfoRequest, opts ...grpc.CallOption) (DeviceService_StreamFlowCellInfoClient, error)
	// Set the user specified flow cell id.
	//
	// This changes the user specified flow cell id.
	// MinKNOW will use this id in place of the id read from the eeprom, if no eeprom data
	// is available.
	//
	// This data is reset when the flow cell is disconnected.
	//
	// Since 1.12
	SetUserSpecifiedFlowCellId(ctx context.Context, in *SetUserSpecifiedFlowCellIdRequest, opts ...grpc.CallOption) (*SetUserSpecifiedFlowCellIdResponse, error)
	// Set the user specified product code.
	//
	// This changes the user specified product code.
	//
	// MinKNOW does not use the product code, it is intended for use in MinKNOW's clients.
	//
	// This data is reset when the flow cell is disconnected.
	//
	// Since 1.12
	SetUserSpecifiedProductCode(ctx context.Context, in *SetUserSpecifiedProductCodeRequest, opts ...grpc.CallOption) (*SetUserSpecifiedProductCodeResponse, error)
	// Get information about the channel layout
	//
	// Since 1.14
	GetChannelsLayout(ctx context.Context, in *GetChannelsLayoutRequest, opts ...grpc.CallOption) (*GetChannelsLayoutResponse, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoRequest, opts ...grpc.CallOption) (*GetDeviceInfoResponse, error) {
	out := new(GetDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.device.DeviceService/get_device_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceState(ctx context.Context, in *GetDeviceStateRequest, opts ...grpc.CallOption) (*GetDeviceStateResponse, error) {
	out := new(GetDeviceStateResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.device.DeviceService/get_device_state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) StreamDeviceState(ctx context.Context, in *StreamDeviceStateRequest, opts ...grpc.CallOption) (DeviceService_StreamDeviceStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceService_serviceDesc.Streams[0], "/ont.rpc.device.DeviceService/stream_device_state", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceStreamDeviceStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_StreamDeviceStateClient interface {
	Recv() (*GetDeviceStateResponse, error)
	grpc.ClientStream
}

type deviceServiceStreamDeviceStateClient struct {
	grpc.ClientStream
}

func (x *deviceServiceStreamDeviceStateClient) Recv() (*GetDeviceStateResponse, error) {
	m := new(GetDeviceStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) GetFlowCellInfo(ctx context.Context, in *GetFlowCellInfoRequest, opts ...grpc.CallOption) (*GetFlowCellInfoResponse, error) {
	out := new(GetFlowCellInfoResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.device.DeviceService/get_flow_cell_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) StreamFlowCellInfo(ctx context.Context, in *StreamFlowCellInfoRequest, opts ...grpc.CallOption) (DeviceService_StreamFlowCellInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceService_serviceDesc.Streams[1], "/ont.rpc.device.DeviceService/stream_flow_cell_info", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceStreamFlowCellInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_StreamFlowCellInfoClient interface {
	Recv() (*GetFlowCellInfoResponse, error)
	grpc.ClientStream
}

type deviceServiceStreamFlowCellInfoClient struct {
	grpc.ClientStream
}

func (x *deviceServiceStreamFlowCellInfoClient) Recv() (*GetFlowCellInfoResponse, error) {
	m := new(GetFlowCellInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) SetUserSpecifiedFlowCellId(ctx context.Context, in *SetUserSpecifiedFlowCellIdRequest, opts ...grpc.CallOption) (*SetUserSpecifiedFlowCellIdResponse, error) {
	out := new(SetUserSpecifiedFlowCellIdResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.device.DeviceService/set_user_specified_flow_cell_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetUserSpecifiedProductCode(ctx context.Context, in *SetUserSpecifiedProductCodeRequest, opts ...grpc.CallOption) (*SetUserSpecifiedProductCodeResponse, error) {
	out := new(SetUserSpecifiedProductCodeResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.device.DeviceService/set_user_specified_product_code", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetChannelsLayout(ctx context.Context, in *GetChannelsLayoutRequest, opts ...grpc.CallOption) (*GetChannelsLayoutResponse, error) {
	out := new(GetChannelsLayoutResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.device.DeviceService/get_channels_layout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
type DeviceServiceServer interface {
	// Get information about the device this MinKNOW instance was started for.
	//
	// In normal circumstances (ie: when using the manager service), a new MinKNOW instance
	// is started for each available device. This call provides information about this device.
	//
	// The information returned by this call will not change (providing the MinKNOW instance
	// was started by the manager service).
	GetDeviceInfo(context.Context, *GetDeviceInfoRequest) (*GetDeviceInfoResponse, error)
	// Get information about the current device state.
	//
	// Information in this call may change as the device is used with MinKNOW, for example,
	// by unplugging or plugging in the device.
	// Since 1.12
	GetDeviceState(context.Context, *GetDeviceStateRequest) (*GetDeviceStateResponse, error)
	// Streaming version of get_device_state
	//
	// Since 1.13
	StreamDeviceState(*StreamDeviceStateRequest, DeviceService_StreamDeviceStateServer) error
	// Get information about the flow cell (if any).
	//
	// This provides information about the flow_cell attached to the device (described by
	// get_device_info()), if any.
	GetFlowCellInfo(context.Context, *GetFlowCellInfoRequest) (*GetFlowCellInfoResponse, error)
	// Streaming version of get_flow_cell_info
	//
	// Since 1.13
	StreamFlowCellInfo(*StreamFlowCellInfoRequest, DeviceService_StreamFlowCellInfoServer) error
	// Set the user specified flow cell id.
	//
	// This changes the user specified flow cell id.
	// MinKNOW will use this id in place of the id read from the eeprom, if no eeprom data
	// is available.
	//
	// This data is reset when the flow cell is disconnected.
	//
	// Since 1.12
	SetUserSpecifiedFlowCellId(context.Context, *SetUserSpecifiedFlowCellIdRequest) (*SetUserSpecifiedFlowCellIdResponse, error)
	// Set the user specified product code.
	//
	// This changes the user specified product code.
	//
	// MinKNOW does not use the product code, it is intended for use in MinKNOW's clients.
	//
	// This data is reset when the flow cell is disconnected.
	//
	// Since 1.12
	SetUserSpecifiedProductCode(context.Context, *SetUserSpecifiedProductCodeRequest) (*SetUserSpecifiedProductCodeResponse, error)
	// Get information about the channel layout
	//
	// Since 1.14
	GetChannelsLayout(context.Context, *GetChannelsLayoutRequest) (*GetChannelsLayoutResponse, error)
}

// UnimplementedDeviceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (*UnimplementedDeviceServiceServer) GetDeviceInfo(ctx context.Context, req *GetDeviceInfoRequest) (*GetDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (*UnimplementedDeviceServiceServer) GetDeviceState(ctx context.Context, req *GetDeviceStateRequest) (*GetDeviceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceState not implemented")
}
func (*UnimplementedDeviceServiceServer) StreamDeviceState(req *StreamDeviceStateRequest, srv DeviceService_StreamDeviceStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceState not implemented")
}
func (*UnimplementedDeviceServiceServer) GetFlowCellInfo(ctx context.Context, req *GetFlowCellInfoRequest) (*GetFlowCellInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowCellInfo not implemented")
}
func (*UnimplementedDeviceServiceServer) StreamFlowCellInfo(req *StreamFlowCellInfoRequest, srv DeviceService_StreamFlowCellInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFlowCellInfo not implemented")
}
func (*UnimplementedDeviceServiceServer) SetUserSpecifiedFlowCellId(ctx context.Context, req *SetUserSpecifiedFlowCellIdRequest) (*SetUserSpecifiedFlowCellIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserSpecifiedFlowCellId not implemented")
}
func (*UnimplementedDeviceServiceServer) SetUserSpecifiedProductCode(ctx context.Context, req *SetUserSpecifiedProductCodeRequest) (*SetUserSpecifiedProductCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserSpecifiedProductCode not implemented")
}
func (*UnimplementedDeviceServiceServer) GetChannelsLayout(ctx context.Context, req *GetChannelsLayoutRequest) (*GetChannelsLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelsLayout not implemented")
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.device.DeviceService/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceInfo(ctx, req.(*GetDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.device.DeviceService/GetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceState(ctx, req.(*GetDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_StreamDeviceState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).StreamDeviceState(m, &deviceServiceStreamDeviceStateServer{stream})
}

type DeviceService_StreamDeviceStateServer interface {
	Send(*GetDeviceStateResponse) error
	grpc.ServerStream
}

type deviceServiceStreamDeviceStateServer struct {
	grpc.ServerStream
}

func (x *deviceServiceStreamDeviceStateServer) Send(m *GetDeviceStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceService_GetFlowCellInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowCellInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetFlowCellInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.device.DeviceService/GetFlowCellInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetFlowCellInfo(ctx, req.(*GetFlowCellInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_StreamFlowCellInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFlowCellInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).StreamFlowCellInfo(m, &deviceServiceStreamFlowCellInfoServer{stream})
}

type DeviceService_StreamFlowCellInfoServer interface {
	Send(*GetFlowCellInfoResponse) error
	grpc.ServerStream
}

type deviceServiceStreamFlowCellInfoServer struct {
	grpc.ServerStream
}

func (x *deviceServiceStreamFlowCellInfoServer) Send(m *GetFlowCellInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceService_SetUserSpecifiedFlowCellId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserSpecifiedFlowCellIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetUserSpecifiedFlowCellId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.device.DeviceService/SetUserSpecifiedFlowCellId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetUserSpecifiedFlowCellId(ctx, req.(*SetUserSpecifiedFlowCellIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetUserSpecifiedProductCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserSpecifiedProductCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetUserSpecifiedProductCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.device.DeviceService/SetUserSpecifiedProductCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetUserSpecifiedProductCode(ctx, req.(*SetUserSpecifiedProductCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetChannelsLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetChannelsLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.device.DeviceService/GetChannelsLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetChannelsLayout(ctx, req.(*GetChannelsLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ont.rpc.device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_device_info",
			Handler:    _DeviceService_GetDeviceInfo_Handler,
		},
		{
			MethodName: "get_device_state",
			Handler:    _DeviceService_GetDeviceState_Handler,
		},
		{
			MethodName: "get_flow_cell_info",
			Handler:    _DeviceService_GetFlowCellInfo_Handler,
		},
		{
			MethodName: "set_user_specified_flow_cell_id",
			Handler:    _DeviceService_SetUserSpecifiedFlowCellId_Handler,
		},
		{
			MethodName: "set_user_specified_product_code",
			Handler:    _DeviceService_SetUserSpecifiedProductCode_Handler,
		},
		{
			MethodName: "get_channels_layout",
			Handler:    _DeviceService_GetChannelsLayout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream_device_state",
			Handler:       _DeviceService_StreamDeviceState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_flow_cell_info",
			Handler:       _DeviceService_StreamFlowCellInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow/rpc/device.proto",
}
