// Code generated by protoc-gen-go. DO NOT EDIT.
// source: minknow/rpc/manager.proto

package manager

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	instance "minknow_lims_interface/minknow/rpc/instance"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListDevicesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDevicesRequest) Reset()         { *m = ListDevicesRequest{} }
func (m *ListDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListDevicesRequest) ProtoMessage()    {}
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c0de291df3cf25, []int{0}
}

func (m *ListDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesRequest.Unmarshal(m, b)
}
func (m *ListDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesRequest.Marshal(b, m, deterministic)
}
func (m *ListDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesRequest.Merge(m, src)
}
func (m *ListDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_ListDevicesRequest.Size(m)
}
func (m *ListDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesRequest proto.InternalMessageInfo

type ListDevicesResponse struct {
	// Devices that haven't been started
	Inactive []string `protobuf:"bytes,1,rep,name=inactive,proto3" json:"inactive,omitempty"`
	// Devices that are in the process of being started. A call to stop this device will not work until it has fully started
	Pending []string `protobuf:"bytes,2,rep,name=pending,proto3" json:"pending,omitempty"`
	// Devices that have started, along with their port information
	Active               []*ListDevicesResponse_ActiveDevice `protobuf:"bytes,3,rep,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ListDevicesResponse) Reset()         { *m = ListDevicesResponse{} }
func (m *ListDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*ListDevicesResponse) ProtoMessage()    {}
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c0de291df3cf25, []int{1}
}

func (m *ListDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesResponse.Unmarshal(m, b)
}
func (m *ListDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesResponse.Marshal(b, m, deterministic)
}
func (m *ListDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesResponse.Merge(m, src)
}
func (m *ListDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_ListDevicesResponse.Size(m)
}
func (m *ListDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesResponse proto.InternalMessageInfo

func (m *ListDevicesResponse) GetInactive() []string {
	if m != nil {
		return m.Inactive
	}
	return nil
}

func (m *ListDevicesResponse) GetPending() []string {
	if m != nil {
		return m.Pending
	}
	return nil
}

func (m *ListDevicesResponse) GetActive() []*ListDevicesResponse_ActiveDevice {
	if m != nil {
		return m.Active
	}
	return nil
}

type ListDevicesResponse_RpcPorts struct {
	// Used for the old style of rpc using json
	//
	// Deprecated, as new rpc's are not being added to this service
	Jsonrpc uint32 `protobuf:"varint,1,opt,name=jsonrpc,proto3" json:"jsonrpc,omitempty"`
	// Connects to ws_longpoll process and provides engine state updates
	//
	// Deprecated, as minknow is phasing out public access to engine states
	JsonWebsocket uint32 `protobuf:"varint,2,opt,name=json_websocket,json=jsonWebsocket,proto3" json:"json_websocket,omitempty"`
	// Secure connection to the grpc service over TLS
	Secure uint32 `protobuf:"varint,3,opt,name=secure,proto3" json:"secure,omitempty"`
	// Direct connection to the (insecure) grpc connection. You would connect this via the method
	// described in the grpc documentation for your language.
	//
	// This is the "real" grpc port in that in connects directly to the grpc server. Most connections from python
	// and other non-web languages should use this port
	InsecureGrpc uint32 `protobuf:"varint,4,opt,name=insecure_grpc,json=insecureGrpc,proto3" json:"insecure_grpc,omitempty"`
	// Provides a HTTP/1.1 interface to the grpc connection. Intended for connecting with the browser over javascript
	// https://github.com/improbable-eng/grpc-web
	InsecureWeb          uint32   `protobuf:"varint,5,opt,name=insecure_web,json=insecureWeb,proto3" json:"insecure_web,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDevicesResponse_RpcPorts) Reset()         { *m = ListDevicesResponse_RpcPorts{} }
func (m *ListDevicesResponse_RpcPorts) String() string { return proto.CompactTextString(m) }
func (*ListDevicesResponse_RpcPorts) ProtoMessage()    {}
func (*ListDevicesResponse_RpcPorts) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c0de291df3cf25, []int{1, 0}
}

func (m *ListDevicesResponse_RpcPorts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesResponse_RpcPorts.Unmarshal(m, b)
}
func (m *ListDevicesResponse_RpcPorts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesResponse_RpcPorts.Marshal(b, m, deterministic)
}
func (m *ListDevicesResponse_RpcPorts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesResponse_RpcPorts.Merge(m, src)
}
func (m *ListDevicesResponse_RpcPorts) XXX_Size() int {
	return xxx_messageInfo_ListDevicesResponse_RpcPorts.Size(m)
}
func (m *ListDevicesResponse_RpcPorts) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesResponse_RpcPorts.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesResponse_RpcPorts proto.InternalMessageInfo

func (m *ListDevicesResponse_RpcPorts) GetJsonrpc() uint32 {
	if m != nil {
		return m.Jsonrpc
	}
	return 0
}

func (m *ListDevicesResponse_RpcPorts) GetJsonWebsocket() uint32 {
	if m != nil {
		return m.JsonWebsocket
	}
	return 0
}

func (m *ListDevicesResponse_RpcPorts) GetSecure() uint32 {
	if m != nil {
		return m.Secure
	}
	return 0
}

func (m *ListDevicesResponse_RpcPorts) GetInsecureGrpc() uint32 {
	if m != nil {
		return m.InsecureGrpc
	}
	return 0
}

func (m *ListDevicesResponse_RpcPorts) GetInsecureWeb() uint32 {
	if m != nil {
		return m.InsecureWeb
	}
	return 0
}

// Message used to describe how a device is laid out on the physical device.
type ListDevicesResponse_DeviceLayout struct {
	// Zero based index positioning device in the horizontal direction from a top-down orientation.
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	// Zero based index positioning device in the vertical direction from a top-down orientation.
	Y                    int32    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDevicesResponse_DeviceLayout) Reset()         { *m = ListDevicesResponse_DeviceLayout{} }
func (m *ListDevicesResponse_DeviceLayout) String() string { return proto.CompactTextString(m) }
func (*ListDevicesResponse_DeviceLayout) ProtoMessage()    {}
func (*ListDevicesResponse_DeviceLayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c0de291df3cf25, []int{1, 1}
}

func (m *ListDevicesResponse_DeviceLayout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesResponse_DeviceLayout.Unmarshal(m, b)
}
func (m *ListDevicesResponse_DeviceLayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesResponse_DeviceLayout.Marshal(b, m, deterministic)
}
func (m *ListDevicesResponse_DeviceLayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesResponse_DeviceLayout.Merge(m, src)
}
func (m *ListDevicesResponse_DeviceLayout) XXX_Size() int {
	return xxx_messageInfo_ListDevicesResponse_DeviceLayout.Size(m)
}
func (m *ListDevicesResponse_DeviceLayout) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesResponse_DeviceLayout.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesResponse_DeviceLayout proto.InternalMessageInfo

func (m *ListDevicesResponse_DeviceLayout) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *ListDevicesResponse_DeviceLayout) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type ListDevicesResponse_ActiveDevice struct {
	Name  string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ports *ListDevicesResponse_RpcPorts `protobuf:"bytes,2,opt,name=ports,proto3" json:"ports,omitempty"`
	// Device layout information, inidcating this devices physical location.
	//
	// The information will be omitted in cases where there is not a fixed layout (eg. minion)
	//
	// Since 3.3
	Layout               *ListDevicesResponse_DeviceLayout `protobuf:"bytes,3,opt,name=layout,proto3" json:"layout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ListDevicesResponse_ActiveDevice) Reset()         { *m = ListDevicesResponse_ActiveDevice{} }
func (m *ListDevicesResponse_ActiveDevice) String() string { return proto.CompactTextString(m) }
func (*ListDevicesResponse_ActiveDevice) ProtoMessage()    {}
func (*ListDevicesResponse_ActiveDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c0de291df3cf25, []int{1, 2}
}

func (m *ListDevicesResponse_ActiveDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesResponse_ActiveDevice.Unmarshal(m, b)
}
func (m *ListDevicesResponse_ActiveDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesResponse_ActiveDevice.Marshal(b, m, deterministic)
}
func (m *ListDevicesResponse_ActiveDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesResponse_ActiveDevice.Merge(m, src)
}
func (m *ListDevicesResponse_ActiveDevice) XXX_Size() int {
	return xxx_messageInfo_ListDevicesResponse_ActiveDevice.Size(m)
}
func (m *ListDevicesResponse_ActiveDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesResponse_ActiveDevice.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesResponse_ActiveDevice proto.InternalMessageInfo

func (m *ListDevicesResponse_ActiveDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListDevicesResponse_ActiveDevice) GetPorts() *ListDevicesResponse_RpcPorts {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ListDevicesResponse_ActiveDevice) GetLayout() *ListDevicesResponse_DeviceLayout {
	if m != nil {
		return m.Layout
	}
	return nil
}

type GetVersionInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionInfoRequest) Reset()         { *m = GetVersionInfoRequest{} }
func (m *GetVersionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetVersionInfoRequest) ProtoMessage()    {}
func (*GetVersionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c0de291df3cf25, []int{2}
}

func (m *GetVersionInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionInfoRequest.Unmarshal(m, b)
}
func (m *GetVersionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetVersionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionInfoRequest.Merge(m, src)
}
func (m *GetVersionInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetVersionInfoRequest.Size(m)
}
func (m *GetVersionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionInfoRequest proto.InternalMessageInfo

type GetVersionInfoResponse struct {
	// What minknow version is installed. Split into major, minor and patch versions
	// Also includes the full version as a string, which contain the major, minor and patch numbers
	// as well as if the version is pre-release version (-pre), whether it is a release candidate (-rc#)
	// or whether it is a variant version (i.e. for conferences) (-variant). For non-release builds it also
	// includes the hash of the commit it is based on, and whether the working copy is different from that has (-dirty)
	Minknow *instance.GetVersionInfoResponse_MinknowVersion `protobuf:"bytes,1,opt,name=minknow,proto3" json:"minknow,omitempty"`
	// The protocols version specifies what version of bream is installed.
	// By default is set to '0.0.0.0', but will otherwise be set to {minknow-version}.{patch}
	Protocols string `protobuf:"bytes,2,opt,name=protocols,proto3" json:"protocols,omitempty"`
	// Describes the distribution that this MinKNOW installation is part of, ususally
	// this will be the Metapackage version number/identity, this will be "unknown"
	// if the distribution-version hasn't been set. This information is also communicated
	// in the Manager's DaemonMessage in daemon.proto
	DistributionVersion string `protobuf:"bytes,3,opt,name=distribution_version,json=distributionVersion,proto3" json:"distribution_version,omitempty"`
	// Indicates if the MinKNOW distribution including components such as Bream
	// are stable, unstable or have been modified.
	DistributionStatus instance.GetVersionInfoResponse_DistributionStatus `protobuf:"varint,4,opt,name=distribution_status,json=distributionStatus,proto3,enum=ont.rpc.instance.GetVersionInfoResponse_DistributionStatus" json:"distribution_status,omitempty"`
	// Version of guppy MinKNOW was packaged against.
	GuppyBuildVersion string `protobuf:"bytes,5,opt,name=guppy_build_version,json=guppyBuildVersion,proto3" json:"guppy_build_version,omitempty"`
	// Version of guppy MinKNOW running with.
	GuppyConnectedVersion string   `protobuf:"bytes,6,opt,name=guppy_connected_version,json=guppyConnectedVersion,proto3" json:"guppy_connected_version,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetVersionInfoResponse) Reset()         { *m = GetVersionInfoResponse{} }
func (m *GetVersionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetVersionInfoResponse) ProtoMessage()    {}
func (*GetVersionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c0de291df3cf25, []int{3}
}

func (m *GetVersionInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionInfoResponse.Unmarshal(m, b)
}
func (m *GetVersionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetVersionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionInfoResponse.Merge(m, src)
}
func (m *GetVersionInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetVersionInfoResponse.Size(m)
}
func (m *GetVersionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionInfoResponse proto.InternalMessageInfo

func (m *GetVersionInfoResponse) GetMinknow() *instance.GetVersionInfoResponse_MinknowVersion {
	if m != nil {
		return m.Minknow
	}
	return nil
}

func (m *GetVersionInfoResponse) GetProtocols() string {
	if m != nil {
		return m.Protocols
	}
	return ""
}

func (m *GetVersionInfoResponse) GetDistributionVersion() string {
	if m != nil {
		return m.DistributionVersion
	}
	return ""
}

func (m *GetVersionInfoResponse) GetDistributionStatus() instance.GetVersionInfoResponse_DistributionStatus {
	if m != nil {
		return m.DistributionStatus
	}
	return instance.GetVersionInfoResponse_UNKNOWN
}

func (m *GetVersionInfoResponse) GetGuppyBuildVersion() string {
	if m != nil {
		return m.GuppyBuildVersion
	}
	return ""
}

func (m *GetVersionInfoResponse) GetGuppyConnectedVersion() string {
	if m != nil {
		return m.GuppyConnectedVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*ListDevicesRequest)(nil), "ont.rpc.manager.ListDevicesRequest")
	proto.RegisterType((*ListDevicesResponse)(nil), "ont.rpc.manager.ListDevicesResponse")
	proto.RegisterType((*ListDevicesResponse_RpcPorts)(nil), "ont.rpc.manager.ListDevicesResponse.RpcPorts")
	proto.RegisterType((*ListDevicesResponse_DeviceLayout)(nil), "ont.rpc.manager.ListDevicesResponse.DeviceLayout")
	proto.RegisterType((*ListDevicesResponse_ActiveDevice)(nil), "ont.rpc.manager.ListDevicesResponse.ActiveDevice")
	proto.RegisterType((*GetVersionInfoRequest)(nil), "ont.rpc.manager.GetVersionInfoRequest")
	proto.RegisterType((*GetVersionInfoResponse)(nil), "ont.rpc.manager.GetVersionInfoResponse")
}

func init() { proto.RegisterFile("minknow/rpc/manager.proto", fileDescriptor_39c0de291df3cf25) }

var fileDescriptor_39c0de291df3cf25 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0xdc, 0x34, 0x69, 0x33, 0x49, 0xfb, 0xc1, 0xf6, 0xcf, 0x58, 0x5c, 0x94, 0x94, 0x9f,
	0xaa, 0x02, 0x47, 0x0d, 0x12, 0x5c, 0x70, 0x45, 0x5b, 0xa9, 0xaa, 0xd4, 0x4a, 0xb0, 0x95, 0xa8,
	0x04, 0x17, 0x96, 0xb3, 0xd9, 0x44, 0x4b, 0x9d, 0x5d, 0xe3, 0x5d, 0xa7, 0xcd, 0x6b, 0xf0, 0x0e,
	0x5c, 0x71, 0xc7, 0xb3, 0xf0, 0x40, 0x68, 0xc7, 0xde, 0x34, 0x6d, 0x23, 0xc8, 0x9d, 0x67, 0xce,
	0x9c, 0x99, 0x33, 0x3b, 0x47, 0x86, 0x47, 0x43, 0x21, 0x2f, 0xa5, 0xba, 0x6a, 0x67, 0x29, 0x6b,
	0x0f, 0x63, 0x19, 0x0f, 0x78, 0x16, 0xa6, 0x99, 0x32, 0x8a, 0xfc, 0xaf, 0xa4, 0x09, 0xb3, 0x94,
	0x85, 0x65, 0x3a, 0x08, 0xa6, 0x6b, 0x85, 0xd4, 0x26, 0x96, 0x8c, 0x17, 0xc5, 0xad, 0x75, 0x20,
	0xa7, 0x42, 0x9b, 0x23, 0x3e, 0x12, 0x8c, 0x6b, 0xca, 0xbf, 0xe5, 0x5c, 0x9b, 0xd6, 0x8f, 0x45,
	0x58, 0xbb, 0x95, 0xd6, 0xa9, 0x92, 0x9a, 0x93, 0x00, 0x96, 0x85, 0x8c, 0x99, 0x11, 0x23, 0xee,
	0x7b, 0xdb, 0x95, 0xdd, 0x3a, 0x9d, 0xc4, 0xc4, 0x87, 0xa5, 0x94, 0xcb, 0x9e, 0x90, 0x03, 0x7f,
	0x01, 0x21, 0x17, 0x92, 0x13, 0xa8, 0x95, 0x9c, 0xca, 0x76, 0x65, 0xb7, 0xd1, 0xd9, 0x0f, 0xef,
	0x28, 0x0c, 0x67, 0xcc, 0x0a, 0xdf, 0x23, 0xa5, 0xc8, 0xd2, 0xb2, 0x41, 0xf0, 0xd3, 0x83, 0x65,
	0x9a, 0xb2, 0x0f, 0x2a, 0x33, 0xda, 0x4e, 0xfc, 0xaa, 0x95, 0xcc, 0x52, 0xe6, 0x7b, 0xdb, 0xde,
	0xee, 0x0a, 0x75, 0x21, 0x79, 0x06, 0xab, 0xf6, 0x33, 0xba, 0xe2, 0x5d, 0xad, 0xd8, 0x25, 0x37,
	0xfe, 0x02, 0x16, 0xac, 0xd8, 0xec, 0x85, 0x4b, 0x92, 0x4d, 0xa8, 0x69, 0xce, 0xf2, 0xcc, 0x0a,
	0xb3, 0x70, 0x19, 0x91, 0x1d, 0x58, 0x11, 0xb2, 0xf8, 0x8e, 0x06, 0xb6, 0xfd, 0x22, 0xc2, 0x4d,
	0x97, 0x3c, 0xb6, 0x33, 0x9e, 0xc0, 0x24, 0xb6, 0x73, 0xfc, 0x2a, 0xd6, 0x34, 0x5c, 0xee, 0x82,
	0x77, 0x83, 0x3d, 0x68, 0x16, 0xfa, 0x4f, 0xe3, 0xb1, 0xca, 0x0d, 0x69, 0x82, 0x77, 0x8d, 0x52,
	0xab, 0xd4, 0xbb, 0xb6, 0xd1, 0x18, 0x75, 0x55, 0xa9, 0x37, 0x0e, 0x7e, 0x79, 0xd0, 0x9c, 0x5e,
	0x99, 0x10, 0x58, 0x94, 0xf1, 0x90, 0x63, 0x7d, 0x9d, 0xe2, 0x37, 0x39, 0x84, 0x6a, 0x6a, 0x57,
	0x47, 0x5a, 0xa3, 0xf3, 0x6a, 0xae, 0x87, 0x74, 0xef, 0x45, 0x0b, 0xae, 0x3d, 0x47, 0x82, 0x7a,
	0x70, 0xeb, 0x79, 0xcf, 0x31, 0xbd, 0x08, 0x2d, 0x1b, 0xb4, 0xb6, 0x60, 0xe3, 0x98, 0x9b, 0x4f,
	0x3c, 0xd3, 0x42, 0xc9, 0x13, 0xd9, 0x57, 0xce, 0x40, 0xdf, 0x2b, 0xb0, 0x79, 0x17, 0x29, 0x3d,
	0xf4, 0x11, 0x96, 0x4a, 0x3f, 0xe2, 0x6a, 0x8d, 0xce, 0xdb, 0xc9, 0xfc, 0x89, 0x37, 0x67, 0x53,
	0xc3, 0xb3, 0x82, 0x57, 0x42, 0xd4, 0xf5, 0x21, 0x8f, 0xa1, 0x8e, 0x6e, 0x66, 0x2a, 0x29, 0x9e,
	0xa6, 0x4e, 0x6f, 0x12, 0x64, 0x1f, 0xd6, 0x7b, 0x42, 0x9b, 0x4c, 0x74, 0x73, 0x23, 0x94, 0x8c,
	0x46, 0x05, 0x1d, 0xb7, 0xaf, 0xd3, 0xb5, 0x69, 0xac, 0xec, 0x4c, 0x12, 0xb8, 0x95, 0x8e, 0xb4,
	0x89, 0x4d, 0xae, 0xd1, 0x06, 0xab, 0x9d, 0x77, 0x73, 0xeb, 0x3d, 0x9a, 0xea, 0x71, 0x8e, 0x2d,
	0x28, 0xe9, 0xdd, 0xcb, 0x91, 0x10, 0xd6, 0x06, 0x79, 0x9a, 0x8e, 0xa3, 0x6e, 0x2e, 0x92, 0xde,
	0x44, 0x5f, 0x15, 0xf5, 0x3d, 0x44, 0xe8, 0xc0, 0x22, 0x4e, 0xdd, 0x1b, 0xd8, 0x2a, 0xea, 0x99,
	0x92, 0x92, 0x33, 0xc3, 0x6f, 0x38, 0x35, 0xe4, 0x6c, 0x20, 0x7c, 0xe8, 0xd0, 0x92, 0xd7, 0xf9,
	0xed, 0xc1, 0xea, 0x59, 0x71, 0xe2, 0x73, 0x9e, 0xa1, 0xc9, 0xbe, 0x40, 0x33, 0x11, 0xda, 0x44,
	0xbd, 0xe2, 0xda, 0x64, 0xe7, 0xef, 0x5e, 0xc0, 0xe3, 0x06, 0x4f, 0xe7, 0x31, 0x4c, 0xeb, 0x3f,
	0xc2, 0xe1, 0xc1, 0x80, 0x1b, 0xa7, 0x2d, 0x12, 0xb2, 0xaf, 0xc8, 0xf3, 0x7b, 0xdc, 0x99, 0x06,
	0x0a, 0x5e, 0xfc, 0xb3, 0xce, 0x8d, 0x39, 0x78, 0xf9, 0x79, 0xaf, 0x34, 0x42, 0x94, 0x88, 0xa1,
	0x8e, 0x84, 0x34, 0x3c, 0xeb, 0xc7, 0x8c, 0xb7, 0x67, 0xfc, 0x23, 0xbb, 0x35, 0x34, 0xc6, 0xeb,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xd1, 0xdf, 0x0f, 0x41, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerServiceClient interface {
	// List all devices attached to this machine.
	//
	// Devices will be in 1 of 3 states: active, pending, inactive. Will provide port information
	// for any devices that are active
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Current version information includes:
	// - Minknow version
	// - Protocols version
	// - Distribution version
	// - Guppy version
	//
	// See also: instance.get_version_info which provides some similar information on a per instance basis.
	// Since 3.3
	GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error)
}

type managerServiceClient struct {
	cc *grpc.ClientConn
}

func NewManagerServiceClient(cc *grpc.ClientConn) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.manager.ManagerService/list_devices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error) {
	out := new(GetVersionInfoResponse)
	err := c.cc.Invoke(ctx, "/ont.rpc.manager.ManagerService/get_version_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
type ManagerServiceServer interface {
	// List all devices attached to this machine.
	//
	// Devices will be in 1 of 3 states: active, pending, inactive. Will provide port information
	// for any devices that are active
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// Current version information includes:
	// - Minknow version
	// - Protocols version
	// - Distribution version
	// - Guppy version
	//
	// See also: instance.get_version_info which provides some similar information on a per instance basis.
	// Since 3.3
	GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error)
}

// UnimplementedManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (*UnimplementedManagerServiceServer) ListDevices(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedManagerServiceServer) GetVersionInfo(ctx context.Context, req *GetVersionInfoRequest) (*GetVersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionInfo not implemented")
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.manager.ManagerService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ont.rpc.manager.ManagerService/GetVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetVersionInfo(ctx, req.(*GetVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ont.rpc.manager.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list_devices",
			Handler:    _ManagerService_ListDevices_Handler,
		},
		{
			MethodName: "get_version_info",
			Handler:    _ManagerService_GetVersionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minknow/rpc/manager.proto",
}
